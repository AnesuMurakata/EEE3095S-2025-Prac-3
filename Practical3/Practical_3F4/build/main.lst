ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.global	__aeabi_ldivmod
  21              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
  22              		.align	1
  23              		.global	calculate_mandelbrot_fixed_point_arithmetic
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  28              	calculate_mandelbrot_fixed_point_arithmetic:
  29              	.LVL0:
  30              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 2


  29:Core/Src/main.c **** // #define MAX_ITER 1000  // Removed - now using array of values
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE BEGIN PV */
  45:Core/Src/main.c **** //TODO: Define and initialise the global varibales required
  46:Core/Src/main.c **** /*
  47:Core/Src/main.c ****   start_time
  48:Core/Src/main.c ****   end_time
  49:Core/Src/main.c ****   execution_time
  50:Core/Src/main.c ****   checksum: should be uint64_t
  51:Core/Src/main.c ****   initial width and height maybe or you might opt for an array??
  52:Core/Src/main.c **** */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** // Global variables for Task 1
  55:Core/Src/main.c **** // Image dimensions for testing (square images)
  56:Core/Src/main.c **** #define IMAGE_128 128
  57:Core/Src/main.c **** #define IMAGE_160 160
  58:Core/Src/main.c **** #define IMAGE_192 192
  59:Core/Src/main.c **** #define IMAGE_224 224
  60:Core/Src/main.c **** #define IMAGE_256 256
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** // Global checksum variable to hold the checksum returned from the mandelbrot function
  63:Core/Src/main.c **** uint64_t global_checksum;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** uint32_t execution_time;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** // Global start_time variable
  68:Core/Src/main.c **** uint32_t start_time;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // Global end_time variable
  71:Core/Src/main.c **** uint32_t end_time;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** // DWT cycle counter variables
  74:Core/Src/main.c **** volatile uint32_t dwt_start_cycles;
  75:Core/Src/main.c **** volatile uint32_t dwt_end_cycles;
  76:Core/Src/main.c **** volatile uint32_t dwt_cycle_count;
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** // Extended measurement arrays
  79:Core/Src/main.c **** uint32_t wall_clock_fixed[5];     // Wall clock time for fixed-point
  80:Core/Src/main.c **** uint32_t wall_clock_double[5];    // Wall clock time for double
  81:Core/Src/main.c **** uint32_t cpu_cycles_fixed[5];     // CPU cycles for fixed-point
  82:Core/Src/main.c **** uint32_t cpu_cycles_double[5];    // CPU cycles for double
  83:Core/Src/main.c **** float throughput_fixed[5];        // Throughput for fixed-point
  84:Core/Src/main.c **** float throughput_double[5];       // Throughput for double
  85:Core/Src/main.c **** uint32_t total_pixels[5];         // Total pixels for each size
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 3


  86:Core/Src/main.c **** uint64_t checksums_fixed[5];      // Checksums for fixed-point
  87:Core/Src/main.c **** uint64_t checksums_double[5];     // Checksums for double
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** // Image sizes array
  90:Core/Src/main.c **** int image_sizes[] = {IMAGE_128, IMAGE_160, IMAGE_192, IMAGE_224, IMAGE_256};
  91:Core/Src/main.c **** int num_sizes = 5;
  92:Core/Src/main.c **** int max_iterations = 100;  // Fixed MAX_ITER = 100
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** // Global counter for current test
  95:Core/Src/main.c **** int current_test_index = 0;
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** // Task 5: Float vs Double testing variables
  98:Core/Src/main.c **** uint32_t task5_wall_clock_float[5];     // Wall clock time for float
  99:Core/Src/main.c **** uint32_t task5_wall_clock_double[5];    // Wall clock time for double
 100:Core/Src/main.c **** uint64_t task5_checksums_float[5];      // Checksums for float
 101:Core/Src/main.c **** uint64_t task5_checksums_double[5];     // Checksums for double
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** // Task 7: Fixed-point scaling factor testing
 104:Core/Src/main.c **** // Scaling factors to test: 10^3, 10^4, 10^6
 105:Core/Src/main.c **** int64_t scaling_factors[3] = {1000, 10000, 1000000};  // 10^3, 10^4, 10^6
 106:Core/Src/main.c **** char* scaling_names[3] = {"10^3", "10^4", "10^6"};
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** // Results for each scaling factor (15 total tests: 3 scaling factors Ã— 5 image sizes)
 109:Core/Src/main.c **** uint32_t task7_execution_times[15];    // 15 total tests
 110:Core/Src/main.c **** uint64_t task7_checksums[15];          // 15 total tests
 111:Core/Src/main.c **** uint32_t task7_overflow_counts[15];    // 15 total tests
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** // Image sizes from Practical 1B (using image_sizes array)
 114:Core/Src/main.c **** int task7_image_sizes[5] = {128, 160, 192, 224, 256};
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** // Task 7 test counter
 117:Core/Src/main.c **** int task7_test_index = 0;
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** // Task 4: Image splitting and processing variables
 120:Core/Src/main.c **** // Image dimensions for Task 4: 520x520, 1280x720, 1920x1080
 121:Core/Src/main.c **** int task4_image_widths[3] = {520, 1280, 1920};
 122:Core/Src/main.c **** int task4_image_heights[3] = {520, 720, 1080};
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** // Execution times for Task 4 (wall clock time)
 125:Core/Src/main.c **** uint32_t task4_wall_clock_fixed[3];
 126:Core/Src/main.c **** uint32_t task4_wall_clock_double[3];
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** // CPU cycles for Task 4
 129:Core/Src/main.c **** uint32_t task4_cpu_cycles_fixed[3];
 130:Core/Src/main.c **** uint32_t task4_cpu_cycles_double[3];
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** // Throughput for Task 4
 133:Core/Src/main.c **** float task4_throughput_fixed[3];
 134:Core/Src/main.c **** float task4_throughput_double[3];
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** // Checksums for Task 4
 137:Core/Src/main.c **** uint64_t task4_checksums_fixed[3];
 138:Core/Src/main.c **** uint64_t task4_checksums_double[3];
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** // Chunking parameters
 141:Core/Src/main.c **** #define MAX_CHUNK_SIZE 128  // 128x128 chunks for STM32F4 (more memory than F0)
 142:Core/Src/main.c **** #define CHUNK_OVERLAP 0     // No overlap needed for Mandelbrot
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 4


 143:Core/Src/main.c **** 
 144:Core/Src/main.c **** // Chunk processing counters
 145:Core/Src/main.c **** uint32_t total_chunks_processed = 0;
 146:Core/Src/main.c **** uint32_t current_chunk_x = 0;
 147:Core/Src/main.c **** uint32_t current_chunk_y = 0;
 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** /* USER CODE END PV */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 152:Core/Src/main.c **** void SystemClock_Config(void);
 153:Core/Src/main.c **** static void MX_GPIO_Init(void);
 154:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 155:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
 156:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
 157:Core/Src/main.c **** uint64_t calculate_mandelbrot_float(int width, int height, int max_iterations);
 158:Core/Src/main.c **** void MX_DWT_Init(void);
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** // Task 4 function prototypes
 161:Core/Src/main.c **** void process_image_in_chunks(int full_width, int full_height, int max_iter, 
 162:Core/Src/main.c ****                             uint64_t (*mandelbrot_func)(int, int, int),
 163:Core/Src/main.c ****                             uint32_t *wall_clock, uint32_t *cpu_cycles, 
 164:Core/Src/main.c ****                             float *throughput, uint64_t *total_checksum);
 165:Core/Src/main.c **** uint64_t calculate_mandelbrot_chunk(int chunk_x, int chunk_y, int chunk_width, int chunk_height,
 166:Core/Src/main.c ****                                    int full_width, int full_height, int max_iter,
 167:Core/Src/main.c ****                                    uint64_t (*mandelbrot_func)(int, int, int));
 168:Core/Src/main.c **** uint64_t calculate_single_pixel_mandelbrot_fixed(int x, int y, int width, int height, int max_iter)
 169:Core/Src/main.c **** uint64_t calculate_single_pixel_mandelbrot_double(int x, int y, int width, int height, int max_iter
 170:Core/Src/main.c **** void reset_chunk_counters(void);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** // Task 7 function prototypes
 173:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_with_scale(int width, int height, int max_iter, int64_t s
 174:Core/Src/main.c **** void test_scaling_factors(void);
 175:Core/Src/main.c **** void analyze_scaling_results(void);
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** /* USER CODE END PFP */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 181:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* USER CODE END 0 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief  The application entry point.
 187:Core/Src/main.c ****   * @retval int
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c ****   int main(void)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     /* USER CODE BEGIN 1 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     /* USER CODE END 1 */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****     /* MCU Configuration--------------------------------------------------------*/
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 198:Core/Src/main.c ****     HAL_Init();
 199:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 5


 200:Core/Src/main.c ****     /* USER CODE BEGIN Init */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****     /* USER CODE END Init */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****     /* Configure the system clock */
 205:Core/Src/main.c ****     SystemClock_Config();
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****     /* USER CODE BEGIN SysInit */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****     /* USER CODE END SysInit */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****     /* Initialize all configured peripherals */
 212:Core/Src/main.c ****     MX_GPIO_Init();
 213:Core/Src/main.c ****     /* USER CODE BEGIN 2 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****     // Initialize DWT cycle counter
 216:Core/Src/main.c ****     MX_DWT_Init();
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****     // Task 5: Float vs Double testing
 219:Core/Src/main.c ****     // Test all image sizes with MAX_ITER = 100
 220:Core/Src/main.c ****     for (int i = 0; i < num_sizes; i++) {
 221:Core/Src/main.c ****         current_test_index = i;
 222:Core/Src/main.c ****         int test_size = image_sizes[i];
 223:Core/Src/main.c ****         total_pixels[i] = test_size * test_size;  // Calculate total pixels
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****         // Test 1: Float Arithmetic
 226:Core/Src/main.c ****         // Turn on LED 0 to signify the start of the operation
 227:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****         // Wall clock time measurement
 230:Core/Src/main.c ****         start_time = HAL_GetTick();
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****         // Call the Mandelbrot Function
 233:Core/Src/main.c ****         global_checksum = calculate_mandelbrot_float(test_size, test_size, max_iterations);
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****         // End measurements
 236:Core/Src/main.c ****         end_time = HAL_GetTick();
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****         // Calculate and store results
 239:Core/Src/main.c ****         execution_time = end_time - start_time;
 240:Core/Src/main.c ****         task5_wall_clock_float[i] = execution_time;
 241:Core/Src/main.c ****         task5_checksums_float[i] = global_checksum;
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****         // Turn on LED 1 to signify the end of the operation
 244:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****         // Hold the LEDs on for a 1s delay
 247:Core/Src/main.c ****         HAL_Delay(1000);
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****         // Turn off the LEDs
 250:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 251:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****         // Test 2: Double Arithmetic
 254:Core/Src/main.c ****         // Turn on LED 0 to signify the start of the second operation
 255:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 256:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 6


 257:Core/Src/main.c ****         // Wall clock time measurement
 258:Core/Src/main.c ****         start_time = HAL_GetTick();
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****         // Call the Mandelbrot Function
 261:Core/Src/main.c ****         global_checksum = calculate_mandelbrot_double(test_size, test_size, max_iterations);
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****         // End measurements
 264:Core/Src/main.c ****         end_time = HAL_GetTick();
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****         // Calculate and store results
 267:Core/Src/main.c ****         execution_time = end_time - start_time;
 268:Core/Src/main.c ****         task5_wall_clock_double[i] = execution_time;
 269:Core/Src/main.c ****         task5_checksums_double[i] = global_checksum;
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****         // Turn on LED 1 to signify the end of the operation
 272:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****         // Hold the LEDs on for a 1s delay
 275:Core/Src/main.c ****         HAL_Delay(1000);
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****         // Turn off the LEDs
 278:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 279:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****         // Small delay between different image sizes
 282:Core/Src/main.c ****         HAL_Delay(500);
 283:Core/Src/main.c ****     }
 284:Core/Src/main.c ****     
 285:Core/Src/main.c ****     // Task 4: Large image processing with chunking
 286:Core/Src/main.c ****     // Process images: 520x520, 1280x720, 1920x1080
 287:Core/Src/main.c ****     /*
 288:Core/Src/main.c ****     for (int task4_test = 0; task4_test < 3; task4_test++) {
 289:Core/Src/main.c ****         int current_width = task4_image_widths[task4_test];
 290:Core/Src/main.c ****         int current_height = task4_image_heights[task4_test];
 291:Core/Src/main.c ****         
 292:Core/Src/main.c ****         // Test Fixed Point Arithmetic
 293:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 294:Core/Src/main.c ****         
 295:Core/Src/main.c ****         process_image_in_chunks(current_width, current_height, max_iterations,
 296:Core/Src/main.c ****                                calculate_mandelbrot_fixed_point_arithmetic,
 297:Core/Src/main.c ****                                &task4_wall_clock_fixed[task4_test],
 298:Core/Src/main.c ****                                &task4_cpu_cycles_fixed[task4_test],
 299:Core/Src/main.c ****                                &task4_throughput_fixed[task4_test],
 300:Core/Src/main.c ****                                &task4_checksums_fixed[task4_test]);
 301:Core/Src/main.c ****         
 302:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 303:Core/Src/main.c ****         HAL_Delay(500);
 304:Core/Src/main.c ****         
 305:Core/Src/main.c ****         // Test Double Arithmetic
 306:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 307:Core/Src/main.c ****         
 308:Core/Src/main.c ****         process_image_in_chunks(current_width, current_height, max_iterations,
 309:Core/Src/main.c ****                                calculate_mandelbrot_double,
 310:Core/Src/main.c ****                                &task4_wall_clock_double[task4_test],
 311:Core/Src/main.c ****                                &task4_cpu_cycles_double[task4_test],
 312:Core/Src/main.c ****                                &task4_throughput_double[task4_test],
 313:Core/Src/main.c ****                                &task4_checksums_double[task4_test]);
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 7


 314:Core/Src/main.c ****         
 315:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 316:Core/Src/main.c ****         HAL_Delay(500);
 317:Core/Src/main.c ****     }
 318:Core/Src/main.c ****     
 319:Core/Src/main.c ****     // All Task 4 tests completed - turn on both LEDs to indicate completion
 320:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 321:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 322:Core/Src/main.c ****     
 323:Core/Src/main.c ****     // Hold the LEDs on for 3s to show Task 4 completion
 324:Core/Src/main.c ****     HAL_Delay(3000);
 325:Core/Src/main.c ****     
 326:Core/Src/main.c ****     // Turn off the LEDs
 327:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 328:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 329:Core/Src/main.c ****     */
 330:Core/Src/main.c ****     
 331:Core/Src/main.c ****     // Task 7: Fixed-point scaling factor testing
 332:Core/Src/main.c ****     // Test scaling factors: 10^3, 10^4, 10^6
 333:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // Indicate Task 7 start
 334:Core/Src/main.c ****     test_scaling_factors();
 335:Core/Src/main.c ****     analyze_scaling_results();
 336:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 337:Core/Src/main.c ****     
 338:Core/Src/main.c ****     // All Task 7 tests completed - turn on both LEDs to indicate completion
 339:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 340:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 341:Core/Src/main.c ****     
 342:Core/Src/main.c ****     // Hold the LEDs on for 3s to show Task 7 completion
 343:Core/Src/main.c ****     HAL_Delay(3000);
 344:Core/Src/main.c ****     
 345:Core/Src/main.c ****     // Turn off the LEDs
 346:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 347:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****     /* USER CODE END 2 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****     /* Infinite loop */
 352:Core/Src/main.c ****     /* USER CODE BEGIN WHILE */
 353:Core/Src/main.c ****     while (1)
 354:Core/Src/main.c ****     {
 355:Core/Src/main.c ****       /* USER CODE END WHILE */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****       /* USER CODE BEGIN 3 */
 358:Core/Src/main.c ****     }
 359:Core/Src/main.c ****     /* USER CODE END 3 */
 360:Core/Src/main.c ****   }
 361:Core/Src/main.c **** 
 362:Core/Src/main.c **** /**
 363:Core/Src/main.c ****   * @brief System Clock Configuration
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** void SystemClock_Config(void)
 367:Core/Src/main.c **** {
 368:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 369:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 370:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 8


 371:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 372:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 373:Core/Src/main.c ****   */
 374:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 375:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 376:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 377:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 378:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 379:Core/Src/main.c ****   {
 380:Core/Src/main.c ****     Error_Handler();
 381:Core/Src/main.c ****   }
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 384:Core/Src/main.c ****   */
 385:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 386:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 387:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 388:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 389:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c **** }
 396:Core/Src/main.c **** 
 397:Core/Src/main.c **** /**
 398:Core/Src/main.c ****   * @brief GPIO Initialization Function
 399:Core/Src/main.c ****   * @param None
 400:Core/Src/main.c ****   * @retval None
 401:Core/Src/main.c ****   */
 402:Core/Src/main.c **** static void MX_GPIO_Init(void)
 403:Core/Src/main.c **** {
 404:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 405:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 406:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 409:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 410:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 413:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 */
 416:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 417:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 418:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 419:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 420:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 423:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 424:Core/Src/main.c **** }
 425:Core/Src/main.c **** 
 426:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 427:Core/Src/main.c **** //TODO: Mandelbroat using variable type integers and fixed point arithmetic
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 9


 428:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
  31              		.loc 1 428 96 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 56
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 428 96 is_stmt 0 view .LVU1
  36 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 36
  39              		.cfi_offset 4, -36
  40              		.cfi_offset 5, -32
  41              		.cfi_offset 6, -28
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 8, -20
  44              		.cfi_offset 9, -16
  45              		.cfi_offset 10, -12
  46              		.cfi_offset 11, -8
  47              		.cfi_offset 14, -4
  48 0004 8FB0     		sub	sp, sp, #60
  49              	.LCFI1:
  50              		.cfi_def_cfa_offset 96
  51 0006 0D90     		str	r0, [sp, #52]
  52 0008 0C91     		str	r1, [sp, #48]
 429:Core/Src/main.c ****   uint64_t mandelbrot_sum = 0;
  53              		.loc 1 429 3 is_stmt 1 view .LVU2
  54              	.LVL1:
 430:Core/Src/main.c ****     //TODO: Complete the function implementation
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   // Fixed-point scaling factor (10^6 as suggested in Appendix B)
 433:Core/Src/main.c ****   const int64_t SCALE = 1000000;
  55              		.loc 1 433 3 view .LVU3
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   // Pre-calculate scaled constants
 436:Core/Src/main.c ****   int64_t scaled_3_5 = 3 * SCALE + (5 * SCALE) / 10;  // 3.5 * SCALE
  56              		.loc 1 436 3 view .LVU4
 437:Core/Src/main.c ****   int64_t scaled_2_0 = 2 * SCALE;                      // 2.0 * SCALE
  57              		.loc 1 437 3 view .LVU5
 438:Core/Src/main.c ****   int64_t scaled_2_5 = 2 * SCALE + (5 * SCALE) / 10;  // 2.5 * SCALE
  58              		.loc 1 438 3 view .LVU6
 439:Core/Src/main.c ****   int64_t scaled_1_0 = SCALE;                          // 1.0 * SCALE
  59              		.loc 1 439 3 view .LVU7
 440:Core/Src/main.c ****   int64_t scaled_4 = 4 * SCALE;                        // 4 * SCALE
  60              		.loc 1 440 3 view .LVU8
 441:Core/Src/main.c ****   int64_t scaled_2 = 2 * SCALE;                        // 2 * SCALE
  61              		.loc 1 441 3 view .LVU9
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   // Loop through each pixel (y coordinate)
 444:Core/Src/main.c ****   for (int y = 0; y < height; y++) {
  62              		.loc 1 444 3 view .LVU10
  63              	.LBB4:
  64              		.loc 1 444 8 view .LVU11
  65              		.loc 1 444 12 is_stmt 0 view .LVU12
  66 000a 4FF00009 		mov	r9, #0
  67              	.LBE4:
 429:Core/Src/main.c ****     //TODO: Complete the function implementation
  68              		.loc 1 429 12 view .LVU13
  69 000e CDF81C90 		str	r9, [sp, #28]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 10


  70 0012 CDF82090 		str	r9, [sp, #32]
  71 0016 4F46     		mov	r7, r9
  72 0018 0292     		str	r2, [sp, #8]
  73              	.LBB10:
  74              		.loc 1 444 3 view .LVU14
  75 001a B4E0     		b	.L2
  76              	.LVL2:
  77              	.L5:
  78              	.LBB5:
  79              	.LBB6:
  80              	.LBB7:
 445:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 446:Core/Src/main.c ****     for (int x = 0; x < width; x++) {
 447:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 448:Core/Src/main.c ****       int64_t x0 = ((x * scaled_3_5) / width) - scaled_2_5;
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****       // Calculate y0 = (y / height) * 2.0 - 1.0
 451:Core/Src/main.c ****       int64_t y0 = ((y * scaled_2_0) / height) - scaled_1_0;
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****       // Initialize iteration variables
 454:Core/Src/main.c ****       int64_t xi = 0;
 455:Core/Src/main.c ****       int64_t yi = 0;
 456:Core/Src/main.c ****       int iteration = 0;
 457:Core/Src/main.c **** 
 458:Core/Src/main.c ****       // Main iteration loop
 459:Core/Src/main.c ****       while (iteration < max_iterations &&
 460:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****         // temp = xi^2 - yi^2
 463:Core/Src/main.c ****         int64_t temp = ((xi * xi) / SCALE) - ((yi * yi) / SCALE);
  81              		.loc 1 463 9 is_stmt 1 view .LVU15
  82              		.loc 1 463 35 is_stmt 0 view .LVU16
  83 001c 614A     		ldr	r2, .L12
  84 001e 0023     		movs	r3, #0
  85 0020 FFF7FEFF 		bl	__aeabi_ldivmod
  86              	.LVL3:
  87 0024 0191     		str	r1, [sp, #4]
  88 0026 0746     		mov	r7, r0
  89              		.loc 1 463 57 view .LVU17
  90 0028 5F4A     		ldr	r2, .L12+4
  91 002a 4FF0FF33 		mov	r3, #-1
  92 002e 5046     		mov	r0, r10
  93 0030 4946     		mov	r1, r9
  94 0032 FFF7FEFF 		bl	__aeabi_ldivmod
  95              	.LVL4:
  96              		.loc 1 463 17 view .LVU18
  97 0036 3F18     		adds	r7, r7, r0
  98 0038 019B     		ldr	r3, [sp, #4]
  99 003a 43EB0109 		adc	r9, r3, r1
 100              	.LVL5:
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****         // yi = 2 * xi * yi + y0
 466:Core/Src/main.c ****         yi = ((scaled_2 * xi * yi) / SCALE) + y0;
 101              		.loc 1 466 9 is_stmt 1 view .LVU19
 102              		.loc 1 466 30 is_stmt 0 view .LVU20
 103 003e 04FB08F1 		mul	r1, r4, r8
 104 0042 05FB0611 		mla	r1, r5, r6, r1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 11


 105 0046 A4FB0505 		umull	r0, r5, r4, r5
 106              	.LVL6:
 107              		.loc 1 466 30 view .LVU21
 108 004a 2944     		add	r1, r1, r5
 109 004c 4B01     		lsls	r3, r1, #5
 110 004e 43EAD063 		orr	r3, r3, r0, lsr #27
 111 0052 4201     		lsls	r2, r0, #5
 112 0054 121A     		subs	r2, r2, r0
 113 0056 63EB0105 		sbc	r5, r3, r1
 114 005a AB01     		lsls	r3, r5, #6
 115 005c 43EA9263 		orr	r3, r3, r2, lsr #26
 116 0060 9401     		lsls	r4, r2, #6
 117              	.LVL7:
 118              		.loc 1 466 30 view .LVU22
 119 0062 A41A     		subs	r4, r4, r2
 120 0064 63EB0503 		sbc	r3, r3, r5
 121 0068 DB00     		lsls	r3, r3, #3
 122 006a 43EA5473 		orr	r3, r3, r4, lsr #29
 123 006e E400     		lsls	r4, r4, #3
 124 0070 2418     		adds	r4, r4, r0
 125 0072 41EB0301 		adc	r1, r1, r3
 126 0076 C901     		lsls	r1, r1, #7
 127              		.loc 1 466 36 view .LVU23
 128 0078 4A4A     		ldr	r2, .L12
 129 007a 0023     		movs	r3, #0
 130 007c E001     		lsls	r0, r4, #7
 131 007e 41EA5461 		orr	r1, r1, r4, lsr #25
 132 0082 FFF7FEFF 		bl	__aeabi_ldivmod
 133              	.LVL8:
 134              		.loc 1 466 12 view .LVU24
 135 0086 059B     		ldr	r3, [sp, #20]
 136 0088 1D18     		adds	r5, r3, r0
 137 008a 069B     		ldr	r3, [sp, #24]
 138 008c 43EB0108 		adc	r8, r3, r1
 139              	.LVL9:
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****         // xi = temp + x0
 469:Core/Src/main.c ****         xi = temp + x0;
 140              		.loc 1 469 9 is_stmt 1 view .LVU25
 141              		.loc 1 469 12 is_stmt 0 view .LVU26
 142 0090 039B     		ldr	r3, [sp, #12]
 143 0092 DC19     		adds	r4, r3, r7
 144 0094 049B     		ldr	r3, [sp, #16]
 145 0096 43EB0906 		adc	r6, r3, r9
 146              	.LVL10:
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****         iteration++;
 147              		.loc 1 471 9 is_stmt 1 view .LVU27
 148              		.loc 1 471 18 is_stmt 0 view .LVU28
 149 009a 0BF1010B 		add	fp, fp, #1
 150              	.LVL11:
 151              	.L3:
 152              		.loc 1 471 18 view .LVU29
 153              	.LBE7:
 459:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 154              		.loc 1 459 41 is_stmt 1 view .LVU30
 155 009e 029B     		ldr	r3, [sp, #8]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 12


 156 00a0 9B45     		cmp	fp, r3
 157 00a2 15DA     		bge	.L4
 460:Core/Src/main.c **** 
 158              		.loc 1 460 15 is_stmt 0 view .LVU31
 159 00a4 04FB06F3 		mul	r3, r4, r6
 160 00a8 A4FB0401 		umull	r0, r1, r4, r4
 161 00ac 01EB4301 		add	r1, r1, r3, lsl #1
 460:Core/Src/main.c **** 
 162              		.loc 1 460 25 view .LVU32
 163 00b0 05FB08F3 		mul	r3, r5, r8
 164 00b4 A5FB05A9 		umull	r10, r9, r5, r5
 165 00b8 09EB4309 		add	r9, r9, r3, lsl #1
 460:Core/Src/main.c **** 
 166              		.loc 1 460 20 view .LVU33
 167 00bc 10EB0A03 		adds	r3, r0, r10
 168 00c0 41EB0902 		adc	r2, r1, r9
 459:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 169              		.loc 1 459 41 discriminator 1 view .LVU34
 170 00c4 394F     		ldr	r7, .L12+8
 171 00c6 9F42     		cmp	r7, r3
 172 00c8 4FF00003 		mov	r3, #0
 173 00cc 9341     		sbcs	r3, r3, r2
 174 00ce A5DA     		bge	.L5
 175              	.L4:
 472:Core/Src/main.c ****       }
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****       // Add iteration count to checksum
 475:Core/Src/main.c ****       mandelbrot_sum += iteration;
 176              		.loc 1 475 22 view .LVU35
 177 00d0 DDF82490 		ldr	r9, [sp, #36]
 178 00d4 5F46     		mov	r7, fp
 179 00d6 DDF828B0 		ldr	fp, [sp, #40]
 180              	.LVL12:
 181              		.loc 1 475 22 view .LVU36
 182 00da DDF82CA0 		ldr	r10, [sp, #44]
 183              		.loc 1 475 7 is_stmt 1 view .LVU37
 184              		.loc 1 475 22 is_stmt 0 view .LVU38
 185 00de 079B     		ldr	r3, [sp, #28]
 186 00e0 FB18     		adds	r3, r7, r3
 187 00e2 0793     		str	r3, [sp, #28]
 188              	.LVL13:
 189              		.loc 1 475 22 view .LVU39
 190 00e4 089B     		ldr	r3, [sp, #32]
 191 00e6 43EBE773 		adc	r3, r3, r7, asr #31
 192 00ea 0893     		str	r3, [sp, #32]
 193              	.LVL14:
 194              		.loc 1 475 22 view .LVU40
 195              	.LBE6:
 446:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 196              		.loc 1 446 33 is_stmt 1 discriminator 2 view .LVU41
 197 00ec 0BF1010B 		add	fp, fp, #1
 198              	.LVL15:
 199              	.L7:
 446:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 200              		.loc 1 446 23 discriminator 1 view .LVU42
 201 00f0 D345     		cmp	fp, r10
 202 00f2 46DA     		bge	.L10
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 13


 203              	.LBB8:
 448:Core/Src/main.c **** 
 204              		.loc 1 448 7 view .LVU43
 448:Core/Src/main.c **** 
 205              		.loc 1 448 24 is_stmt 0 view .LVU44
 206 00f4 4FEAEB74 		asr	r4, fp, #31
 207 00f8 2D4D     		ldr	r5, .L12+12
 208 00fa 0026     		movs	r6, #0
 209 00fc ABFB0501 		umull	r0, r1, fp, r5
 448:Core/Src/main.c **** 
 210              		.loc 1 448 38 view .LVU45
 211 0100 5246     		mov	r2, r10
 212 0102 4FEAEA73 		asr	r3, r10, #31
 213 0106 05FB0411 		mla	r1, r5, r4, r1
 214 010a FFF7FEFF 		bl	__aeabi_ldivmod
 215              	.LVL16:
 448:Core/Src/main.c **** 
 216              		.loc 1 448 15 view .LVU46
 217 010e 294B     		ldr	r3, .L12+16
 218 0110 1B18     		adds	r3, r3, r0
 219 0112 0393     		str	r3, [sp, #12]
 220 0114 61F10003 		sbc	r3, r1, #0
 221 0118 0493     		str	r3, [sp, #16]
 222              	.LVL17:
 451:Core/Src/main.c **** 
 223              		.loc 1 451 7 is_stmt 1 view .LVU47
 451:Core/Src/main.c **** 
 224              		.loc 1 451 24 is_stmt 0 view .LVU48
 225 011a 4FEAE971 		asr	r1, r9, #31
 226 011e 4B01     		lsls	r3, r1, #5
 227              	.LVL18:
 451:Core/Src/main.c **** 
 228              		.loc 1 451 24 view .LVU49
 229 0120 43EAD963 		orr	r3, r3, r9, lsr #27
 230 0124 4FEA4910 		lsl	r0, r9, #5
 231 0128 B0EB0900 		subs	r0, r0, r9
 232 012c 63EB0104 		sbc	r4, r3, r1
 233 0130 A301     		lsls	r3, r4, #6
 234 0132 43EA9063 		orr	r3, r3, r0, lsr #26
 235 0136 8201     		lsls	r2, r0, #6
 236 0138 121A     		subs	r2, r2, r0
 237 013a 63EB0403 		sbc	r3, r3, r4
 238 013e DB00     		lsls	r3, r3, #3
 239 0140 43EA5273 		orr	r3, r3, r2, lsr #29
 240 0144 D200     		lsls	r2, r2, #3
 241 0146 12EB0904 		adds	r4, r2, r9
 242 014a 41EB0301 		adc	r1, r1, r3
 243 014e C901     		lsls	r1, r1, #7
 451:Core/Src/main.c **** 
 244              		.loc 1 451 38 view .LVU50
 245 0150 0C9B     		ldr	r3, [sp, #48]
 246 0152 1A46     		mov	r2, r3
 247 0154 DB17     		asrs	r3, r3, #31
 248 0156 E001     		lsls	r0, r4, #7
 249 0158 41EA5461 		orr	r1, r1, r4, lsr #25
 250 015c FFF7FEFF 		bl	__aeabi_ldivmod
 251              	.LVL19:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 14


 451:Core/Src/main.c **** 
 252              		.loc 1 451 15 view .LVU51
 253 0160 114B     		ldr	r3, .L12+4
 254 0162 1B18     		adds	r3, r3, r0
 255 0164 0593     		str	r3, [sp, #20]
 256 0166 61F10003 		sbc	r3, r1, #0
 257 016a 0693     		str	r3, [sp, #24]
 258              	.LVL20:
 454:Core/Src/main.c ****       int64_t yi = 0;
 259              		.loc 1 454 7 is_stmt 1 view .LVU52
 455:Core/Src/main.c ****       int iteration = 0;
 260              		.loc 1 455 7 view .LVU53
 456:Core/Src/main.c **** 
 261              		.loc 1 456 7 view .LVU54
 459:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 262              		.loc 1 459 7 view .LVU55
 455:Core/Src/main.c ****       int iteration = 0;
 263              		.loc 1 455 15 is_stmt 0 view .LVU56
 264 016c 3546     		mov	r5, r6
 265 016e B046     		mov	r8, r6
 454:Core/Src/main.c ****       int64_t yi = 0;
 266              		.loc 1 454 15 view .LVU57
 267 0170 3446     		mov	r4, r6
 268 0172 CDF82490 		str	r9, [sp, #36]
 269 0176 CDF828B0 		str	fp, [sp, #40]
 270 017a B346     		mov	fp, r6
 271              	.LVL21:
 454:Core/Src/main.c ****       int64_t yi = 0;
 272              		.loc 1 454 15 view .LVU58
 273 017c CDF82CA0 		str	r10, [sp, #44]
 459:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 274              		.loc 1 459 13 view .LVU59
 275 0180 8DE7     		b	.L3
 276              	.LVL22:
 277              	.L10:
 459:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 278              		.loc 1 459 13 view .LVU60
 279              	.LBE8:
 280              	.LBE5:
 444:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 281              		.loc 1 444 32 discriminator 2 view .LVU61
 282 0182 4F46     		mov	r7, r9
 444:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 283              		.loc 1 444 32 is_stmt 1 discriminator 2 view .LVU62
 284 0184 0137     		adds	r7, r7, #1
 285              	.LVL23:
 286              	.L2:
 444:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 287              		.loc 1 444 21 discriminator 1 view .LVU63
 288 0186 0C9B     		ldr	r3, [sp, #48]
 289 0188 9F42     		cmp	r7, r3
 290 018a 06DA     		bge	.L11
 291              	.LBB9:
 446:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 292              		.loc 1 446 14 is_stmt 0 view .LVU64
 293 018c 4FF00009 		mov	r9, #0
 294 0190 CB46     		mov	fp, r9
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 15


 295 0192 B946     		mov	r9, r7
 296 0194 DDF834A0 		ldr	r10, [sp, #52]
 297 0198 AAE7     		b	.L7
 298              	.L11:
 446:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 299              		.loc 1 446 14 view .LVU65
 300              	.LBE9:
 301              	.LBE10:
 476:Core/Src/main.c ****     }
 477:Core/Src/main.c ****   }
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** 
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****     return mandelbrot_sum;
 302              		.loc 1 481 5 is_stmt 1 view .LVU66
 482:Core/Src/main.c **** 
 483:Core/Src/main.c **** }
 303              		.loc 1 483 1 is_stmt 0 view .LVU67
 304 019a 0798     		ldr	r0, [sp, #28]
 305 019c 0899     		ldr	r1, [sp, #32]
 306 019e 0FB0     		add	sp, sp, #60
 307              	.LCFI2:
 308              		.cfi_def_cfa_offset 36
 309              		@ sp needed
 310 01a0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 311              	.LVL24:
 312              	.L13:
 313              		.loc 1 483 1 view .LVU68
 314              		.align	2
 315              	.L12:
 316 01a4 40420F00 		.word	1000000
 317 01a8 C0BDF0FF 		.word	-1000000
 318 01ac 00093D00 		.word	4000000
 319 01b0 E0673500 		.word	3500000
 320 01b4 60DAD9FF 		.word	-2500000
 321              		.cfi_endproc
 322              	.LFE137:
 324              		.section	.text.MX_GPIO_Init,"ax",%progbits
 325              		.align	1
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 330              	MX_GPIO_Init:
 331              	.LFB136:
 403:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 332              		.loc 1 403 1 is_stmt 1 view -0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 32
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 30B5     		push	{r4, r5, lr}
 337              	.LCFI3:
 338              		.cfi_def_cfa_offset 12
 339              		.cfi_offset 4, -12
 340              		.cfi_offset 5, -8
 341              		.cfi_offset 14, -4
 342 0002 89B0     		sub	sp, sp, #36
 343              	.LCFI4:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 16


 344              		.cfi_def_cfa_offset 48
 404:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 345              		.loc 1 404 3 view .LVU70
 404:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 346              		.loc 1 404 20 is_stmt 0 view .LVU71
 347 0004 0024     		movs	r4, #0
 348 0006 0394     		str	r4, [sp, #12]
 349 0008 0494     		str	r4, [sp, #16]
 350 000a 0594     		str	r4, [sp, #20]
 351 000c 0694     		str	r4, [sp, #24]
 352 000e 0794     		str	r4, [sp, #28]
 409:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 353              		.loc 1 409 3 is_stmt 1 view .LVU72
 354              	.LBB11:
 409:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 355              		.loc 1 409 3 view .LVU73
 356 0010 0194     		str	r4, [sp, #4]
 409:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 357              		.loc 1 409 3 view .LVU74
 358 0012 134B     		ldr	r3, .L16
 359 0014 1A6B     		ldr	r2, [r3, #48]
 360 0016 42F00202 		orr	r2, r2, #2
 361 001a 1A63     		str	r2, [r3, #48]
 409:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 362              		.loc 1 409 3 view .LVU75
 363 001c 1A6B     		ldr	r2, [r3, #48]
 364 001e 02F00202 		and	r2, r2, #2
 365 0022 0192     		str	r2, [sp, #4]
 409:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 366              		.loc 1 409 3 view .LVU76
 367 0024 019A     		ldr	r2, [sp, #4]
 368              	.LBE11:
 409:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 369              		.loc 1 409 3 view .LVU77
 410:Core/Src/main.c **** 
 370              		.loc 1 410 3 view .LVU78
 371              	.LBB12:
 410:Core/Src/main.c **** 
 372              		.loc 1 410 3 view .LVU79
 373 0026 0294     		str	r4, [sp, #8]
 410:Core/Src/main.c **** 
 374              		.loc 1 410 3 view .LVU80
 375 0028 1A6B     		ldr	r2, [r3, #48]
 376 002a 42F00102 		orr	r2, r2, #1
 377 002e 1A63     		str	r2, [r3, #48]
 410:Core/Src/main.c **** 
 378              		.loc 1 410 3 view .LVU81
 379 0030 1B6B     		ldr	r3, [r3, #48]
 380 0032 03F00103 		and	r3, r3, #1
 381 0036 0293     		str	r3, [sp, #8]
 410:Core/Src/main.c **** 
 382              		.loc 1 410 3 view .LVU82
 383 0038 029B     		ldr	r3, [sp, #8]
 384              	.LBE12:
 410:Core/Src/main.c **** 
 385              		.loc 1 410 3 view .LVU83
 413:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 17


 386              		.loc 1 413 3 view .LVU84
 387 003a 0A4D     		ldr	r5, .L16+4
 388 003c 2246     		mov	r2, r4
 389 003e 0321     		movs	r1, #3
 390 0040 2846     		mov	r0, r5
 391 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 392              	.LVL25:
 416:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 393              		.loc 1 416 3 view .LVU85
 416:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 394              		.loc 1 416 23 is_stmt 0 view .LVU86
 395 0046 0323     		movs	r3, #3
 396 0048 0393     		str	r3, [sp, #12]
 417:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 397              		.loc 1 417 3 is_stmt 1 view .LVU87
 417:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 398              		.loc 1 417 24 is_stmt 0 view .LVU88
 399 004a 0123     		movs	r3, #1
 400 004c 0493     		str	r3, [sp, #16]
 418:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 401              		.loc 1 418 3 is_stmt 1 view .LVU89
 418:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 402              		.loc 1 418 24 is_stmt 0 view .LVU90
 403 004e 0594     		str	r4, [sp, #20]
 419:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 404              		.loc 1 419 3 is_stmt 1 view .LVU91
 419:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 405              		.loc 1 419 25 is_stmt 0 view .LVU92
 406 0050 0694     		str	r4, [sp, #24]
 420:Core/Src/main.c **** 
 407              		.loc 1 420 3 is_stmt 1 view .LVU93
 408 0052 03A9     		add	r1, sp, #12
 409 0054 2846     		mov	r0, r5
 410 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 411              	.LVL26:
 424:Core/Src/main.c **** 
 412              		.loc 1 424 1 is_stmt 0 view .LVU94
 413 005a 09B0     		add	sp, sp, #36
 414              	.LCFI5:
 415              		.cfi_def_cfa_offset 12
 416              		@ sp needed
 417 005c 30BD     		pop	{r4, r5, pc}
 418              	.L17:
 419 005e 00BF     		.align	2
 420              	.L16:
 421 0060 00380240 		.word	1073887232
 422 0064 00040240 		.word	1073873920
 423              		.cfi_endproc
 424              	.LFE136:
 426              		.global	__aeabi_i2d
 427              		.global	__aeabi_ddiv
 428              		.global	__aeabi_dmul
 429              		.global	__aeabi_dsub
 430              		.global	__aeabi_dadd
 431              		.global	__aeabi_dcmple
 432              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 433              		.align	1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 18


 434              		.global	calculate_mandelbrot_double
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	calculate_mandelbrot_double:
 440              	.LVL27:
 441              	.LFB138:
 484:Core/Src/main.c **** 
 485:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 486:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 442              		.loc 1 486 80 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 56
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		.loc 1 486 80 is_stmt 0 view .LVU96
 447 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 448              	.LCFI6:
 449              		.cfi_def_cfa_offset 36
 450              		.cfi_offset 4, -36
 451              		.cfi_offset 5, -32
 452              		.cfi_offset 6, -28
 453              		.cfi_offset 7, -24
 454              		.cfi_offset 8, -20
 455              		.cfi_offset 9, -16
 456              		.cfi_offset 10, -12
 457              		.cfi_offset 11, -8
 458              		.cfi_offset 14, -4
 459 0004 8FB0     		sub	sp, sp, #60
 460              	.LCFI7:
 461              		.cfi_def_cfa_offset 96
 462 0006 0790     		str	r0, [sp, #28]
 463 0008 0C91     		str	r1, [sp, #48]
 464 000a 0D92     		str	r2, [sp, #52]
 487:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 465              		.loc 1 487 5 is_stmt 1 view .LVU97
 466              	.LVL28:
 488:Core/Src/main.c ****     //TODO: Complete the function implementation
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****         // Loop through each pixel (y coordinate)
 491:Core/Src/main.c ****         for (int y = 0; y < height; y++) {
 467              		.loc 1 491 9 view .LVU98
 468              	.LBB13:
 469              		.loc 1 491 14 view .LVU99
 470              		.loc 1 491 18 is_stmt 0 view .LVU100
 471 000c 4FF00008 		mov	r8, #0
 472              	.LBE13:
 487:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 473              		.loc 1 487 14 view .LVU101
 474 0010 CDF82080 		str	r8, [sp, #32]
 475 0014 CDF82480 		str	r8, [sp, #36]
 476              	.LBB19:
 477              		.loc 1 491 9 view .LVU102
 478 0018 8DE0     		b	.L19
 479              	.LVL29:
 480              	.L22:
 481              	.LBB14:
 482              	.LBB15:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 19


 483              	.LBB16:
 492:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 493:Core/Src/main.c ****             for (int x = 0; x < width; x++) {
 494:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 495:Core/Src/main.c ****                 double x0 = ((double)x / width) * 3.5 - 2.5;
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****                 // Calculate y0 = (y / height) * 2.0 - 1.0
 498:Core/Src/main.c ****                 double y0 = ((double)y / height) * 2.0 - 1.0;
 499:Core/Src/main.c **** 
 500:Core/Src/main.c ****                 // Initialize iteration variables
 501:Core/Src/main.c ****                 double xi = 0.0;
 502:Core/Src/main.c ****                 double yi = 0.0;
 503:Core/Src/main.c ****                 int iteration = 0;
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****                 // Main iteration loop
 506:Core/Src/main.c ****                 while (iteration < max_iterations &&
 507:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****                     // temp = xi^2 - yi^2
 510:Core/Src/main.c ****                     double temp = xi * xi - yi * yi;
 484              		.loc 1 510 21 is_stmt 1 view .LVU103
 485              		.loc 1 510 28 is_stmt 0 view .LVU104
 486 001a 5246     		mov	r2, r10
 487 001c 5B46     		mov	r3, fp
 488 001e DDE90001 		ldrd	r0, [sp]
 489 0022 FFF7FEFF 		bl	__aeabi_dsub
 490              	.LVL30:
 491 0026 8246     		mov	r10, r0
 492 0028 8B46     		mov	fp, r1
 493              	.LVL31:
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****                     // yi = 2 * xi * yi + y0
 513:Core/Src/main.c ****                     yi = 2.0 * xi * yi + y0;
 494              		.loc 1 513 21 is_stmt 1 view .LVU105
 495              		.loc 1 513 30 is_stmt 0 view .LVU106
 496 002a 2246     		mov	r2, r4
 497 002c 2B46     		mov	r3, r5
 498 002e 2046     		mov	r0, r4
 499 0030 2946     		mov	r1, r5
 500 0032 FFF7FEFF 		bl	__aeabi_dadd
 501              	.LVL32:
 502              		.loc 1 513 35 view .LVU107
 503 0036 3246     		mov	r2, r6
 504 0038 3B46     		mov	r3, r7
 505 003a FFF7FEFF 		bl	__aeabi_dmul
 506              	.LVL33:
 507              		.loc 1 513 24 view .LVU108
 508 003e DDE90423 		ldrd	r2, [sp, #16]
 509 0042 FFF7FEFF 		bl	__aeabi_dadd
 510              	.LVL34:
 511 0046 0646     		mov	r6, r0
 512              	.LVL35:
 513              		.loc 1 513 24 view .LVU109
 514 0048 0F46     		mov	r7, r1
 515              	.LVL36:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****                     // xi = temp + x0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 20


 516:Core/Src/main.c ****                     xi = temp + x0;
 516              		.loc 1 516 21 is_stmt 1 view .LVU110
 517              		.loc 1 516 24 is_stmt 0 view .LVU111
 518 004a 5246     		mov	r2, r10
 519 004c 5B46     		mov	r3, fp
 520 004e DDE90201 		ldrd	r0, [sp, #8]
 521 0052 FFF7FEFF 		bl	__aeabi_dadd
 522              	.LVL37:
 523 0056 0446     		mov	r4, r0
 524              	.LVL38:
 525              		.loc 1 516 24 view .LVU112
 526 0058 0D46     		mov	r5, r1
 527              	.LVL39:
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****                     iteration++;
 528              		.loc 1 518 21 is_stmt 1 view .LVU113
 529              		.loc 1 518 30 is_stmt 0 view .LVU114
 530 005a 08F10108 		add	r8, r8, #1
 531              	.LVL40:
 532              	.L20:
 533              		.loc 1 518 30 view .LVU115
 534              	.LBE16:
 506:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 535              		.loc 1 506 51 is_stmt 1 view .LVU116
 536 005e C845     		cmp	r8, r9
 537 0060 1BDA     		bge	.L21
 507:Core/Src/main.c **** 
 538              		.loc 1 507 29 is_stmt 0 view .LVU117
 539 0062 2246     		mov	r2, r4
 540 0064 2B46     		mov	r3, r5
 541 0066 2046     		mov	r0, r4
 542 0068 2946     		mov	r1, r5
 543 006a FFF7FEFF 		bl	__aeabi_dmul
 544              	.LVL41:
 545 006e CDE90001 		strd	r0, [sp]
 507:Core/Src/main.c **** 
 546              		.loc 1 507 39 view .LVU118
 547 0072 3246     		mov	r2, r6
 548 0074 3B46     		mov	r3, r7
 549 0076 3046     		mov	r0, r6
 550 0078 3946     		mov	r1, r7
 551 007a FFF7FEFF 		bl	__aeabi_dmul
 552              	.LVL42:
 553 007e 8246     		mov	r10, r0
 554 0080 8B46     		mov	fp, r1
 507:Core/Src/main.c **** 
 555              		.loc 1 507 34 view .LVU119
 556 0082 0246     		mov	r2, r0
 557 0084 0B46     		mov	r3, r1
 558 0086 DDE90001 		ldrd	r0, [sp]
 559 008a FFF7FEFF 		bl	__aeabi_dadd
 560              	.LVL43:
 506:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 561              		.loc 1 506 51 discriminator 1 view .LVU120
 562 008e 0022     		movs	r2, #0
 563 0090 314B     		ldr	r3, .L29
 564 0092 FFF7FEFF 		bl	__aeabi_dcmple
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 21


 565              	.LVL44:
 566 0096 0028     		cmp	r0, #0
 567 0098 BFD1     		bne	.L22
 568              	.L21:
 519:Core/Src/main.c ****                 }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****                 // Add iteration count to checksum
 522:Core/Src/main.c ****                 mandelbrot_sum += iteration;
 569              		.loc 1 522 32 view .LVU121
 570 009a DDF82890 		ldr	r9, [sp, #40]
 571              		.loc 1 522 17 is_stmt 1 view .LVU122
 572              		.loc 1 522 32 is_stmt 0 view .LVU123
 573 009e 089B     		ldr	r3, [sp, #32]
 574 00a0 18EB0302 		adds	r2, r8, r3
 575 00a4 0892     		str	r2, [sp, #32]
 576              	.LVL45:
 577              		.loc 1 522 32 view .LVU124
 578 00a6 099B     		ldr	r3, [sp, #36]
 579 00a8 43EBE873 		adc	r3, r3, r8, asr #31
 580 00ac 0993     		str	r3, [sp, #36]
 581              	.LVL46:
 582              		.loc 1 522 32 view .LVU125
 583              	.LBE15:
 493:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 584              		.loc 1 493 41 is_stmt 1 discriminator 2 view .LVU126
 585 00ae 09F10109 		add	r9, r9, #1
 586              	.LVL47:
 587              	.L24:
 493:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 588              		.loc 1 493 31 discriminator 1 view .LVU127
 589 00b2 079B     		ldr	r3, [sp, #28]
 590 00b4 9945     		cmp	r9, r3
 591 00b6 3ADA     		bge	.L27
 592              	.LBB17:
 495:Core/Src/main.c **** 
 593              		.loc 1 495 17 view .LVU128
 495:Core/Src/main.c **** 
 594              		.loc 1 495 30 is_stmt 0 view .LVU129
 595 00b8 4846     		mov	r0, r9
 596 00ba FFF7FEFF 		bl	__aeabi_i2d
 597              	.LVL48:
 598 00be 0446     		mov	r4, r0
 599 00c0 0D46     		mov	r5, r1
 495:Core/Src/main.c **** 
 600              		.loc 1 495 40 view .LVU130
 601 00c2 0798     		ldr	r0, [sp, #28]
 602 00c4 FFF7FEFF 		bl	__aeabi_i2d
 603              	.LVL49:
 604 00c8 0246     		mov	r2, r0
 605 00ca 0B46     		mov	r3, r1
 606 00cc 2046     		mov	r0, r4
 607 00ce 2946     		mov	r1, r5
 608 00d0 FFF7FEFF 		bl	__aeabi_ddiv
 609              	.LVL50:
 495:Core/Src/main.c **** 
 610              		.loc 1 495 49 view .LVU131
 611 00d4 0022     		movs	r2, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 22


 612 00d6 214B     		ldr	r3, .L29+4
 613 00d8 FFF7FEFF 		bl	__aeabi_dmul
 614              	.LVL51:
 495:Core/Src/main.c **** 
 615              		.loc 1 495 24 view .LVU132
 616 00dc 0022     		movs	r2, #0
 617 00de 204B     		ldr	r3, .L29+8
 618 00e0 FFF7FEFF 		bl	__aeabi_dsub
 619              	.LVL52:
 620 00e4 CDE90201 		strd	r0, [sp, #8]
 621              	.LVL53:
 498:Core/Src/main.c **** 
 622              		.loc 1 498 17 is_stmt 1 view .LVU133
 498:Core/Src/main.c **** 
 623              		.loc 1 498 30 is_stmt 0 view .LVU134
 624 00e8 0B98     		ldr	r0, [sp, #44]
 625              	.LVL54:
 498:Core/Src/main.c **** 
 626              		.loc 1 498 30 view .LVU135
 627 00ea FFF7FEFF 		bl	__aeabi_i2d
 628              	.LVL55:
 629 00ee 0446     		mov	r4, r0
 630 00f0 0D46     		mov	r5, r1
 498:Core/Src/main.c **** 
 631              		.loc 1 498 40 view .LVU136
 632 00f2 0C98     		ldr	r0, [sp, #48]
 633 00f4 FFF7FEFF 		bl	__aeabi_i2d
 634              	.LVL56:
 635 00f8 0246     		mov	r2, r0
 636 00fa 0B46     		mov	r3, r1
 637 00fc 2046     		mov	r0, r4
 638 00fe 2946     		mov	r1, r5
 639 0100 FFF7FEFF 		bl	__aeabi_ddiv
 640              	.LVL57:
 641 0104 0246     		mov	r2, r0
 642 0106 0B46     		mov	r3, r1
 498:Core/Src/main.c **** 
 643              		.loc 1 498 50 view .LVU137
 644 0108 FFF7FEFF 		bl	__aeabi_dadd
 645              	.LVL58:
 498:Core/Src/main.c **** 
 646              		.loc 1 498 24 view .LVU138
 647 010c 0022     		movs	r2, #0
 648 010e 154B     		ldr	r3, .L29+12
 649 0110 FFF7FEFF 		bl	__aeabi_dsub
 650              	.LVL59:
 651 0114 CDE90401 		strd	r0, [sp, #16]
 652              	.LVL60:
 501:Core/Src/main.c ****                 double yi = 0.0;
 653              		.loc 1 501 17 is_stmt 1 view .LVU139
 502:Core/Src/main.c ****                 int iteration = 0;
 654              		.loc 1 502 17 view .LVU140
 503:Core/Src/main.c **** 
 655              		.loc 1 503 17 view .LVU141
 506:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 656              		.loc 1 506 17 view .LVU142
 503:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 23


 657              		.loc 1 503 21 is_stmt 0 view .LVU143
 658 0118 4FF00008 		mov	r8, #0
 502:Core/Src/main.c ****                 int iteration = 0;
 659              		.loc 1 502 24 view .LVU144
 660 011c 0026     		movs	r6, #0
 661 011e 0027     		movs	r7, #0
 501:Core/Src/main.c ****                 double yi = 0.0;
 662              		.loc 1 501 24 view .LVU145
 663 0120 3446     		mov	r4, r6
 664 0122 3D46     		mov	r5, r7
 665 0124 CDF82890 		str	r9, [sp, #40]
 666 0128 DDF83490 		ldr	r9, [sp, #52]
 667              	.LVL61:
 506:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 668              		.loc 1 506 23 view .LVU146
 669 012c 97E7     		b	.L20
 670              	.LVL62:
 671              	.L27:
 506:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 672              		.loc 1 506 23 view .LVU147
 673              	.LBE17:
 674              	.LBE14:
 491:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 675              		.loc 1 491 38 discriminator 2 view .LVU148
 676 012e DDF82C80 		ldr	r8, [sp, #44]
 491:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 677              		.loc 1 491 38 is_stmt 1 discriminator 2 view .LVU149
 678 0132 08F10108 		add	r8, r8, #1
 679              	.LVL63:
 680              	.L19:
 491:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 681              		.loc 1 491 27 discriminator 1 view .LVU150
 682 0136 0C9B     		ldr	r3, [sp, #48]
 683 0138 9845     		cmp	r8, r3
 684 013a 05DA     		bge	.L28
 685              	.LBB18:
 493:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 686              		.loc 1 493 22 is_stmt 0 view .LVU151
 687 013c 4FF0000A 		mov	r10, #0
 688 0140 CDF82C80 		str	r8, [sp, #44]
 689 0144 D146     		mov	r9, r10
 690 0146 B4E7     		b	.L24
 691              	.L28:
 493:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 692              		.loc 1 493 22 view .LVU152
 693              	.LBE18:
 694              	.LBE19:
 523:Core/Src/main.c ****             }
 524:Core/Src/main.c ****         }
 525:Core/Src/main.c **** 
 526:Core/Src/main.c ****         return mandelbrot_sum;
 527:Core/Src/main.c **** }
 695              		.loc 1 527 1 view .LVU153
 696 0148 DDF82490 		ldr	r9, [sp, #36]
 526:Core/Src/main.c **** }
 697              		.loc 1 526 9 is_stmt 1 view .LVU154
 698              		.loc 1 527 1 is_stmt 0 view .LVU155
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 24


 699 014c 0898     		ldr	r0, [sp, #32]
 700 014e 4946     		mov	r1, r9
 701 0150 0FB0     		add	sp, sp, #60
 702              	.LCFI8:
 703              		.cfi_def_cfa_offset 36
 704              		@ sp needed
 705 0152 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 706              	.LVL64:
 707              	.L30:
 708              		.loc 1 527 1 view .LVU156
 709 0156 00BF     		.align	2
 710              	.L29:
 711 0158 00001040 		.word	1074790400
 712 015c 00000C40 		.word	1074528256
 713 0160 00000440 		.word	1074003968
 714 0164 0000F03F 		.word	1072693248
 715              		.cfi_endproc
 716              	.LFE138:
 718              		.section	.text.calculate_mandelbrot_float,"ax",%progbits
 719              		.align	1
 720              		.global	calculate_mandelbrot_float
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 725              	calculate_mandelbrot_float:
 726              	.LVL65:
 727              	.LFB139:
 528:Core/Src/main.c **** 
 529:Core/Src/main.c **** //TODO: Mandelbrot using variable type float
 530:Core/Src/main.c **** uint64_t calculate_mandelbrot_float(int width, int height, int max_iterations){
 728              		.loc 1 530 79 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		.loc 1 530 79 is_stmt 0 view .LVU158
 733 0000 00B5     		push	{lr}
 734              	.LCFI9:
 735              		.cfi_def_cfa_offset 4
 736              		.cfi_offset 14, -4
 737 0002 8646     		mov	lr, r0
 738 0004 03EE101A 		vmov	s6, r1	@ int
 531:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 739              		.loc 1 531 5 is_stmt 1 view .LVU159
 740              	.LVL66:
 532:Core/Src/main.c ****     //TODO: Complete the function implementation
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****         // Loop through each pixel (y coordinate)
 535:Core/Src/main.c ****         for (int y = 0; y < height; y++) {
 741              		.loc 1 535 9 view .LVU160
 742              	.LBB20:
 743              		.loc 1 535 14 view .LVU161
 744              		.loc 1 535 18 is_stmt 0 view .LVU162
 745 0008 DFED2D3A 		vldr.32	s7, .L42	@ int
 746              	.LBE20:
 531:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 747              		.loc 1 531 14 view .LVU163
 748 000c 13EE900A 		vmov	r0, s7	@ int
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 25


 749              	.LVL67:
 531:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 750              		.loc 1 531 14 view .LVU164
 751 0010 13EE901A 		vmov	r1, s7	@ int
 752              	.LVL68:
 753              	.LBB26:
 754              		.loc 1 535 9 view .LVU165
 755 0014 49E0     		b	.L32
 756              	.LVL69:
 757              	.L35:
 758              	.LBB21:
 759              	.LBB22:
 760              	.LBB23:
 536:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 537:Core/Src/main.c ****             for (int x = 0; x < width; x++) {
 538:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 539:Core/Src/main.c ****                 float x0 = ((float)x / width) * 3.5f - 2.5f;
 540:Core/Src/main.c **** 
 541:Core/Src/main.c ****                 // Calculate y0 = (y / height) * 2.0 - 1.0
 542:Core/Src/main.c ****                 float y0 = ((float)y / height) * 2.0f - 1.0f;
 543:Core/Src/main.c **** 
 544:Core/Src/main.c ****                 // Initialize iteration variables
 545:Core/Src/main.c ****                 float xi = 0.0f;
 546:Core/Src/main.c ****                 float yi = 0.0f;
 547:Core/Src/main.c ****                 int iteration = 0;
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****                 // Main iteration loop
 550:Core/Src/main.c ****                 while (iteration < max_iterations &&
 551:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0f)) {
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****                     // temp = xi^2 - yi^2
 554:Core/Src/main.c ****                     float temp = xi * xi - yi * yi;
 761              		.loc 1 554 21 is_stmt 1 view .LVU166
 762              		.loc 1 554 27 is_stmt 0 view .LVU167
 763 0016 76EEC66A 		vsub.f32	s13, s13, s12
 764              	.LVL70:
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****                     // yi = 2 * xi * yi + y0
 557:Core/Src/main.c ****                     yi = 2.0f * xi * yi + y0;
 765              		.loc 1 557 21 is_stmt 1 view .LVU168
 766              		.loc 1 557 31 is_stmt 0 view .LVU169
 767 001a 77EEA77A 		vadd.f32	s15, s15, s15
 768              	.LVL71:
 769              		.loc 1 557 36 view .LVU170
 770 001e 27EE877A 		vmul.f32	s14, s15, s14
 771              	.LVL72:
 772              		.loc 1 557 24 view .LVU171
 773 0022 37EE247A 		vadd.f32	s14, s14, s9
 774              	.LVL73:
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****                     // xi = temp + x0
 560:Core/Src/main.c ****                     xi = temp + x0;
 775              		.loc 1 560 21 is_stmt 1 view .LVU172
 776              		.loc 1 560 24 is_stmt 0 view .LVU173
 777 0026 74EE267A 		vadd.f32	s15, s8, s13
 778              	.LVL74:
 561:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 26


 562:Core/Src/main.c ****                     iteration++;
 779              		.loc 1 562 21 is_stmt 1 view .LVU174
 780              		.loc 1 562 30 is_stmt 0 view .LVU175
 781 002a 0133     		adds	r3, r3, #1
 782              	.LVL75:
 783              	.L33:
 784              		.loc 1 562 30 view .LVU176
 785              	.LBE23:
 550:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0f)) {
 786              		.loc 1 550 51 is_stmt 1 view .LVU177
 787 002c 9342     		cmp	r3, r2
 788 002e 0CDA     		bge	.L34
 551:Core/Src/main.c **** 
 789              		.loc 1 551 29 is_stmt 0 view .LVU178
 790 0030 67EEA76A 		vmul.f32	s13, s15, s15
 551:Core/Src/main.c **** 
 791              		.loc 1 551 39 view .LVU179
 792 0034 27EE076A 		vmul.f32	s12, s14, s14
 551:Core/Src/main.c **** 
 793              		.loc 1 551 34 view .LVU180
 794 0038 36EE865A 		vadd.f32	s10, s13, s12
 550:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0f)) {
 795              		.loc 1 550 51 discriminator 1 view .LVU181
 796 003c F1EE005A 		vmov.f32	s11, #4.0e+0
 797 0040 B4EEE55A 		vcmpe.f32	s10, s11
 798 0044 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 799 0048 E5D9     		bls	.L35
 800              	.L34:
 563:Core/Src/main.c ****                 }
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****                 // Add iteration count to checksum
 566:Core/Src/main.c ****                 mandelbrot_sum += iteration;
 801              		.loc 1 566 17 is_stmt 1 view .LVU182
 802              		.loc 1 566 32 is_stmt 0 view .LVU183
 803 004a 1818     		adds	r0, r3, r0
 804              	.LVL76:
 805              		.loc 1 566 32 view .LVU184
 806 004c 41EBE371 		adc	r1, r1, r3, asr #31
 807              	.LVL77:
 808              		.loc 1 566 32 view .LVU185
 809              	.LBE22:
 537:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 810              		.loc 1 537 41 is_stmt 1 discriminator 2 view .LVU186
 811 0050 0CF1010C 		add	ip, ip, #1
 812              	.LVL78:
 813              	.L37:
 537:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 814              		.loc 1 537 31 discriminator 1 view .LVU187
 815 0054 F445     		cmp	ip, lr
 816 0056 23DA     		bge	.L40
 817              	.LBB24:
 539:Core/Src/main.c **** 
 818              		.loc 1 539 17 view .LVU188
 539:Core/Src/main.c **** 
 819              		.loc 1 539 29 is_stmt 0 view .LVU189
 820 0058 07EE90CA 		vmov	s15, ip	@ int
 821 005c F8EEE77A 		vcvt.f32.s32	s15, s15
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 27


 539:Core/Src/main.c **** 
 822              		.loc 1 539 38 view .LVU190
 823 0060 07EE10EA 		vmov	s14, lr	@ int
 824 0064 B8EEC77A 		vcvt.f32.s32	s14, s14
 825 0068 87EE874A 		vdiv.f32	s8, s15, s14
 539:Core/Src/main.c **** 
 826              		.loc 1 539 47 view .LVU191
 827 006c F0EE0C7A 		vmov.f32	s15, #3.5e+0
 828 0070 24EE274A 		vmul.f32	s8, s8, s15
 539:Core/Src/main.c **** 
 829              		.loc 1 539 23 view .LVU192
 830 0074 F0EE047A 		vmov.f32	s15, #2.5e+0
 831 0078 34EE674A 		vsub.f32	s8, s8, s15
 832              	.LVL79:
 542:Core/Src/main.c **** 
 833              		.loc 1 542 17 is_stmt 1 view .LVU193
 542:Core/Src/main.c **** 
 834              		.loc 1 542 29 is_stmt 0 view .LVU194
 835 007c F8EEE37A 		vcvt.f32.s32	s15, s7
 542:Core/Src/main.c **** 
 836              		.loc 1 542 38 view .LVU195
 837 0080 B8EEC37A 		vcvt.f32.s32	s14, s6
 838 0084 C7EE874A 		vdiv.f32	s9, s15, s14
 542:Core/Src/main.c **** 
 839              		.loc 1 542 48 view .LVU196
 840 0088 74EEA44A 		vadd.f32	s9, s9, s9
 542:Core/Src/main.c **** 
 841              		.loc 1 542 23 view .LVU197
 842 008c F7EE007A 		vmov.f32	s15, #1.0e+0
 843 0090 74EEE74A 		vsub.f32	s9, s9, s15
 844              	.LVL80:
 545:Core/Src/main.c ****                 float yi = 0.0f;
 845              		.loc 1 545 17 is_stmt 1 view .LVU198
 546:Core/Src/main.c ****                 int iteration = 0;
 846              		.loc 1 546 17 view .LVU199
 547:Core/Src/main.c **** 
 847              		.loc 1 547 17 view .LVU200
 550:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0f)) {
 848              		.loc 1 550 17 view .LVU201
 547:Core/Src/main.c **** 
 849              		.loc 1 547 21 is_stmt 0 view .LVU202
 850 0094 0023     		movs	r3, #0
 546:Core/Src/main.c ****                 int iteration = 0;
 851              		.loc 1 546 23 view .LVU203
 852 0096 9FED0B7A 		vldr.32	s14, .L42+4
 545:Core/Src/main.c ****                 float yi = 0.0f;
 853              		.loc 1 545 23 view .LVU204
 854 009a F0EE477A 		vmov.f32	s15, s14
 550:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0f)) {
 855              		.loc 1 550 23 view .LVU205
 856 009e C5E7     		b	.L33
 857              	.LVL81:
 858              	.L40:
 550:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0f)) {
 859              		.loc 1 550 23 view .LVU206
 860              	.LBE24:
 861              	.LBE21:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 28


 535:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 862              		.loc 1 535 38 is_stmt 1 discriminator 2 view .LVU207
 863 00a0 13EE903A 		vmov	r3, s7	@ int
 864 00a4 0133     		adds	r3, r3, #1
 865 00a6 03EE903A 		vmov	s7, r3	@ int
 866              	.LVL82:
 867              	.L32:
 535:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 868              		.loc 1 535 27 discriminator 1 view .LVU208
 869 00aa 13EE903A 		vmov	r3, s7	@ int
 870 00ae 13EE10CA 		vmov	ip, s6	@ int
 871 00b2 6345     		cmp	r3, ip
 872 00b4 02DA     		bge	.L41
 873              	.LVL83:
 874              	.LBB25:
 537:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 875              		.loc 1 537 22 is_stmt 0 view .LVU209
 876 00b6 4FF0000C 		mov	ip, #0
 877              	.LVL84:
 537:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 878              		.loc 1 537 22 view .LVU210
 879 00ba CBE7     		b	.L37
 880              	.LVL85:
 881              	.L41:
 537:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 882              		.loc 1 537 22 view .LVU211
 883              	.LBE25:
 884              	.LBE26:
 567:Core/Src/main.c ****             }
 568:Core/Src/main.c ****         }
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****         return mandelbrot_sum;
 885              		.loc 1 570 9 is_stmt 1 view .LVU212
 571:Core/Src/main.c **** }
 886              		.loc 1 571 1 is_stmt 0 view .LVU213
 887 00bc 5DF804FB 		ldr	pc, [sp], #4
 888              	.L43:
 889              		.align	2
 890              	.L42:
 891 00c0 00000000 		.word	0
 892 00c4 00000000 		.word	0
 893              		.cfi_endproc
 894              	.LFE139:
 896              		.section	.text.MX_DWT_Init,"ax",%progbits
 897              		.align	1
 898              		.global	MX_DWT_Init
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 903              	MX_DWT_Init:
 904              	.LFB140:
 572:Core/Src/main.c **** 
 573:Core/Src/main.c **** // DWT Initialization Function
 574:Core/Src/main.c **** void MX_DWT_Init(void) {
 905              		.loc 1 574 24 is_stmt 1 view -0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 29


 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              		@ link register save eliminated.
 575:Core/Src/main.c ****     // Enable DWT counter
 576:Core/Src/main.c ****     CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 910              		.loc 1 576 5 view .LVU215
 911              		.loc 1 576 14 is_stmt 0 view .LVU216
 912 0000 074A     		ldr	r2, .L45
 913 0002 D2F8FC30 		ldr	r3, [r2, #252]
 914              		.loc 1 576 22 view .LVU217
 915 0006 43F08073 		orr	r3, r3, #16777216
 916 000a C2F8FC30 		str	r3, [r2, #252]
 577:Core/Src/main.c ****     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 917              		.loc 1 577 5 is_stmt 1 view .LVU218
 918              		.loc 1 577 8 is_stmt 0 view .LVU219
 919 000e 054B     		ldr	r3, .L45+4
 920 0010 1A68     		ldr	r2, [r3]
 921              		.loc 1 577 15 view .LVU220
 922 0012 42F00102 		orr	r2, r2, #1
 923 0016 1A60     		str	r2, [r3]
 578:Core/Src/main.c ****     
 579:Core/Src/main.c ****     // Reset counter
 580:Core/Src/main.c ****     DWT->CYCCNT = 0;
 924              		.loc 1 580 5 is_stmt 1 view .LVU221
 925              		.loc 1 580 17 is_stmt 0 view .LVU222
 926 0018 0022     		movs	r2, #0
 927 001a 5A60     		str	r2, [r3, #4]
 581:Core/Src/main.c **** }
 928              		.loc 1 581 1 view .LVU223
 929 001c 7047     		bx	lr
 930              	.L46:
 931 001e 00BF     		.align	2
 932              	.L45:
 933 0020 00ED00E0 		.word	-536810240
 934 0024 001000E0 		.word	-536866816
 935              		.cfi_endproc
 936              	.LFE140:
 938              		.section	.text.calculate_single_pixel_mandelbrot_fixed,"ax",%progbits
 939              		.align	1
 940              		.global	calculate_single_pixel_mandelbrot_fixed
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 945              	calculate_single_pixel_mandelbrot_fixed:
 946              	.LVL86:
 947              	.LFB141:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c **** // Task 4: Single pixel calculation functions
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** // Calculate Mandelbrot for a single pixel using fixed-point arithmetic
 586:Core/Src/main.c **** uint64_t calculate_single_pixel_mandelbrot_fixed(int x, int y, int width, int height, int max_iter)
 948              		.loc 1 586 101 is_stmt 1 view -0
 949              		.cfi_startproc
 950              		@ args = 4, pretend = 0, frame = 24
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		.loc 1 586 101 is_stmt 0 view .LVU225
 953 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 954              	.LCFI10:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 30


 955              		.cfi_def_cfa_offset 36
 956              		.cfi_offset 4, -36
 957              		.cfi_offset 5, -32
 958              		.cfi_offset 6, -28
 959              		.cfi_offset 7, -24
 960              		.cfi_offset 8, -20
 961              		.cfi_offset 9, -16
 962              		.cfi_offset 10, -12
 963              		.cfi_offset 11, -8
 964              		.cfi_offset 14, -4
 965 0004 87B0     		sub	sp, sp, #28
 966              	.LCFI11:
 967              		.cfi_def_cfa_offset 64
 968 0006 0E46     		mov	r6, r1
 969 0008 1D46     		mov	r5, r3
 587:Core/Src/main.c ****     // Fixed-point scaling factor (10^6 as suggested in Appendix B)
 588:Core/Src/main.c ****     const int64_t SCALE = 1000000;
 970              		.loc 1 588 5 is_stmt 1 view .LVU226
 971              	.LVL87:
 589:Core/Src/main.c ****     
 590:Core/Src/main.c ****     // Pre-calculate scaled constants
 591:Core/Src/main.c ****     int64_t scaled_3_5 = 3 * SCALE + (5 * SCALE) / 10;  // 3.5 * SCALE
 972              		.loc 1 591 5 view .LVU227
 592:Core/Src/main.c ****     int64_t scaled_2_0 = 2 * SCALE;                      // 2.0 * SCALE
 973              		.loc 1 592 5 view .LVU228
 593:Core/Src/main.c ****     int64_t scaled_2_5 = 2 * SCALE + (5 * SCALE) / 10;  // 2.5 * SCALE
 974              		.loc 1 593 5 view .LVU229
 594:Core/Src/main.c ****     int64_t scaled_1_0 = SCALE;                          // 1.0 * SCALE
 975              		.loc 1 594 5 view .LVU230
 595:Core/Src/main.c ****     int64_t scaled_4 = 4 * SCALE;                        // 4 * SCALE
 976              		.loc 1 595 5 view .LVU231
 596:Core/Src/main.c ****     int64_t scaled_2 = 2 * SCALE;                        // 2 * SCALE
 977              		.loc 1 596 5 view .LVU232
 597:Core/Src/main.c ****     
 598:Core/Src/main.c ****     // Calculate x0 = (x / width) * 3.5 - 2.5
 599:Core/Src/main.c ****     int64_t x0 = ((x * scaled_3_5) / width) - scaled_2_5;
 978              		.loc 1 599 5 view .LVU233
 979              		.loc 1 599 22 is_stmt 0 view .LVU234
 980 000a 4FEAE07C 		asr	ip, r0, #31
 981 000e 4E4C     		ldr	r4, .L52
 982 0010 4FF0000A 		mov	r10, #0
 983 0014 A0FB0401 		umull	r0, r1, r0, r4
 984              	.LVL88:
 985              		.loc 1 599 36 view .LVU235
 986 0018 D317     		asrs	r3, r2, #31
 987              	.LVL89:
 988              		.loc 1 599 36 view .LVU236
 989 001a 04FB0C11 		mla	r1, r4, ip, r1
 990 001e FFF7FEFF 		bl	__aeabi_ldivmod
 991              	.LVL90:
 992              		.loc 1 599 13 view .LVU237
 993 0022 A4F5B704 		sub	r4, r4, #5996544
 994 0026 A4F55864 		sub	r4, r4, #3456
 995 002a 2318     		adds	r3, r4, r0
 996 002c 0293     		str	r3, [sp, #8]
 997 002e 61F10003 		sbc	r3, r1, #0
 998 0032 0393     		str	r3, [sp, #12]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 31


 999              	.LVL91:
 600:Core/Src/main.c ****     
 601:Core/Src/main.c ****     // Calculate y0 = (y / height) * 2.0 - 1.0
 602:Core/Src/main.c ****     int64_t y0 = ((y * scaled_2_0) / height) - scaled_1_0;
 1000              		.loc 1 602 5 is_stmt 1 view .LVU238
 1001              		.loc 1 602 22 is_stmt 0 view .LVU239
 1002 0034 F217     		asrs	r2, r6, #31
 1003 0036 5301     		lsls	r3, r2, #5
 1004              	.LVL92:
 1005              		.loc 1 602 22 view .LVU240
 1006 0038 43EAD663 		orr	r3, r3, r6, lsr #27
 1007 003c 7101     		lsls	r1, r6, #5
 1008 003e 891B     		subs	r1, r1, r6
 1009 0040 63EB0204 		sbc	r4, r3, r2
 1010 0044 A301     		lsls	r3, r4, #6
 1011 0046 43EA9163 		orr	r3, r3, r1, lsr #26
 1012 004a 8801     		lsls	r0, r1, #6
 1013 004c 401A     		subs	r0, r0, r1
 1014 004e 63EB0403 		sbc	r3, r3, r4
 1015 0052 DB00     		lsls	r3, r3, #3
 1016 0054 43EA5073 		orr	r3, r3, r0, lsr #29
 1017 0058 C000     		lsls	r0, r0, #3
 1018 005a 8119     		adds	r1, r0, r6
 1019 005c 42EB0302 		adc	r2, r2, r3
 1020 0060 D401     		lsls	r4, r2, #7
 1021              		.loc 1 602 36 view .LVU241
 1022 0062 2A46     		mov	r2, r5
 1023 0064 EB17     		asrs	r3, r5, #31
 1024 0066 C801     		lsls	r0, r1, #7
 1025 0068 44EA5161 		orr	r1, r4, r1, lsr #25
 1026 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1027              	.LVL93:
 1028              		.loc 1 602 13 view .LVU242
 1029 0070 364B     		ldr	r3, .L52+4
 1030 0072 1B18     		adds	r3, r3, r0
 1031 0074 0493     		str	r3, [sp, #16]
 1032 0076 61F10003 		sbc	r3, r1, #0
 1033 007a 0593     		str	r3, [sp, #20]
 1034              	.LVL94:
 603:Core/Src/main.c ****     
 604:Core/Src/main.c ****     // Initialize iteration variables
 605:Core/Src/main.c ****     int64_t xi = 0;
 1035              		.loc 1 605 5 is_stmt 1 view .LVU243
 606:Core/Src/main.c ****     int64_t yi = 0;
 1036              		.loc 1 606 5 view .LVU244
 607:Core/Src/main.c ****     int iteration = 0;
 1037              		.loc 1 607 5 view .LVU245
 608:Core/Src/main.c ****     
 609:Core/Src/main.c ****     // Main iteration loop
 610:Core/Src/main.c ****     while (iteration < max_iter && ((xi * xi + yi * yi) <= scaled_4)) {
 1038              		.loc 1 610 5 view .LVU246
 607:Core/Src/main.c ****     int iteration = 0;
 1039              		.loc 1 607 9 is_stmt 0 view .LVU247
 1040 007c D346     		mov	fp, r10
 606:Core/Src/main.c ****     int iteration = 0;
 1041              		.loc 1 606 13 view .LVU248
 1042 007e 5646     		mov	r6, r10
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 32


 1043              	.LVL95:
 606:Core/Src/main.c ****     int iteration = 0;
 1044              		.loc 1 606 13 view .LVU249
 1045 0080 5446     		mov	r4, r10
 605:Core/Src/main.c ****     int64_t yi = 0;
 1046              		.loc 1 605 13 view .LVU250
 1047 0082 5546     		mov	r5, r10
 1048              	.LVL96:
 1049              		.loc 1 610 11 view .LVU251
 1050 0084 40E0     		b	.L48
 1051              	.LVL97:
 1052              	.L50:
 1053              	.LBB27:
 611:Core/Src/main.c ****         // temp = xi^2 - yi^2
 612:Core/Src/main.c ****         int64_t temp = ((xi * xi) / SCALE) - ((yi * yi) / SCALE);
 1054              		.loc 1 612 9 is_stmt 1 view .LVU252
 1055              		.loc 1 612 35 is_stmt 0 view .LVU253
 1056 0086 324A     		ldr	r2, .L52+8
 1057 0088 0023     		movs	r3, #0
 1058 008a FFF7FEFF 		bl	__aeabi_ldivmod
 1059              	.LVL98:
 1060 008e 0191     		str	r1, [sp, #4]
 1061 0090 0746     		mov	r7, r0
 1062              		.loc 1 612 57 view .LVU254
 1063 0092 2E4A     		ldr	r2, .L52+4
 1064 0094 4FF0FF33 		mov	r3, #-1
 1065 0098 4846     		mov	r0, r9
 1066 009a 4146     		mov	r1, r8
 1067 009c FFF7FEFF 		bl	__aeabi_ldivmod
 1068              	.LVL99:
 1069              		.loc 1 612 17 view .LVU255
 1070 00a0 3F18     		adds	r7, r7, r0
 1071 00a2 019B     		ldr	r3, [sp, #4]
 1072 00a4 43EB0108 		adc	r8, r3, r1
 1073              	.LVL100:
 613:Core/Src/main.c ****         
 614:Core/Src/main.c ****         // yi = 2 * xi * yi + y0
 615:Core/Src/main.c ****         yi = ((scaled_2 * xi * yi) / SCALE) + y0;
 1074              		.loc 1 615 9 is_stmt 1 view .LVU256
 1075              		.loc 1 615 30 is_stmt 0 view .LVU257
 1076 00a8 05FB04F1 		mul	r1, r5, r4
 1077 00ac 06FB0A11 		mla	r1, r6, r10, r1
 1078 00b0 A5FB0606 		umull	r0, r6, r5, r6
 1079              	.LVL101:
 1080              		.loc 1 615 30 view .LVU258
 1081 00b4 3144     		add	r1, r1, r6
 1082 00b6 4B01     		lsls	r3, r1, #5
 1083 00b8 43EAD063 		orr	r3, r3, r0, lsr #27
 1084 00bc 4201     		lsls	r2, r0, #5
 1085 00be 121A     		subs	r2, r2, r0
 1086 00c0 63EB0104 		sbc	r4, r3, r1
 1087 00c4 A301     		lsls	r3, r4, #6
 1088 00c6 43EA9263 		orr	r3, r3, r2, lsr #26
 1089 00ca 9501     		lsls	r5, r2, #6
 1090              	.LVL102:
 1091              		.loc 1 615 30 view .LVU259
 1092 00cc AD1A     		subs	r5, r5, r2
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 33


 1093 00ce 63EB0403 		sbc	r3, r3, r4
 1094 00d2 DB00     		lsls	r3, r3, #3
 1095 00d4 43EA5573 		orr	r3, r3, r5, lsr #29
 1096 00d8 ED00     		lsls	r5, r5, #3
 1097 00da 2D18     		adds	r5, r5, r0
 1098 00dc 41EB0301 		adc	r1, r1, r3
 1099 00e0 C901     		lsls	r1, r1, #7
 1100              		.loc 1 615 36 view .LVU260
 1101 00e2 1B4A     		ldr	r2, .L52+8
 1102 00e4 0023     		movs	r3, #0
 1103 00e6 E801     		lsls	r0, r5, #7
 1104 00e8 41EA5561 		orr	r1, r1, r5, lsr #25
 1105 00ec FFF7FEFF 		bl	__aeabi_ldivmod
 1106              	.LVL103:
 1107              		.loc 1 615 12 view .LVU261
 1108 00f0 049B     		ldr	r3, [sp, #16]
 1109 00f2 1E18     		adds	r6, r3, r0
 1110 00f4 059B     		ldr	r3, [sp, #20]
 1111 00f6 43EB0104 		adc	r4, r3, r1
 1112              	.LVL104:
 616:Core/Src/main.c ****         
 617:Core/Src/main.c ****         // xi = temp + x0
 618:Core/Src/main.c ****         xi = temp + x0;
 1113              		.loc 1 618 9 is_stmt 1 view .LVU262
 1114              		.loc 1 618 12 is_stmt 0 view .LVU263
 1115 00fa 029B     		ldr	r3, [sp, #8]
 1116 00fc DD19     		adds	r5, r3, r7
 1117 00fe 039B     		ldr	r3, [sp, #12]
 1118 0100 43EB080A 		adc	r10, r3, r8
 1119              	.LVL105:
 619:Core/Src/main.c ****         
 620:Core/Src/main.c ****         iteration++;
 1120              		.loc 1 620 9 is_stmt 1 view .LVU264
 1121              		.loc 1 620 18 is_stmt 0 view .LVU265
 1122 0104 0BF1010B 		add	fp, fp, #1
 1123              	.LVL106:
 1124              	.L48:
 1125              		.loc 1 620 18 view .LVU266
 1126              	.LBE27:
 610:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1127              		.loc 1 610 33 is_stmt 1 view .LVU267
 1128 0108 109B     		ldr	r3, [sp, #64]
 1129 010a 9B45     		cmp	fp, r3
 1130 010c 15DA     		bge	.L49
 610:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1131              		.loc 1 610 41 is_stmt 0 discriminator 1 view .LVU268
 1132 010e 05FB0AF3 		mul	r3, r5, r10
 1133 0112 A5FB0501 		umull	r0, r1, r5, r5
 1134 0116 01EB4301 		add	r1, r1, r3, lsl #1
 610:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1135              		.loc 1 610 51 discriminator 1 view .LVU269
 1136 011a 06FB04F3 		mul	r3, r6, r4
 1137 011e A6FB0698 		umull	r9, r8, r6, r6
 1138 0122 08EB4308 		add	r8, r8, r3, lsl #1
 610:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1139              		.loc 1 610 46 discriminator 1 view .LVU270
 1140 0126 10EB0903 		adds	r3, r0, r9
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 34


 1141 012a 41EB0802 		adc	r2, r1, r8
 610:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1142              		.loc 1 610 33 discriminator 1 view .LVU271
 1143 012e 094F     		ldr	r7, .L52+12
 1144 0130 9F42     		cmp	r7, r3
 1145 0132 4FF00003 		mov	r3, #0
 1146 0136 9341     		sbcs	r3, r3, r2
 1147 0138 A5DA     		bge	.L50
 1148              	.L49:
 621:Core/Src/main.c ****     }
 622:Core/Src/main.c ****     
 623:Core/Src/main.c ****     return (uint64_t)iteration;
 1149              		.loc 1 623 5 is_stmt 1 view .LVU272
 624:Core/Src/main.c **** }
 1150              		.loc 1 624 1 is_stmt 0 view .LVU273
 1151 013a 5846     		mov	r0, fp
 1152 013c 4FEAEB71 		asr	r1, fp, #31
 1153 0140 07B0     		add	sp, sp, #28
 1154              	.LCFI12:
 1155              		.cfi_def_cfa_offset 36
 1156              		@ sp needed
 1157 0142 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1158              	.LVL107:
 1159              	.L53:
 1160              		.loc 1 624 1 view .LVU274
 1161 0146 00BF     		.align	2
 1162              	.L52:
 1163 0148 E0673500 		.word	3500000
 1164 014c C0BDF0FF 		.word	-1000000
 1165 0150 40420F00 		.word	1000000
 1166 0154 00093D00 		.word	4000000
 1167              		.cfi_endproc
 1168              	.LFE141:
 1170              		.section	.text.calculate_single_pixel_mandelbrot_double,"ax",%progbits
 1171              		.align	1
 1172              		.global	calculate_single_pixel_mandelbrot_double
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1177              	calculate_single_pixel_mandelbrot_double:
 1178              	.LVL108:
 1179              	.LFB142:
 625:Core/Src/main.c **** 
 626:Core/Src/main.c **** // Calculate Mandelbrot for a single pixel using double arithmetic
 627:Core/Src/main.c **** uint64_t calculate_single_pixel_mandelbrot_double(int x, int y, int width, int height, int max_iter
 1180              		.loc 1 627 102 is_stmt 1 view -0
 1181              		.cfi_startproc
 1182              		@ args = 4, pretend = 0, frame = 24
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		.loc 1 627 102 is_stmt 0 view .LVU276
 1185 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1186              	.LCFI13:
 1187              		.cfi_def_cfa_offset 36
 1188              		.cfi_offset 4, -36
 1189              		.cfi_offset 5, -32
 1190              		.cfi_offset 6, -28
 1191              		.cfi_offset 7, -24
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 35


 1192              		.cfi_offset 8, -20
 1193              		.cfi_offset 9, -16
 1194              		.cfi_offset 10, -12
 1195              		.cfi_offset 11, -8
 1196              		.cfi_offset 14, -4
 1197 0004 87B0     		sub	sp, sp, #28
 1198              	.LCFI14:
 1199              		.cfi_def_cfa_offset 64
 1200 0006 0C46     		mov	r4, r1
 1201 0008 1546     		mov	r5, r2
 1202 000a 1E46     		mov	r6, r3
 628:Core/Src/main.c ****     // Calculate x0 = (x / width) * 3.5 - 2.5
 629:Core/Src/main.c ****     double x0 = ((double)x / width) * 3.5 - 2.5;
 1203              		.loc 1 629 5 is_stmt 1 view .LVU277
 1204              		.loc 1 629 18 is_stmt 0 view .LVU278
 1205 000c FFF7FEFF 		bl	__aeabi_i2d
 1206              	.LVL109:
 1207              		.loc 1 629 18 view .LVU279
 1208 0010 8046     		mov	r8, r0
 1209 0012 8946     		mov	r9, r1
 1210              		.loc 1 629 28 view .LVU280
 1211 0014 2846     		mov	r0, r5
 1212 0016 FFF7FEFF 		bl	__aeabi_i2d
 1213              	.LVL110:
 1214 001a 0246     		mov	r2, r0
 1215 001c 0B46     		mov	r3, r1
 1216 001e 4046     		mov	r0, r8
 1217 0020 4946     		mov	r1, r9
 1218 0022 FFF7FEFF 		bl	__aeabi_ddiv
 1219              	.LVL111:
 1220              		.loc 1 629 37 view .LVU281
 1221 0026 0022     		movs	r2, #0
 1222 0028 394B     		ldr	r3, .L59
 1223 002a FFF7FEFF 		bl	__aeabi_dmul
 1224              	.LVL112:
 1225              		.loc 1 629 12 view .LVU282
 1226 002e 0022     		movs	r2, #0
 1227 0030 384B     		ldr	r3, .L59+4
 1228 0032 FFF7FEFF 		bl	__aeabi_dsub
 1229              	.LVL113:
 1230 0036 CDE90201 		strd	r0, [sp, #8]
 1231              	.LVL114:
 630:Core/Src/main.c ****     
 631:Core/Src/main.c ****     // Calculate y0 = (y / height) * 2.0 - 1.0
 632:Core/Src/main.c ****     double y0 = ((double)y / height) * 2.0 - 1.0;
 1232              		.loc 1 632 5 is_stmt 1 view .LVU283
 1233              		.loc 1 632 18 is_stmt 0 view .LVU284
 1234 003a 2046     		mov	r0, r4
 1235              	.LVL115:
 1236              		.loc 1 632 18 view .LVU285
 1237 003c FFF7FEFF 		bl	__aeabi_i2d
 1238              	.LVL116:
 1239 0040 0446     		mov	r4, r0
 1240              	.LVL117:
 1241              		.loc 1 632 18 view .LVU286
 1242 0042 0D46     		mov	r5, r1
 1243              	.LVL118:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 36


 1244              		.loc 1 632 28 view .LVU287
 1245 0044 3046     		mov	r0, r6
 1246 0046 FFF7FEFF 		bl	__aeabi_i2d
 1247              	.LVL119:
 1248 004a 0246     		mov	r2, r0
 1249 004c 0B46     		mov	r3, r1
 1250 004e 2046     		mov	r0, r4
 1251 0050 2946     		mov	r1, r5
 1252 0052 FFF7FEFF 		bl	__aeabi_ddiv
 1253              	.LVL120:
 1254 0056 0246     		mov	r2, r0
 1255 0058 0B46     		mov	r3, r1
 1256              		.loc 1 632 38 view .LVU288
 1257 005a FFF7FEFF 		bl	__aeabi_dadd
 1258              	.LVL121:
 1259              		.loc 1 632 12 view .LVU289
 1260 005e 0022     		movs	r2, #0
 1261 0060 2D4B     		ldr	r3, .L59+8
 1262 0062 FFF7FEFF 		bl	__aeabi_dsub
 1263              	.LVL122:
 1264 0066 CDE90401 		strd	r0, [sp, #16]
 1265              	.LVL123:
 633:Core/Src/main.c ****     
 634:Core/Src/main.c ****     // Initialize iteration variables
 635:Core/Src/main.c ****     double xi = 0.0;
 1266              		.loc 1 635 5 is_stmt 1 view .LVU290
 636:Core/Src/main.c ****     double yi = 0.0;
 1267              		.loc 1 636 5 view .LVU291
 637:Core/Src/main.c ****     int iteration = 0;
 1268              		.loc 1 637 5 view .LVU292
 638:Core/Src/main.c ****     
 639:Core/Src/main.c ****     // Main iteration loop
 640:Core/Src/main.c ****     while (iteration < max_iter && ((xi * xi + yi * yi) <= 4.0)) {
 1269              		.loc 1 640 5 view .LVU293
 637:Core/Src/main.c ****     int iteration = 0;
 1270              		.loc 1 637 9 is_stmt 0 view .LVU294
 1271 006a 4FF0000B 		mov	fp, #0
 636:Core/Src/main.c ****     int iteration = 0;
 1272              		.loc 1 636 12 view .LVU295
 1273 006e 4FF00008 		mov	r8, #0
 1274 0072 4FF00009 		mov	r9, #0
 635:Core/Src/main.c ****     double yi = 0.0;
 1275              		.loc 1 635 12 view .LVU296
 1276 0076 4446     		mov	r4, r8
 1277 0078 4D46     		mov	r5, r9
 1278 007a DA46     		mov	r10, fp
 1279 007c DDF840B0 		ldr	fp, [sp, #64]
 1280              		.loc 1 640 11 view .LVU297
 1281 0080 21E0     		b	.L55
 1282              	.LVL124:
 1283              	.L57:
 1284              	.LBB28:
 641:Core/Src/main.c ****         // temp = xi^2 - yi^2
 642:Core/Src/main.c ****         double temp = xi * xi - yi * yi;
 1285              		.loc 1 642 9 is_stmt 1 view .LVU298
 1286              		.loc 1 642 16 is_stmt 0 view .LVU299
 1287 0082 3246     		mov	r2, r6
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 37


 1288 0084 3B46     		mov	r3, r7
 1289 0086 DDE90001 		ldrd	r0, [sp]
 1290 008a FFF7FEFF 		bl	__aeabi_dsub
 1291              	.LVL125:
 1292 008e 0646     		mov	r6, r0
 1293 0090 0F46     		mov	r7, r1
 1294              	.LVL126:
 643:Core/Src/main.c ****         
 644:Core/Src/main.c ****         // yi = 2 * xi * yi + y0
 645:Core/Src/main.c ****         yi = 2.0 * xi * yi + y0;
 1295              		.loc 1 645 9 is_stmt 1 view .LVU300
 1296              		.loc 1 645 18 is_stmt 0 view .LVU301
 1297 0092 2246     		mov	r2, r4
 1298 0094 2B46     		mov	r3, r5
 1299 0096 2046     		mov	r0, r4
 1300 0098 2946     		mov	r1, r5
 1301 009a FFF7FEFF 		bl	__aeabi_dadd
 1302              	.LVL127:
 1303              		.loc 1 645 23 view .LVU302
 1304 009e 4246     		mov	r2, r8
 1305 00a0 4B46     		mov	r3, r9
 1306 00a2 FFF7FEFF 		bl	__aeabi_dmul
 1307              	.LVL128:
 1308              		.loc 1 645 12 view .LVU303
 1309 00a6 DDE90423 		ldrd	r2, [sp, #16]
 1310 00aa FFF7FEFF 		bl	__aeabi_dadd
 1311              	.LVL129:
 1312 00ae 8046     		mov	r8, r0
 1313              	.LVL130:
 1314              		.loc 1 645 12 view .LVU304
 1315 00b0 8946     		mov	r9, r1
 1316              	.LVL131:
 646:Core/Src/main.c ****         
 647:Core/Src/main.c ****         // xi = temp + x0
 648:Core/Src/main.c ****         xi = temp + x0;
 1317              		.loc 1 648 9 is_stmt 1 view .LVU305
 1318              		.loc 1 648 12 is_stmt 0 view .LVU306
 1319 00b2 3246     		mov	r2, r6
 1320 00b4 3B46     		mov	r3, r7
 1321 00b6 DDE90201 		ldrd	r0, [sp, #8]
 1322 00ba FFF7FEFF 		bl	__aeabi_dadd
 1323              	.LVL132:
 1324 00be 0446     		mov	r4, r0
 1325              	.LVL133:
 1326              		.loc 1 648 12 view .LVU307
 1327 00c0 0D46     		mov	r5, r1
 1328              	.LVL134:
 649:Core/Src/main.c ****         
 650:Core/Src/main.c ****         iteration++;
 1329              		.loc 1 650 9 is_stmt 1 view .LVU308
 1330              		.loc 1 650 18 is_stmt 0 view .LVU309
 1331 00c2 0AF1010A 		add	r10, r10, #1
 1332              	.LVL135:
 1333              	.L55:
 1334              		.loc 1 650 18 view .LVU310
 1335              	.LBE28:
 640:Core/Src/main.c ****         // temp = xi^2 - yi^2
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 38


 1336              		.loc 1 640 33 is_stmt 1 view .LVU311
 1337 00c6 DA45     		cmp	r10, fp
 1338 00c8 1BDA     		bge	.L56
 640:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1339              		.loc 1 640 41 is_stmt 0 discriminator 1 view .LVU312
 1340 00ca 2246     		mov	r2, r4
 1341 00cc 2B46     		mov	r3, r5
 1342 00ce 2046     		mov	r0, r4
 1343 00d0 2946     		mov	r1, r5
 1344 00d2 FFF7FEFF 		bl	__aeabi_dmul
 1345              	.LVL136:
 1346 00d6 CDE90001 		strd	r0, [sp]
 640:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1347              		.loc 1 640 51 discriminator 1 view .LVU313
 1348 00da 4246     		mov	r2, r8
 1349 00dc 4B46     		mov	r3, r9
 1350 00de 4046     		mov	r0, r8
 1351 00e0 4946     		mov	r1, r9
 1352 00e2 FFF7FEFF 		bl	__aeabi_dmul
 1353              	.LVL137:
 1354 00e6 0646     		mov	r6, r0
 1355 00e8 0F46     		mov	r7, r1
 640:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1356              		.loc 1 640 46 discriminator 1 view .LVU314
 1357 00ea 0246     		mov	r2, r0
 1358 00ec 0B46     		mov	r3, r1
 1359 00ee DDE90001 		ldrd	r0, [sp]
 1360 00f2 FFF7FEFF 		bl	__aeabi_dadd
 1361              	.LVL138:
 640:Core/Src/main.c ****         // temp = xi^2 - yi^2
 1362              		.loc 1 640 33 discriminator 1 view .LVU315
 1363 00f6 0022     		movs	r2, #0
 1364 00f8 084B     		ldr	r3, .L59+12
 1365 00fa FFF7FEFF 		bl	__aeabi_dcmple
 1366              	.LVL139:
 1367 00fe 0028     		cmp	r0, #0
 1368 0100 BFD1     		bne	.L57
 1369              	.L56:
 651:Core/Src/main.c ****     }
 652:Core/Src/main.c ****     
 653:Core/Src/main.c ****     return (uint64_t)iteration;
 1370              		.loc 1 653 5 is_stmt 1 view .LVU316
 654:Core/Src/main.c **** }
 1371              		.loc 1 654 1 is_stmt 0 view .LVU317
 1372 0102 5046     		mov	r0, r10
 1373 0104 4FEAEA71 		asr	r1, r10, #31
 1374 0108 07B0     		add	sp, sp, #28
 1375              	.LCFI15:
 1376              		.cfi_def_cfa_offset 36
 1377              		@ sp needed
 1378 010a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1379              	.LVL140:
 1380              	.L60:
 1381              		.loc 1 654 1 view .LVU318
 1382 010e 00BF     		.align	2
 1383              	.L59:
 1384 0110 00000C40 		.word	1074528256
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 39


 1385 0114 00000440 		.word	1074003968
 1386 0118 0000F03F 		.word	1072693248
 1387 011c 00001040 		.word	1074790400
 1388              		.cfi_endproc
 1389              	.LFE142:
 1391              		.section	.text.reset_chunk_counters,"ax",%progbits
 1392              		.align	1
 1393              		.global	reset_chunk_counters
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1398              	reset_chunk_counters:
 1399              	.LFB143:
 655:Core/Src/main.c **** 
 656:Core/Src/main.c **** // Reset chunk processing counters
 657:Core/Src/main.c **** void reset_chunk_counters(void) {
 1400              		.loc 1 657 33 is_stmt 1 view -0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 1404              		@ link register save eliminated.
 658:Core/Src/main.c ****     total_chunks_processed = 0;
 1405              		.loc 1 658 5 view .LVU320
 1406              		.loc 1 658 28 is_stmt 0 view .LVU321
 1407 0000 0023     		movs	r3, #0
 1408 0002 034A     		ldr	r2, .L62
 1409 0004 1360     		str	r3, [r2]
 659:Core/Src/main.c ****     current_chunk_x = 0;
 1410              		.loc 1 659 5 is_stmt 1 view .LVU322
 1411              		.loc 1 659 21 is_stmt 0 view .LVU323
 1412 0006 034A     		ldr	r2, .L62+4
 1413 0008 1360     		str	r3, [r2]
 660:Core/Src/main.c ****     current_chunk_y = 0;
 1414              		.loc 1 660 5 is_stmt 1 view .LVU324
 1415              		.loc 1 660 21 is_stmt 0 view .LVU325
 1416 000a 034A     		ldr	r2, .L62+8
 1417 000c 1360     		str	r3, [r2]
 661:Core/Src/main.c **** }
 1418              		.loc 1 661 1 view .LVU326
 1419 000e 7047     		bx	lr
 1420              	.L63:
 1421              		.align	2
 1422              	.L62:
 1423 0010 00000000 		.word	total_chunks_processed
 1424 0014 00000000 		.word	current_chunk_x
 1425 0018 00000000 		.word	current_chunk_y
 1426              		.cfi_endproc
 1427              	.LFE143:
 1429              		.section	.text.calculate_mandelbrot_chunk,"ax",%progbits
 1430              		.align	1
 1431              		.global	calculate_mandelbrot_chunk
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1436              	calculate_mandelbrot_chunk:
 1437              	.LVL141:
 1438              	.LFB144:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 40


 662:Core/Src/main.c **** 
 663:Core/Src/main.c **** // Calculate Mandelbrot for a specific chunk of the full image
 664:Core/Src/main.c **** uint64_t calculate_mandelbrot_chunk(int chunk_x, int chunk_y, int chunk_width, int chunk_height,
 665:Core/Src/main.c ****                                    int full_width, int full_height, int max_iter,
 666:Core/Src/main.c ****                                    uint64_t (*mandelbrot_func)(int, int, int)) {
 1439              		.loc 1 666 80 is_stmt 1 view -0
 1440              		.cfi_startproc
 1441              		@ args = 16, pretend = 0, frame = 8
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              		.loc 1 666 80 is_stmt 0 view .LVU328
 1444 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1445              	.LCFI16:
 1446              		.cfi_def_cfa_offset 36
 1447              		.cfi_offset 4, -36
 1448              		.cfi_offset 5, -32
 1449              		.cfi_offset 6, -28
 1450              		.cfi_offset 7, -24
 1451              		.cfi_offset 8, -20
 1452              		.cfi_offset 9, -16
 1453              		.cfi_offset 10, -12
 1454              		.cfi_offset 11, -8
 1455              		.cfi_offset 14, -4
 1456 0004 85B0     		sub	sp, sp, #20
 1457              	.LCFI17:
 1458              		.cfi_def_cfa_offset 56
 1459 0006 8146     		mov	r9, r0
 1460 0008 8846     		mov	r8, r1
 1461 000a 1746     		mov	r7, r2
 1462 000c 0393     		str	r3, [sp, #12]
 1463 000e DDF844B0 		ldr	fp, [sp, #68]
 667:Core/Src/main.c ****     
 668:Core/Src/main.c ****     uint64_t chunk_checksum = 0;
 1464              		.loc 1 668 5 is_stmt 1 view .LVU329
 1465              	.LVL142:
 669:Core/Src/main.c ****     
 670:Core/Src/main.c ****     // Process each pixel in the chunk
 671:Core/Src/main.c ****     for (int local_y = 0; local_y < chunk_height; local_y++) {
 1466              		.loc 1 671 5 view .LVU330
 1467              	.LBB29:
 1468              		.loc 1 671 10 view .LVU331
 1469              		.loc 1 671 14 is_stmt 0 view .LVU332
 1470 0012 4FF0000A 		mov	r10, #0
 1471              	.LBE29:
 668:Core/Src/main.c ****     
 1472              		.loc 1 668 14 view .LVU333
 1473 0016 5446     		mov	r4, r10
 1474 0018 5646     		mov	r6, r10
 1475              	.LBB34:
 1476              		.loc 1 671 5 view .LVU334
 1477 001a 1CE0     		b	.L65
 1478              	.LVL143:
 1479              	.L66:
 1480              	.LBB30:
 1481              	.LBB31:
 672:Core/Src/main.c ****         for (int local_x = 0; local_x < chunk_width; local_x++) {
 673:Core/Src/main.c ****             
 674:Core/Src/main.c ****             // Convert local chunk coordinates to full image coordinates
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 41


 675:Core/Src/main.c ****             int global_x = chunk_x + local_x;
 676:Core/Src/main.c ****             int global_y = chunk_y + local_y;
 677:Core/Src/main.c ****             
 678:Core/Src/main.c ****             // Calculate Mandelbrot for this single pixel
 679:Core/Src/main.c ****             uint64_t pixel_checksum;
 680:Core/Src/main.c ****             if (mandelbrot_func == calculate_mandelbrot_fixed_point_arithmetic) {
 681:Core/Src/main.c ****                 pixel_checksum = calculate_single_pixel_mandelbrot_fixed(
 682:Core/Src/main.c ****                     global_x, global_y, full_width, full_height, max_iter);
 683:Core/Src/main.c ****             } else {
 684:Core/Src/main.c ****                 pixel_checksum = calculate_single_pixel_mandelbrot_double(
 1482              		.loc 1 684 17 is_stmt 1 view .LVU335
 1483              		.loc 1 684 34 is_stmt 0 view .LVU336
 1484 001c 109B     		ldr	r3, [sp, #64]
 1485 001e 0093     		str	r3, [sp]
 1486 0020 0F9B     		ldr	r3, [sp, #60]
 1487 0022 0E9A     		ldr	r2, [sp, #56]
 1488 0024 FFF7FEFF 		bl	calculate_single_pixel_mandelbrot_double
 1489              	.LVL144:
 1490              	.L67:
 685:Core/Src/main.c ****                     global_x, global_y, full_width, full_height, max_iter);
 686:Core/Src/main.c ****             }
 687:Core/Src/main.c ****             
 688:Core/Src/main.c ****             chunk_checksum += pixel_checksum;
 1491              		.loc 1 688 13 is_stmt 1 view .LVU337
 1492              		.loc 1 688 28 is_stmt 0 view .LVU338
 1493 0028 2018     		adds	r0, r4, r0
 1494              	.LVL145:
 1495              		.loc 1 688 28 view .LVU339
 1496 002a 0446     		mov	r4, r0
 1497              	.LVL146:
 1498              		.loc 1 688 28 view .LVU340
 1499 002c 41EB0606 		adc	r6, r1, r6
 1500              	.LVL147:
 1501              		.loc 1 688 28 view .LVU341
 1502              	.LBE31:
 672:Core/Src/main.c ****         for (int local_x = 0; local_x < chunk_width; local_x++) {
 1503              		.loc 1 672 61 is_stmt 1 discriminator 2 view .LVU342
 1504 0030 0135     		adds	r5, r5, #1
 1505              	.LVL148:
 1506              	.L69:
 672:Core/Src/main.c ****         for (int local_x = 0; local_x < chunk_width; local_x++) {
 1507              		.loc 1 672 39 discriminator 1 view .LVU343
 1508 0032 BD42     		cmp	r5, r7
 1509 0034 0DDA     		bge	.L72
 1510              	.LBB32:
 675:Core/Src/main.c ****             int global_y = chunk_y + local_y;
 1511              		.loc 1 675 13 view .LVU344
 675:Core/Src/main.c ****             int global_y = chunk_y + local_y;
 1512              		.loc 1 675 17 is_stmt 0 view .LVU345
 1513 0036 05EB0900 		add	r0, r5, r9
 1514              	.LVL149:
 676:Core/Src/main.c ****             
 1515              		.loc 1 676 13 is_stmt 1 view .LVU346
 676:Core/Src/main.c ****             
 1516              		.loc 1 676 17 is_stmt 0 view .LVU347
 1517 003a 0AEB0801 		add	r1, r10, r8
 1518              	.LVL150:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 42


 679:Core/Src/main.c ****             if (mandelbrot_func == calculate_mandelbrot_fixed_point_arithmetic) {
 1519              		.loc 1 679 13 is_stmt 1 view .LVU348
 680:Core/Src/main.c ****                 pixel_checksum = calculate_single_pixel_mandelbrot_fixed(
 1520              		.loc 1 680 13 view .LVU349
 680:Core/Src/main.c ****                 pixel_checksum = calculate_single_pixel_mandelbrot_fixed(
 1521              		.loc 1 680 16 is_stmt 0 view .LVU350
 1522 003e 0B4B     		ldr	r3, .L74
 1523 0040 9B45     		cmp	fp, r3
 1524 0042 EBD1     		bne	.L66
 681:Core/Src/main.c ****                     global_x, global_y, full_width, full_height, max_iter);
 1525              		.loc 1 681 17 is_stmt 1 view .LVU351
 681:Core/Src/main.c ****                     global_x, global_y, full_width, full_height, max_iter);
 1526              		.loc 1 681 34 is_stmt 0 view .LVU352
 1527 0044 109B     		ldr	r3, [sp, #64]
 1528 0046 0093     		str	r3, [sp]
 1529 0048 0F9B     		ldr	r3, [sp, #60]
 1530 004a 0E9A     		ldr	r2, [sp, #56]
 1531 004c FFF7FEFF 		bl	calculate_single_pixel_mandelbrot_fixed
 1532              	.LVL151:
 681:Core/Src/main.c ****                     global_x, global_y, full_width, full_height, max_iter);
 1533              		.loc 1 681 34 view .LVU353
 1534 0050 EAE7     		b	.L67
 1535              	.LVL152:
 1536              	.L72:
 681:Core/Src/main.c ****                     global_x, global_y, full_width, full_height, max_iter);
 1537              		.loc 1 681 34 view .LVU354
 1538              	.LBE32:
 1539              	.LBE30:
 671:Core/Src/main.c ****         for (int local_x = 0; local_x < chunk_width; local_x++) {
 1540              		.loc 1 671 58 is_stmt 1 discriminator 2 view .LVU355
 1541 0052 0AF1010A 		add	r10, r10, #1
 1542              	.LVL153:
 1543              	.L65:
 671:Core/Src/main.c ****         for (int local_x = 0; local_x < chunk_width; local_x++) {
 1544              		.loc 1 671 35 discriminator 1 view .LVU356
 1545 0056 039B     		ldr	r3, [sp, #12]
 1546 0058 9A45     		cmp	r10, r3
 1547 005a 01DA     		bge	.L73
 1548              	.LBB33:
 672:Core/Src/main.c ****             
 1549              		.loc 1 672 18 is_stmt 0 view .LVU357
 1550 005c 0025     		movs	r5, #0
 1551 005e E8E7     		b	.L69
 1552              	.L73:
 1553              	.LBE33:
 1554              	.LBE34:
 689:Core/Src/main.c ****         }
 690:Core/Src/main.c ****     }
 691:Core/Src/main.c ****     
 692:Core/Src/main.c ****     return chunk_checksum;
 1555              		.loc 1 692 5 is_stmt 1 view .LVU358
 693:Core/Src/main.c **** }
 1556              		.loc 1 693 1 is_stmt 0 view .LVU359
 1557 0060 2046     		mov	r0, r4
 1558 0062 3146     		mov	r1, r6
 1559 0064 05B0     		add	sp, sp, #20
 1560              	.LCFI18:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 43


 1561              		.cfi_def_cfa_offset 36
 1562              		@ sp needed
 1563 0066 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1564              	.LVL154:
 1565              	.L75:
 1566              		.loc 1 693 1 view .LVU360
 1567 006a 00BF     		.align	2
 1568              	.L74:
 1569 006c 00000000 		.word	calculate_mandelbrot_fixed_point_arithmetic
 1570              		.cfi_endproc
 1571              	.LFE144:
 1573              		.section	.text.process_image_in_chunks,"ax",%progbits
 1574              		.align	1
 1575              		.global	process_image_in_chunks
 1576              		.syntax unified
 1577              		.thumb
 1578              		.thumb_func
 1580              	process_image_in_chunks:
 1581              	.LVL155:
 1582              	.LFB145:
 694:Core/Src/main.c **** 
 695:Core/Src/main.c **** // Main function to process large images in chunks
 696:Core/Src/main.c **** void process_image_in_chunks(int full_width, int full_height, int max_iter, 
 697:Core/Src/main.c ****                             uint64_t (*mandelbrot_func)(int, int, int),
 698:Core/Src/main.c ****                             uint32_t *wall_clock, uint32_t *cpu_cycles, 
 699:Core/Src/main.c ****                             float *throughput, uint64_t *total_checksum) {
 1583              		.loc 1 699 74 is_stmt 1 view -0
 1584              		.cfi_startproc
 1585              		@ args = 16, pretend = 0, frame = 16
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		.loc 1 699 74 is_stmt 0 view .LVU362
 1588 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1589              	.LCFI19:
 1590              		.cfi_def_cfa_offset 36
 1591              		.cfi_offset 4, -36
 1592              		.cfi_offset 5, -32
 1593              		.cfi_offset 6, -28
 1594              		.cfi_offset 7, -24
 1595              		.cfi_offset 8, -20
 1596              		.cfi_offset 9, -16
 1597              		.cfi_offset 10, -12
 1598              		.cfi_offset 11, -8
 1599              		.cfi_offset 14, -4
 1600 0004 89B0     		sub	sp, sp, #36
 1601              	.LCFI20:
 1602              		.cfi_def_cfa_offset 72
 1603 0006 0646     		mov	r6, r0
 1604 0008 0F46     		mov	r7, r1
 1605 000a 0492     		str	r2, [sp, #16]
 1606 000c 9B46     		mov	fp, r3
 700:Core/Src/main.c ****     
 701:Core/Src/main.c ****     uint32_t start_time = HAL_GetTick();
 1607              		.loc 1 701 5 is_stmt 1 view .LVU363
 1608              		.loc 1 701 27 is_stmt 0 view .LVU364
 1609 000e FFF7FEFF 		bl	HAL_GetTick
 1610              	.LVL156:
 1611              		.loc 1 701 27 view .LVU365
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 44


 1612 0012 0690     		str	r0, [sp, #24]
 1613              	.LVL157:
 702:Core/Src/main.c ****     uint32_t dwt_start_cycles = DWT->CYCCNT;
 1614              		.loc 1 702 5 is_stmt 1 view .LVU366
 1615              		.loc 1 702 14 is_stmt 0 view .LVU367
 1616 0014 3D4B     		ldr	r3, .L94
 1617 0016 5D68     		ldr	r5, [r3, #4]
 1618              	.LVL158:
 703:Core/Src/main.c ****     uint64_t cumulative_checksum = 0;
 1619              		.loc 1 703 5 is_stmt 1 view .LVU368
 704:Core/Src/main.c ****     reset_chunk_counters();
 1620              		.loc 1 704 5 view .LVU369
 1621 0018 FFF7FEFF 		bl	reset_chunk_counters
 1622              	.LVL159:
 705:Core/Src/main.c ****     
 706:Core/Src/main.c ****     // Calculate number of chunks needed
 707:Core/Src/main.c ****     int chunks_x = (full_width + MAX_CHUNK_SIZE - 1) / MAX_CHUNK_SIZE;
 1623              		.loc 1 707 5 view .LVU370
 1624              		.loc 1 707 9 is_stmt 0 view .LVU371
 1625 001c 16F17F09 		adds	r9, r6, #127
 1626 0020 0CD4     		bmi	.L89
 1627              	.L77:
 1628 0022 4FEAE919 		asr	r9, r9, #7
 1629              	.LVL160:
 708:Core/Src/main.c ****     int chunks_y = (full_height + MAX_CHUNK_SIZE - 1) / MAX_CHUNK_SIZE;
 1630              		.loc 1 708 5 is_stmt 1 view .LVU372
 1631              		.loc 1 708 9 is_stmt 0 view .LVU373
 1632 0026 17F17F03 		adds	r3, r7, #127
 1633 002a 0AD4     		bmi	.L90
 1634              	.L78:
 1635 002c DB11     		asrs	r3, r3, #7
 1636 002e 0593     		str	r3, [sp, #20]
 1637              	.LVL161:
 709:Core/Src/main.c ****     
 710:Core/Src/main.c ****     // Process image in chunks
 711:Core/Src/main.c ****     for (int chunk_y = 0; chunk_y < chunks_y; chunk_y++) {
 1638              		.loc 1 711 5 is_stmt 1 view .LVU374
 1639              	.LBB35:
 1640              		.loc 1 711 10 view .LVU375
 1641              		.loc 1 711 14 is_stmt 0 view .LVU376
 1642 0030 4FF0000A 		mov	r10, #0
 1643              	.LBE35:
 703:Core/Src/main.c ****     reset_chunk_counters();
 1644              		.loc 1 703 14 view .LVU377
 1645 0034 5446     		mov	r4, r10
 1646 0036 D046     		mov	r8, r10
 1647 0038 0795     		str	r5, [sp, #28]
 1648              	.LBB40:
 1649              		.loc 1 711 5 view .LVU378
 1650 003a 3BE0     		b	.L79
 1651              	.LVL162:
 1652              	.L89:
 1653              		.loc 1 711 5 view .LVU379
 1654              	.LBE40:
 707:Core/Src/main.c ****     int chunks_y = (full_height + MAX_CHUNK_SIZE - 1) / MAX_CHUNK_SIZE;
 1655              		.loc 1 707 9 view .LVU380
 1656 003c 09F17F09 		add	r9, r9, #127
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 45


 1657 0040 EFE7     		b	.L77
 1658              	.LVL163:
 1659              	.L90:
 708:Core/Src/main.c ****     
 1660              		.loc 1 708 9 view .LVU381
 1661 0042 7F33     		adds	r3, r3, #127
 1662 0044 F2E7     		b	.L78
 1663              	.LVL164:
 1664              	.L85:
 1665              	.LBB41:
 1666              	.LBB36:
 1667              	.LBB37:
 712:Core/Src/main.c ****         for (int chunk_x = 0; chunk_x < chunks_x; chunk_x++) {
 713:Core/Src/main.c ****             
 714:Core/Src/main.c ****             // Calculate chunk dimensions
 715:Core/Src/main.c ****             int chunk_start_x = chunk_x * MAX_CHUNK_SIZE;
 716:Core/Src/main.c ****             int chunk_start_y = chunk_y * MAX_CHUNK_SIZE;
 717:Core/Src/main.c ****             int chunk_width = (chunk_start_x + MAX_CHUNK_SIZE > full_width) ? 
 718:Core/Src/main.c ****                              (full_width - chunk_start_x) : MAX_CHUNK_SIZE;
 1668              		.loc 1 718 59 discriminator 2 view .LVU382
 1669 0046 8022     		movs	r2, #128
 1670              	.L80:
 1671              	.LVL165:
 719:Core/Src/main.c ****             int chunk_height = (chunk_start_y + MAX_CHUNK_SIZE > full_height) ? 
 1672              		.loc 1 719 13 is_stmt 1 view .LVU383
 1673              		.loc 1 719 64 is_stmt 0 view .LVU384
 1674 0048 01F17F03 		add	r3, r1, #127
 720:Core/Src/main.c ****                               (full_height - chunk_start_y) : MAX_CHUNK_SIZE;
 1675              		.loc 1 720 61 view .LVU385
 1676 004c BB42     		cmp	r3, r7
 1677 004e 02DB     		blt	.L86
 1678              		.loc 1 720 61 discriminator 1 view .LVU386
 1679 0050 A7EB010C 		sub	ip, r7, r1
 1680 0054 01E0     		b	.L81
 1681              	.L86:
 1682              		.loc 1 720 61 discriminator 2 view .LVU387
 1683 0056 4FF0800C 		mov	ip, #128
 1684              	.L81:
 1685              	.LVL166:
 721:Core/Src/main.c ****             
 722:Core/Src/main.c ****             // Process this chunk
 723:Core/Src/main.c ****             uint64_t chunk_checksum = calculate_mandelbrot_chunk(
 1686              		.loc 1 723 13 is_stmt 1 view .LVU388
 1687              		.loc 1 723 39 is_stmt 0 view .LVU389
 1688 005a CDF80CB0 		str	fp, [sp, #12]
 1689 005e 049B     		ldr	r3, [sp, #16]
 1690 0060 0293     		str	r3, [sp, #8]
 1691 0062 0197     		str	r7, [sp, #4]
 1692 0064 0096     		str	r6, [sp]
 1693 0066 6346     		mov	r3, ip
 1694 0068 FFF7FEFF 		bl	calculate_mandelbrot_chunk
 1695              	.LVL167:
 724:Core/Src/main.c ****                 chunk_start_x, chunk_start_y, chunk_width, chunk_height,
 725:Core/Src/main.c ****                 full_width, full_height, max_iter, mandelbrot_func);
 726:Core/Src/main.c ****             
 727:Core/Src/main.c ****             // Accumulate checksum
 728:Core/Src/main.c ****             cumulative_checksum += chunk_checksum;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 46


 1696              		.loc 1 728 13 is_stmt 1 view .LVU390
 1697              		.loc 1 728 33 is_stmt 0 view .LVU391
 1698 006c 2018     		adds	r0, r4, r0
 1699              	.LVL168:
 1700              		.loc 1 728 33 view .LVU392
 1701 006e 0446     		mov	r4, r0
 1702              	.LVL169:
 1703              		.loc 1 728 33 view .LVU393
 1704 0070 48EB0108 		adc	r8, r8, r1
 1705              	.LVL170:
 729:Core/Src/main.c ****             total_chunks_processed++;
 1706              		.loc 1 729 13 is_stmt 1 view .LVU394
 1707              		.loc 1 729 35 is_stmt 0 view .LVU395
 1708 0074 264B     		ldr	r3, .L94+4
 1709 0076 1A68     		ldr	r2, [r3]
 1710 0078 0132     		adds	r2, r2, #1
 1711 007a 1A60     		str	r2, [r3]
 730:Core/Src/main.c ****             
 731:Core/Src/main.c ****             // Optional: LED indication for progress
 732:Core/Src/main.c ****             if (total_chunks_processed % 20 == 0) {
 1712              		.loc 1 732 13 is_stmt 1 view .LVU396
 1713              		.loc 1 732 40 is_stmt 0 view .LVU397
 1714 007c 254B     		ldr	r3, .L94+8
 1715 007e A3FB0213 		umull	r1, r3, r3, r2
 1716 0082 1B09     		lsrs	r3, r3, #4
 1717 0084 03EB8303 		add	r3, r3, r3, lsl #2
 1718              		.loc 1 732 16 view .LVU398
 1719 0088 B2EB830F 		cmp	r2, r3, lsl #2
 1720 008c 0BD0     		beq	.L91
 1721              	.LVL171:
 1722              	.L82:
 1723              		.loc 1 732 16 view .LVU399
 1724              	.LBE37:
 712:Core/Src/main.c ****             
 1725              		.loc 1 712 58 is_stmt 1 discriminator 2 view .LVU400
 1726 008e 0135     		adds	r5, r5, #1
 1727              	.LVL172:
 1728              	.L84:
 712:Core/Src/main.c ****             
 1729              		.loc 1 712 39 discriminator 1 view .LVU401
 1730 0090 4D45     		cmp	r5, r9
 1731 0092 0DDA     		bge	.L92
 1732              	.LBB38:
 715:Core/Src/main.c ****             int chunk_start_y = chunk_y * MAX_CHUNK_SIZE;
 1733              		.loc 1 715 13 view .LVU402
 715:Core/Src/main.c ****             int chunk_start_y = chunk_y * MAX_CHUNK_SIZE;
 1734              		.loc 1 715 17 is_stmt 0 view .LVU403
 1735 0094 E801     		lsls	r0, r5, #7
 1736              	.LVL173:
 716:Core/Src/main.c ****             int chunk_width = (chunk_start_x + MAX_CHUNK_SIZE > full_width) ? 
 1737              		.loc 1 716 13 is_stmt 1 view .LVU404
 716:Core/Src/main.c ****             int chunk_width = (chunk_start_x + MAX_CHUNK_SIZE > full_width) ? 
 1738              		.loc 1 716 17 is_stmt 0 view .LVU405
 1739 0096 4FEACA11 		lsl	r1, r10, #7
 1740              	.LVL174:
 717:Core/Src/main.c ****                              (full_width - chunk_start_x) : MAX_CHUNK_SIZE;
 1741              		.loc 1 717 13 is_stmt 1 view .LVU406
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 47


 717:Core/Src/main.c ****                              (full_width - chunk_start_x) : MAX_CHUNK_SIZE;
 1742              		.loc 1 717 63 is_stmt 0 view .LVU407
 1743 009a 00F17F03 		add	r3, r0, #127
 718:Core/Src/main.c ****             int chunk_height = (chunk_start_y + MAX_CHUNK_SIZE > full_height) ? 
 1744              		.loc 1 718 59 view .LVU408
 1745 009e B342     		cmp	r3, r6
 1746 00a0 D1DB     		blt	.L85
 718:Core/Src/main.c ****             int chunk_height = (chunk_start_y + MAX_CHUNK_SIZE > full_height) ? 
 1747              		.loc 1 718 59 discriminator 1 view .LVU409
 1748 00a2 321A     		subs	r2, r6, r0
 1749 00a4 D0E7     		b	.L80
 1750              	.LVL175:
 1751              	.L91:
 733:Core/Src/main.c ****                 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Blink LED every 20 chunks
 1752              		.loc 1 733 17 is_stmt 1 view .LVU410
 1753 00a6 0121     		movs	r1, #1
 1754 00a8 1B48     		ldr	r0, .L94+12
 1755              	.LVL176:
 1756              		.loc 1 733 17 is_stmt 0 view .LVU411
 1757 00aa FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1758              	.LVL177:
 1759 00ae EEE7     		b	.L82
 1760              	.LVL178:
 1761              	.L92:
 1762              		.loc 1 733 17 view .LVU412
 1763              	.LBE38:
 1764              	.LBE36:
 711:Core/Src/main.c ****         for (int chunk_x = 0; chunk_x < chunks_x; chunk_x++) {
 1765              		.loc 1 711 54 is_stmt 1 discriminator 2 view .LVU413
 1766 00b0 0AF1010A 		add	r10, r10, #1
 1767              	.LVL179:
 1768              	.L79:
 711:Core/Src/main.c ****         for (int chunk_x = 0; chunk_x < chunks_x; chunk_x++) {
 1769              		.loc 1 711 35 discriminator 1 view .LVU414
 1770 00b4 059B     		ldr	r3, [sp, #20]
 1771 00b6 9A45     		cmp	r10, r3
 1772 00b8 01DA     		bge	.L93
 1773              	.LBB39:
 712:Core/Src/main.c ****             
 1774              		.loc 1 712 18 is_stmt 0 view .LVU415
 1775 00ba 0025     		movs	r5, #0
 1776 00bc E8E7     		b	.L84
 1777              	.L93:
 1778              	.LBE39:
 1779              	.LBE41:
 734:Core/Src/main.c ****             }
 735:Core/Src/main.c ****         }
 736:Core/Src/main.c ****     }
 737:Core/Src/main.c ****     
 738:Core/Src/main.c ****     uint32_t end_time = HAL_GetTick();
 1780              		.loc 1 738 25 view .LVU416
 1781 00be 079D     		ldr	r5, [sp, #28]
 1782              		.loc 1 738 5 is_stmt 1 view .LVU417
 1783              		.loc 1 738 25 is_stmt 0 view .LVU418
 1784 00c0 FFF7FEFF 		bl	HAL_GetTick
 1785              	.LVL180:
 739:Core/Src/main.c ****     uint32_t dwt_end_cycles = DWT->CYCCNT;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 48


 1786              		.loc 1 739 5 is_stmt 1 view .LVU419
 1787              		.loc 1 739 14 is_stmt 0 view .LVU420
 1788 00c4 114B     		ldr	r3, .L94
 1789 00c6 5B68     		ldr	r3, [r3, #4]
 1790              	.LVL181:
 740:Core/Src/main.c ****     
 741:Core/Src/main.c ****     // Calculate results
 742:Core/Src/main.c ****     *wall_clock = end_time - start_time;
 1791              		.loc 1 742 5 is_stmt 1 view .LVU421
 1792              		.loc 1 742 28 is_stmt 0 view .LVU422
 1793 00c8 069A     		ldr	r2, [sp, #24]
 1794 00ca 801A     		subs	r0, r0, r2
 1795              	.LVL182:
 1796              		.loc 1 742 17 view .LVU423
 1797 00cc 129A     		ldr	r2, [sp, #72]
 1798 00ce 1060     		str	r0, [r2]
 743:Core/Src/main.c ****     *cpu_cycles = dwt_end_cycles - dwt_start_cycles;
 1799              		.loc 1 743 5 is_stmt 1 view .LVU424
 1800              		.loc 1 743 34 is_stmt 0 view .LVU425
 1801 00d0 5B1B     		subs	r3, r3, r5
 1802              	.LVL183:
 1803              		.loc 1 743 17 view .LVU426
 1804 00d2 139A     		ldr	r2, [sp, #76]
 1805 00d4 1360     		str	r3, [r2]
 744:Core/Src/main.c ****     *total_checksum = cumulative_checksum;
 1806              		.loc 1 744 5 is_stmt 1 view .LVU427
 1807              		.loc 1 744 21 is_stmt 0 view .LVU428
 1808 00d6 159B     		ldr	r3, [sp, #84]
 1809 00d8 1C60     		str	r4, [r3]
 1810 00da C3F80480 		str	r8, [r3, #4]
 745:Core/Src/main.c ****     *throughput = (float)(full_width * full_height) / (*wall_clock / 1000.0f);
 1811              		.loc 1 745 5 is_stmt 1 view .LVU429
 1812              		.loc 1 745 38 is_stmt 0 view .LVU430
 1813 00de 07FB06F6 		mul	r6, r7, r6
 1814              	.LVL184:
 1815              		.loc 1 745 19 view .LVU431
 1816 00e2 07EE906A 		vmov	s15, r6	@ int
 1817 00e6 F8EEE77A 		vcvt.f32.s32	s15, s15
 1818              		.loc 1 745 56 view .LVU432
 1819 00ea 129B     		ldr	r3, [sp, #72]
 1820 00ec 93ED007A 		vldr.32	s14, [r3]	@ int
 1821              		.loc 1 745 68 view .LVU433
 1822 00f0 B8EE477A 		vcvt.f32.u32	s14, s14
 1823 00f4 9FED096A 		vldr.32	s12, .L94+16
 1824 00f8 C7EE066A 		vdiv.f32	s13, s14, s12
 1825              		.loc 1 745 53 view .LVU434
 1826 00fc 87EEA67A 		vdiv.f32	s14, s15, s13
 1827              		.loc 1 745 17 view .LVU435
 1828 0100 149B     		ldr	r3, [sp, #80]
 1829 0102 83ED007A 		vstr.32	s14, [r3]
 746:Core/Src/main.c **** }
 1830              		.loc 1 746 1 view .LVU436
 1831 0106 09B0     		add	sp, sp, #36
 1832              	.LCFI21:
 1833              		.cfi_def_cfa_offset 36
 1834              		@ sp needed
 1835 0108 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 49


 1836              	.LVL185:
 1837              	.L95:
 1838              		.loc 1 746 1 view .LVU437
 1839              		.align	2
 1840              	.L94:
 1841 010c 001000E0 		.word	-536866816
 1842 0110 00000000 		.word	total_chunks_processed
 1843 0114 CDCCCCCC 		.word	-858993459
 1844 0118 00040240 		.word	1073873920
 1845 011c 00007A44 		.word	1148846080
 1846              		.cfi_endproc
 1847              	.LFE145:
 1849              		.section	.text.calculate_mandelbrot_fixed_point_with_scale,"ax",%progbits
 1850              		.align	1
 1851              		.global	calculate_mandelbrot_fixed_point_with_scale
 1852              		.syntax unified
 1853              		.thumb
 1854              		.thumb_func
 1856              	calculate_mandelbrot_fixed_point_with_scale:
 1857              	.LVL186:
 1858              	.LFB146:
 747:Core/Src/main.c **** 
 748:Core/Src/main.c **** // Task 7: Fixed-point scaling factor testing functions
 749:Core/Src/main.c **** 
 750:Core/Src/main.c **** // Calculate Mandelbrot with variable scaling factor
 751:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_with_scale(int width, int height, int max_iter, int64_t s
 1859              		.loc 1 751 139 is_stmt 1 view -0
 1860              		.cfi_startproc
 1861              		@ args = 12, pretend = 0, frame = 88
 1862              		@ frame_needed = 0, uses_anonymous_args = 0
 1863              		.loc 1 751 139 is_stmt 0 view .LVU439
 1864 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1865              	.LCFI22:
 1866              		.cfi_def_cfa_offset 36
 1867              		.cfi_offset 4, -36
 1868              		.cfi_offset 5, -32
 1869              		.cfi_offset 6, -28
 1870              		.cfi_offset 7, -24
 1871              		.cfi_offset 8, -20
 1872              		.cfi_offset 9, -16
 1873              		.cfi_offset 10, -12
 1874              		.cfi_offset 11, -8
 1875              		.cfi_offset 14, -4
 1876 0004 97B0     		sub	sp, sp, #92
 1877              	.LCFI23:
 1878              		.cfi_def_cfa_offset 128
 1879 0006 1590     		str	r0, [sp, #84]
 1880 0008 1091     		str	r1, [sp, #64]
 1881 000a 0492     		str	r2, [sp, #16]
 1882 000c DDF88080 		ldr	r8, [sp, #128]
 1883 0010 DDF884A0 		ldr	r10, [sp, #132]
 752:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 1884              		.loc 1 752 5 is_stmt 1 view .LVU440
 1885              	.LVL187:
 753:Core/Src/main.c ****     *overflow_count = 0;
 1886              		.loc 1 753 5 view .LVU441
 1887              		.loc 1 753 21 is_stmt 0 view .LVU442
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 50


 1888 0014 0021     		movs	r1, #0
 1889              	.LVL188:
 1890              		.loc 1 753 21 view .LVU443
 1891 0016 229B     		ldr	r3, [sp, #136]
 1892 0018 1960     		str	r1, [r3]
 754:Core/Src/main.c ****     
 755:Core/Src/main.c ****     // Pre-calculate scaled constants using variable scale factor
 756:Core/Src/main.c ****     int64_t scaled_3_5 = 3 * scale_factor + (5 * scale_factor) / 10;  // 3.5 * SCALE
 1893              		.loc 1 756 5 is_stmt 1 view .LVU444
 1894              		.loc 1 756 28 is_stmt 0 view .LVU445
 1895 001a 18EB0802 		adds	r2, r8, r8
 1896              	.LVL189:
 1897              		.loc 1 756 28 view .LVU446
 1898 001e 4AEB0A04 		adc	r4, r10, r10
 1899 0022 12EB0805 		adds	r5, r2, r8
 1900 0026 4AEB0404 		adc	r4, r10, r4
 1901              		.loc 1 756 64 view .LVU447
 1902 002a 4FEADA73 		lsr	r3, r10, #31
 1903 002e 13EB0803 		adds	r3, r3, r8
 1904 0032 4AF10000 		adc	r0, r10, #0
 1905              	.LVL190:
 1906              		.loc 1 756 64 view .LVU448
 1907 0036 5B08     		lsrs	r3, r3, #1
 1908 0038 43EAC073 		orr	r3, r3, r0, lsl #31
 1909              		.loc 1 756 13 view .LVU449
 1910 003c ED18     		adds	r5, r5, r3
 1911 003e 1195     		str	r5, [sp, #68]
 1912 0040 44EB6004 		adc	r4, r4, r0, asr #1
 1913 0044 1294     		str	r4, [sp, #72]
 1914              	.LVL191:
 757:Core/Src/main.c ****     int64_t scaled_2_0 = 2 * scale_factor;                            // 2.0 * SCALE
 1915              		.loc 1 757 5 is_stmt 1 view .LVU450
 758:Core/Src/main.c ****     int64_t scaled_2_5 = 2 * scale_factor + (5 * scale_factor) / 10;  // 2.5 * SCALE
 1916              		.loc 1 758 5 view .LVU451
 1917              		.loc 1 758 28 is_stmt 0 view .LVU452
 1918 0046 18EB0804 		adds	r4, r8, r8
 1919              	.LVL192:
 1920              		.loc 1 758 28 view .LVU453
 1921 004a 4AEB0A04 		adc	r4, r10, r10
 1922              		.loc 1 758 13 view .LVU454
 1923 004e 9B18     		adds	r3, r3, r2
 1924 0050 1393     		str	r3, [sp, #76]
 1925 0052 44EB6003 		adc	r3, r4, r0, asr #1
 1926 0056 1493     		str	r3, [sp, #80]
 1927              	.LVL193:
 759:Core/Src/main.c ****     int64_t scaled_1_0 = scale_factor;                                 // 1.0 * SCALE
 1928              		.loc 1 759 5 is_stmt 1 view .LVU455
 760:Core/Src/main.c ****     int64_t scaled_4 = 4 * scale_factor;                              // 4 * SCALE
 1929              		.loc 1 760 5 view .LVU456
 1930              		.loc 1 760 13 is_stmt 0 view .LVU457
 1931 0058 4FEA8A03 		lsl	r3, r10, #2
 1932              	.LVL194:
 1933              		.loc 1 760 13 view .LVU458
 1934 005c 43EA9873 		orr	r3, r3, r8, lsr #30
 1935 0060 0A93     		str	r3, [sp, #40]
 1936 0062 4FEA8803 		lsl	r3, r8, #2
 1937 0066 0993     		str	r3, [sp, #36]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 51


 1938              	.LVL195:
 761:Core/Src/main.c ****     int64_t scaled_2 = 2 * scale_factor;                              // 2 * SCALE
 1939              		.loc 1 761 5 is_stmt 1 view .LVU459
 762:Core/Src/main.c ****     
 763:Core/Src/main.c ****     // Loop through each pixel
 764:Core/Src/main.c ****     for (int y = 0; y < height; y++) {
 1940              		.loc 1 764 5 view .LVU460
 1941              	.LBB42:
 1942              		.loc 1 764 10 view .LVU461
 1943              		.loc 1 764 10 is_stmt 0 view .LVU462
 1944              	.LBE42:
 752:Core/Src/main.c ****     *overflow_count = 0;
 1945              		.loc 1 752 14 view .LVU463
 1946 0068 0C91     		str	r1, [sp, #48]
 1947 006a 0D91     		str	r1, [sp, #52]
 1948 006c D346     		mov	fp, r10
 1949 006e 8A46     		mov	r10, r1
 1950              	.LVL196:
 1951              	.LBB49:
 1952              		.loc 1 764 5 view .LVU464
 1953 0070 D9E0     		b	.L97
 1954              	.LVL197:
 1955              	.L109:
 1956              	.LBB43:
 1957              	.LBB44:
 1958              	.LBB45:
 765:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 766:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 767:Core/Src/main.c ****             int64_t x0 = ((x * scaled_3_5) / width) - scaled_2_5;
 768:Core/Src/main.c ****             
 769:Core/Src/main.c ****             // Calculate y0 = (y / height) * 2.0 - 1.0
 770:Core/Src/main.c ****             int64_t y0 = ((y * scaled_2_0) / height) - scaled_1_0;
 771:Core/Src/main.c ****             
 772:Core/Src/main.c ****             // Initialize iteration variables
 773:Core/Src/main.c ****             int64_t xi = 0;
 774:Core/Src/main.c ****             int64_t yi = 0;
 775:Core/Src/main.c ****             int iteration = 0;
 776:Core/Src/main.c ****             
 777:Core/Src/main.c ****             // Main iteration loop with overflow detection
 778:Core/Src/main.c ****             while (iteration < max_iter && ((xi * xi + yi * yi) <= scaled_4)) {
 779:Core/Src/main.c ****                 // Check for potential overflow before calculations
 780:Core/Src/main.c ****                 if (xi > 0 && xi > (INT64_MAX / scale_factor)) {
 781:Core/Src/main.c ****                     (*overflow_count)++;
 1959              		.loc 1 781 22 view .LVU465
 1960 0072 019B     		ldr	r3, [sp, #4]
 1961 0074 D046     		mov	r8, r10
 1962 0076 DDF838A0 		ldr	r10, [sp, #56]
 1963              	.LVL198:
 1964              		.loc 1 781 22 view .LVU466
 1965 007a D946     		mov	r9, fp
 1966              		.loc 1 781 21 is_stmt 1 view .LVU467
 1967              		.loc 1 781 22 is_stmt 0 view .LVU468
 1968 007c 229A     		ldr	r2, [sp, #136]
 1969 007e 1268     		ldr	r2, [r2]
 1970              		.loc 1 781 38 view .LVU469
 1971 0080 0132     		adds	r2, r2, #1
 1972 0082 2299     		ldr	r1, [sp, #136]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 52


 1973 0084 0A60     		str	r2, [r1]
 782:Core/Src/main.c ****                     break;
 1974              		.loc 1 782 21 is_stmt 1 view .LVU470
 1975 0086 83E0     		b	.L100
 1976              	.LVL199:
 1977              	.L101:
 783:Core/Src/main.c ****                 }
 784:Core/Src/main.c ****                 if (yi > 0 && yi > (INT64_MAX / scale_factor)) {
 785:Core/Src/main.c ****                     (*overflow_count)++;
 786:Core/Src/main.c ****                     break;
 787:Core/Src/main.c ****                 }
 788:Core/Src/main.c ****                 
 789:Core/Src/main.c ****                 // temp = xi^2 - yi^2
 790:Core/Src/main.c ****                 int64_t temp = ((xi * xi) / scale_factor) - ((yi * yi) / scale_factor);
 1978              		.loc 1 790 17 view .LVU471
 1979              		.loc 1 790 43 is_stmt 0 view .LVU472
 1980 0088 5246     		mov	r2, r10
 1981 008a 5B46     		mov	r3, fp
 1982 008c 0298     		ldr	r0, [sp, #8]
 1983 008e 4146     		mov	r1, r8
 1984 0090 FFF7FEFF 		bl	__aeabi_ldivmod
 1985              	.LVL200:
 1986 0094 0291     		str	r1, [sp, #8]
 1987 0096 8046     		mov	r8, r0
 1988              		.loc 1 790 72 view .LVU473
 1989 0098 5246     		mov	r2, r10
 1990 009a 5B46     		mov	r3, fp
 1991 009c 0398     		ldr	r0, [sp, #12]
 1992 009e 4946     		mov	r1, r9
 1993 00a0 FFF7FEFF 		bl	__aeabi_ldivmod
 1994              	.LVL201:
 1995              		.loc 1 790 25 view .LVU474
 1996 00a4 B8EB0008 		subs	r8, r8, r0
 1997 00a8 029B     		ldr	r3, [sp, #8]
 1998 00aa 63EB0109 		sbc	r9, r3, r1
 1999              	.LVL202:
 791:Core/Src/main.c ****                 
 792:Core/Src/main.c ****                 // yi = 2 * xi * yi + y0
 793:Core/Src/main.c ****                 yi = ((scaled_2 * xi * yi) / scale_factor) + y0;
 2000              		.loc 1 793 17 is_stmt 1 view .LVU475
 2001              		.loc 1 793 38 is_stmt 0 view .LVU476
 2002 00ae 04FB0BF3 		mul	r3, r4, fp
 2003 00b2 0AFB0733 		mla	r3, r10, r7, r3
 2004 00b6 A4FB0A02 		umull	r0, r2, r4, r10
 2005 00ba 1344     		add	r3, r3, r2
 2006 00bc 00FB06F1 		mul	r1, r0, r6
 2007 00c0 05FB0311 		mla	r1, r5, r3, r1
 2008 00c4 A0FB0505 		umull	r0, r5, r0, r5
 2009              	.LVL203:
 2010              		.loc 1 793 38 view .LVU477
 2011 00c8 2944     		add	r1, r1, r5
 2012 00ca 0018     		adds	r0, r0, r0
 2013              		.loc 1 793 44 view .LVU478
 2014 00cc 5246     		mov	r2, r10
 2015 00ce 5B46     		mov	r3, fp
 2016 00d0 4941     		adcs	r1, r1, r1
 2017 00d2 FFF7FEFF 		bl	__aeabi_ldivmod
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 53


 2018              	.LVL204:
 2019              		.loc 1 793 20 view .LVU479
 2020 00d6 079B     		ldr	r3, [sp, #28]
 2021 00d8 1D18     		adds	r5, r3, r0
 2022 00da 089B     		ldr	r3, [sp, #32]
 2023 00dc 43EB0106 		adc	r6, r3, r1
 2024              	.LVL205:
 794:Core/Src/main.c ****                 
 795:Core/Src/main.c ****                 // xi = temp + x0
 796:Core/Src/main.c ****                 xi = temp + x0;
 2025              		.loc 1 796 17 is_stmt 1 view .LVU480
 2026              		.loc 1 796 20 is_stmt 0 view .LVU481
 2027 00e0 059B     		ldr	r3, [sp, #20]
 2028 00e2 13EB0804 		adds	r4, r3, r8
 2029              	.LVL206:
 2030              		.loc 1 796 20 view .LVU482
 2031 00e6 069B     		ldr	r3, [sp, #24]
 2032 00e8 43EB0907 		adc	r7, r3, r9
 2033              	.LVL207:
 797:Core/Src/main.c ****                 
 798:Core/Src/main.c ****                 iteration++;
 2034              		.loc 1 798 17 is_stmt 1 view .LVU483
 2035              		.loc 1 798 26 is_stmt 0 view .LVU484
 2036 00ec 019B     		ldr	r3, [sp, #4]
 2037 00ee 0133     		adds	r3, r3, #1
 2038 00f0 0193     		str	r3, [sp, #4]
 2039              	.LVL208:
 2040              	.L98:
 2041              		.loc 1 798 26 view .LVU485
 2042              	.LBE45:
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2043              		.loc 1 778 41 is_stmt 1 view .LVU486
 2044 00f2 019B     		ldr	r3, [sp, #4]
 2045 00f4 049A     		ldr	r2, [sp, #16]
 2046 00f6 9342     		cmp	r3, r2
 2047 00f8 45DA     		bge	.L106
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2048              		.loc 1 778 49 is_stmt 0 discriminator 1 view .LVU487
 2049 00fa 04FB07F3 		mul	r3, r4, r7
 2050 00fe A4FB0428 		umull	r2, r8, r4, r4
 2051 0102 0292     		str	r2, [sp, #8]
 2052 0104 08EB4308 		add	r8, r8, r3, lsl #1
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2053              		.loc 1 778 59 discriminator 1 view .LVU488
 2054 0108 05FB06F3 		mul	r3, r5, r6
 2055 010c A5FB0519 		umull	r1, r9, r5, r5
 2056 0110 0391     		str	r1, [sp, #12]
 2057 0112 09EB4309 		add	r9, r9, r3, lsl #1
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2058              		.loc 1 778 54 discriminator 1 view .LVU489
 2059 0116 5218     		adds	r2, r2, r1
 2060 0118 48EB0903 		adc	r3, r8, r9
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2061              		.loc 1 778 41 discriminator 1 view .LVU490
 2062 011c 0999     		ldr	r1, [sp, #36]
 2063 011e 9142     		cmp	r1, r2
 2064 0120 0A9A     		ldr	r2, [sp, #40]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 54


 2065 0122 72EB0303 		sbcs	r3, r2, r3
 2066 0126 28DB     		blt	.L108
 2067              	.LBB46:
 780:Core/Src/main.c ****                     (*overflow_count)++;
 2068              		.loc 1 780 17 is_stmt 1 view .LVU491
 780:Core/Src/main.c ****                     (*overflow_count)++;
 2069              		.loc 1 780 20 is_stmt 0 view .LVU492
 2070 0128 012C     		cmp	r4, #1
 2071 012a 77F10003 		sbcs	r3, r7, #0
 2072 012e 0ADB     		blt	.L99
 780:Core/Src/main.c ****                     (*overflow_count)++;
 2073              		.loc 1 780 47 discriminator 1 view .LVU493
 2074 0130 5246     		mov	r2, r10
 2075 0132 5B46     		mov	r3, fp
 2076 0134 4FF0FF30 		mov	r0, #-1
 2077 0138 6FF00041 		mvn	r1, #-2147483648
 2078 013c FFF7FEFF 		bl	__aeabi_ldivmod
 2079              	.LVL209:
 780:Core/Src/main.c ****                     (*overflow_count)++;
 2080              		.loc 1 780 28 discriminator 1 view .LVU494
 2081 0140 A042     		cmp	r0, r4
 2082 0142 B941     		sbcs	r1, r1, r7
 2083 0144 95DB     		blt	.L109
 2084              	.L99:
 784:Core/Src/main.c ****                     (*overflow_count)++;
 2085              		.loc 1 784 17 is_stmt 1 view .LVU495
 784:Core/Src/main.c ****                     (*overflow_count)++;
 2086              		.loc 1 784 20 is_stmt 0 view .LVU496
 2087 0146 012D     		cmp	r5, #1
 2088 0148 76F10003 		sbcs	r3, r6, #0
 2089 014c 9CDB     		blt	.L101
 784:Core/Src/main.c ****                     (*overflow_count)++;
 2090              		.loc 1 784 47 discriminator 1 view .LVU497
 2091 014e 5246     		mov	r2, r10
 2092 0150 5B46     		mov	r3, fp
 2093 0152 4FF0FF30 		mov	r0, #-1
 2094 0156 6FF00041 		mvn	r1, #-2147483648
 2095 015a FFF7FEFF 		bl	__aeabi_ldivmod
 2096              	.LVL210:
 784:Core/Src/main.c ****                     (*overflow_count)++;
 2097              		.loc 1 784 28 discriminator 1 view .LVU498
 2098 015e A842     		cmp	r0, r5
 2099 0160 B141     		sbcs	r1, r1, r6
 2100 0162 91DA     		bge	.L101
 785:Core/Src/main.c ****                     break;
 2101              		.loc 1 785 22 view .LVU499
 2102 0164 019B     		ldr	r3, [sp, #4]
 2103 0166 D046     		mov	r8, r10
 2104 0168 DDF838A0 		ldr	r10, [sp, #56]
 2105              	.LVL211:
 785:Core/Src/main.c ****                     break;
 2106              		.loc 1 785 22 view .LVU500
 2107 016c D946     		mov	r9, fp
 785:Core/Src/main.c ****                     break;
 2108              		.loc 1 785 21 is_stmt 1 view .LVU501
 785:Core/Src/main.c ****                     break;
 2109              		.loc 1 785 22 is_stmt 0 view .LVU502
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 55


 2110 016e 229A     		ldr	r2, [sp, #136]
 2111 0170 1268     		ldr	r2, [r2]
 785:Core/Src/main.c ****                     break;
 2112              		.loc 1 785 38 view .LVU503
 2113 0172 0132     		adds	r2, r2, #1
 2114 0174 2299     		ldr	r1, [sp, #136]
 2115 0176 0A60     		str	r2, [r1]
 786:Core/Src/main.c ****                 }
 2116              		.loc 1 786 21 is_stmt 1 view .LVU504
 2117 0178 0AE0     		b	.L100
 2118              	.LVL212:
 2119              	.L108:
 786:Core/Src/main.c ****                 }
 2120              		.loc 1 786 21 is_stmt 0 view .LVU505
 2121 017a 019B     		ldr	r3, [sp, #4]
 2122 017c D046     		mov	r8, r10
 2123 017e DDF838A0 		ldr	r10, [sp, #56]
 2124              	.LVL213:
 786:Core/Src/main.c ****                 }
 2125              		.loc 1 786 21 view .LVU506
 2126 0182 D946     		mov	r9, fp
 2127              	.LBE46:
 2128 0184 04E0     		b	.L100
 2129              	.LVL214:
 2130              	.L106:
 786:Core/Src/main.c ****                 }
 2131              		.loc 1 786 21 view .LVU507
 2132 0186 019B     		ldr	r3, [sp, #4]
 2133              	.LVL215:
 786:Core/Src/main.c ****                 }
 2134              		.loc 1 786 21 view .LVU508
 2135 0188 D046     		mov	r8, r10
 2136 018a DDF838A0 		ldr	r10, [sp, #56]
 2137              	.LVL216:
 786:Core/Src/main.c ****                 }
 2138              		.loc 1 786 21 view .LVU509
 2139 018e D946     		mov	r9, fp
 2140              	.LVL217:
 2141              	.L100:
 799:Core/Src/main.c ****             }
 800:Core/Src/main.c ****             
 801:Core/Src/main.c ****             mandelbrot_sum += iteration;
 2142              		.loc 1 801 13 is_stmt 1 view .LVU510
 2143              		.loc 1 801 28 is_stmt 0 view .LVU511
 2144 0190 0C9A     		ldr	r2, [sp, #48]
 2145 0192 9A18     		adds	r2, r3, r2
 2146 0194 0C92     		str	r2, [sp, #48]
 2147              	.LVL218:
 2148              		.loc 1 801 28 view .LVU512
 2149 0196 0D9A     		ldr	r2, [sp, #52]
 2150 0198 42EBE373 		adc	r3, r2, r3, asr #31
 2151 019c 0D93     		str	r3, [sp, #52]
 2152              	.LVL219:
 2153              		.loc 1 801 28 view .LVU513
 2154              	.LBE44:
 765:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 2155              		.loc 1 765 37 is_stmt 1 discriminator 2 view .LVU514
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 56


 2156 019e 0B9B     		ldr	r3, [sp, #44]
 2157              	.LVL220:
 765:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 2158              		.loc 1 765 37 is_stmt 0 discriminator 2 view .LVU515
 2159 01a0 0133     		adds	r3, r3, #1
 2160 01a2 0B93     		str	r3, [sp, #44]
 2161              	.LVL221:
 2162              	.L104:
 765:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 2163              		.loc 1 765 27 is_stmt 1 discriminator 1 view .LVU516
 2164 01a4 0B9B     		ldr	r3, [sp, #44]
 2165 01a6 5345     		cmp	r3, r10
 2166 01a8 38DA     		bge	.L110
 2167              	.LBB47:
 767:Core/Src/main.c ****             
 2168              		.loc 1 767 13 view .LVU517
 767:Core/Src/main.c ****             
 2169              		.loc 1 767 30 is_stmt 0 view .LVU518
 2170 01aa 0B9A     		ldr	r2, [sp, #44]
 2171 01ac D317     		asrs	r3, r2, #31
 2172 01ae 1299     		ldr	r1, [sp, #72]
 2173 01b0 02FB01F1 		mul	r1, r2, r1
 2174 01b4 1198     		ldr	r0, [sp, #68]
 2175 01b6 00FB0311 		mla	r1, r0, r3, r1
 2176 01ba A2FB0004 		umull	r0, r4, r2, r0
 767:Core/Src/main.c ****             
 2177              		.loc 1 767 44 view .LVU519
 2178 01be 5246     		mov	r2, r10
 2179 01c0 4FEAEA73 		asr	r3, r10, #31
 2180 01c4 2144     		add	r1, r1, r4
 2181 01c6 FFF7FEFF 		bl	__aeabi_ldivmod
 2182              	.LVL222:
 767:Core/Src/main.c ****             
 2183              		.loc 1 767 21 view .LVU520
 2184 01ca 139B     		ldr	r3, [sp, #76]
 2185 01cc C31A     		subs	r3, r0, r3
 2186 01ce 0593     		str	r3, [sp, #20]
 2187 01d0 149B     		ldr	r3, [sp, #80]
 2188 01d2 61EB0303 		sbc	r3, r1, r3
 2189 01d6 0693     		str	r3, [sp, #24]
 2190              	.LVL223:
 770:Core/Src/main.c ****             
 2191              		.loc 1 770 13 is_stmt 1 view .LVU521
 770:Core/Src/main.c ****             
 2192              		.loc 1 770 30 is_stmt 0 view .LVU522
 2193 01d8 0F9A     		ldr	r2, [sp, #60]
 2194 01da D317     		asrs	r3, r2, #31
 2195              	.LVL224:
 770:Core/Src/main.c ****             
 2196              		.loc 1 770 30 view .LVU523
 2197 01dc 02FB09F1 		mul	r1, r2, r9
 2198 01e0 08FB0311 		mla	r1, r8, r3, r1
 2199 01e4 A2FB0803 		umull	r0, r3, r2, r8
 2200 01e8 1944     		add	r1, r1, r3
 2201 01ea 0018     		adds	r0, r0, r0
 770:Core/Src/main.c ****             
 2202              		.loc 1 770 44 view .LVU524
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 57


 2203 01ec 109B     		ldr	r3, [sp, #64]
 2204 01ee 1A46     		mov	r2, r3
 2205 01f0 4FEAE373 		asr	r3, r3, #31
 2206 01f4 4941     		adcs	r1, r1, r1
 2207 01f6 FFF7FEFF 		bl	__aeabi_ldivmod
 2208              	.LVL225:
 770:Core/Src/main.c ****             
 2209              		.loc 1 770 21 view .LVU525
 2210 01fa B0EB0803 		subs	r3, r0, r8
 2211 01fe 0793     		str	r3, [sp, #28]
 2212 0200 61EB0903 		sbc	r3, r1, r9
 2213 0204 0893     		str	r3, [sp, #32]
 2214              	.LVL226:
 773:Core/Src/main.c ****             int64_t yi = 0;
 2215              		.loc 1 773 13 is_stmt 1 view .LVU526
 774:Core/Src/main.c ****             int iteration = 0;
 2216              		.loc 1 774 13 view .LVU527
 775:Core/Src/main.c ****             
 2217              		.loc 1 775 13 view .LVU528
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2218              		.loc 1 778 13 view .LVU529
 775:Core/Src/main.c ****             
 2219              		.loc 1 775 17 is_stmt 0 view .LVU530
 2220 0206 0023     		movs	r3, #0
 2221              	.LVL227:
 774:Core/Src/main.c ****             int iteration = 0;
 2222              		.loc 1 774 21 view .LVU531
 2223 0208 1D46     		mov	r5, r3
 2224 020a 1E46     		mov	r6, r3
 773:Core/Src/main.c ****             int64_t yi = 0;
 2225              		.loc 1 773 21 view .LVU532
 2226 020c 1C46     		mov	r4, r3
 2227 020e 1F46     		mov	r7, r3
 2228 0210 0193     		str	r3, [sp, #4]
 2229 0212 CDF838A0 		str	r10, [sp, #56]
 2230 0216 C246     		mov	r10, r8
 2231 0218 CB46     		mov	fp, r9
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2232              		.loc 1 778 19 view .LVU533
 2233 021a 6AE7     		b	.L98
 2234              	.LVL228:
 2235              	.L110:
 778:Core/Src/main.c ****                 // Check for potential overflow before calculations
 2236              		.loc 1 778 19 view .LVU534
 2237              	.LBE47:
 2238              	.LBE43:
 764:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 2239              		.loc 1 764 34 discriminator 2 view .LVU535
 2240 021c DDF83CA0 		ldr	r10, [sp, #60]
 2241 0220 CB46     		mov	fp, r9
 764:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 2242              		.loc 1 764 34 is_stmt 1 discriminator 2 view .LVU536
 2243 0222 0AF1010A 		add	r10, r10, #1
 2244              	.LVL229:
 2245              	.L97:
 764:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 2246              		.loc 1 764 23 discriminator 1 view .LVU537
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 58


 2247 0226 109B     		ldr	r3, [sp, #64]
 2248 0228 9A45     		cmp	r10, r3
 2249 022a 07DA     		bge	.L111
 2250              	.LBB48:
 765:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 2251              		.loc 1 765 18 is_stmt 0 view .LVU538
 2252 022c 0023     		movs	r3, #0
 2253 022e 0B93     		str	r3, [sp, #44]
 2254 0230 CDF83CA0 		str	r10, [sp, #60]
 2255 0234 DDF854A0 		ldr	r10, [sp, #84]
 2256              	.LVL230:
 765:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 2257              		.loc 1 765 18 view .LVU539
 2258 0238 D946     		mov	r9, fp
 2259 023a B3E7     		b	.L104
 2260              	.LVL231:
 2261              	.L111:
 765:Core/Src/main.c ****             // Calculate x0 = (x / width) * 3.5 - 2.5
 2262              		.loc 1 765 18 view .LVU540
 2263              	.LBE48:
 2264              	.LBE49:
 802:Core/Src/main.c ****         }
 803:Core/Src/main.c ****     }
 804:Core/Src/main.c ****     
 805:Core/Src/main.c ****     return mandelbrot_sum;
 806:Core/Src/main.c **** }
 2265              		.loc 1 806 1 view .LVU541
 2266 023c DDF834B0 		ldr	fp, [sp, #52]
 2267              	.LVL232:
 805:Core/Src/main.c **** }
 2268              		.loc 1 805 5 is_stmt 1 view .LVU542
 2269              		.loc 1 806 1 is_stmt 0 view .LVU543
 2270 0240 0C98     		ldr	r0, [sp, #48]
 2271 0242 5946     		mov	r1, fp
 2272 0244 17B0     		add	sp, sp, #92
 2273              	.LCFI24:
 2274              		.cfi_def_cfa_offset 36
 2275              		@ sp needed
 2276 0246 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2277              		.loc 1 806 1 view .LVU544
 2278              		.cfi_endproc
 2279              	.LFE146:
 2281              		.section	.text.test_scaling_factors,"ax",%progbits
 2282              		.align	1
 2283              		.global	test_scaling_factors
 2284              		.syntax unified
 2285              		.thumb
 2286              		.thumb_func
 2288              	test_scaling_factors:
 2289              	.LFB147:
 807:Core/Src/main.c **** 
 808:Core/Src/main.c **** // Test all scaling factors
 809:Core/Src/main.c **** void test_scaling_factors(void) {
 2290              		.loc 1 809 33 is_stmt 1 view -0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 8
 2293              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 59


 2294 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2295              	.LCFI25:
 2296              		.cfi_def_cfa_offset 32
 2297              		.cfi_offset 4, -32
 2298              		.cfi_offset 5, -28
 2299              		.cfi_offset 6, -24
 2300              		.cfi_offset 7, -20
 2301              		.cfi_offset 8, -16
 2302              		.cfi_offset 9, -12
 2303              		.cfi_offset 10, -8
 2304              		.cfi_offset 14, -4
 2305 0004 2DED028B 		vpush.64	{d8}
 2306              	.LCFI26:
 2307              		.cfi_def_cfa_offset 40
 2308              		.cfi_offset 80, -40
 2309              		.cfi_offset 81, -36
 2310 0008 86B0     		sub	sp, sp, #24
 2311              	.LCFI27:
 2312              		.cfi_def_cfa_offset 64
 810:Core/Src/main.c ****     for (int scale_idx = 0; scale_idx < 3; scale_idx++) {
 2313              		.loc 1 810 5 view .LVU546
 2314              	.LBB50:
 2315              		.loc 1 810 10 view .LVU547
 2316              	.LVL233:
 2317              		.loc 1 810 14 is_stmt 0 view .LVU548
 2318 000a 4FF00009 		mov	r9, #0
 2319              		.loc 1 810 5 view .LVU549
 2320 000e 3AE0     		b	.L113
 2321              	.LVL234:
 2322              	.L115:
 2323              	.LBB51:
 2324              	.LBB52:
 2325              	.LBB53:
 811:Core/Src/main.c ****         int64_t current_scale = scaling_factors[scale_idx];
 812:Core/Src/main.c ****         
 813:Core/Src/main.c ****         for (int size_idx = 0; size_idx < 5; size_idx++) {
 814:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2326              		.loc 1 814 13 is_stmt 1 view .LVU550
 2327              		.loc 1 814 17 is_stmt 0 view .LVU551
 2328 0010 244B     		ldr	r3, .L119
 2329 0012 53F825A0 		ldr	r10, [r3, r5, lsl #2]
 2330              	.LVL235:
 815:Core/Src/main.c ****             
 816:Core/Src/main.c ****             // Convert 2D indices to 1D index
 817:Core/Src/main.c ****             int test_index = scale_idx * 5 + size_idx;
 2331              		.loc 1 817 13 is_stmt 1 view .LVU552
 2332              		.loc 1 817 40 is_stmt 0 view .LVU553
 2333 0016 09EB8904 		add	r4, r9, r9, lsl #2
 2334              		.loc 1 817 17 view .LVU554
 2335 001a 2C44     		add	r4, r4, r5
 2336              	.LVL236:
 818:Core/Src/main.c ****             task7_test_index = test_index;
 2337              		.loc 1 818 13 is_stmt 1 view .LVU555
 2338              		.loc 1 818 30 is_stmt 0 view .LVU556
 2339 001c 224B     		ldr	r3, .L119+4
 2340 001e 1C60     		str	r4, [r3]
 819:Core/Src/main.c ****             
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 60


 820:Core/Src/main.c ****             // LED indication for progress
 821:Core/Src/main.c ****             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 2341              		.loc 1 821 13 is_stmt 1 view .LVU557
 2342 0020 224F     		ldr	r7, .L119+8
 2343 0022 0122     		movs	r2, #1
 2344 0024 1146     		mov	r1, r2
 2345 0026 3846     		mov	r0, r7
 2346 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2347              	.LVL237:
 822:Core/Src/main.c ****             
 823:Core/Src/main.c ****             // Record start time
 824:Core/Src/main.c ****             uint32_t start_time = HAL_GetTick();
 2348              		.loc 1 824 13 view .LVU558
 2349              		.loc 1 824 35 is_stmt 0 view .LVU559
 2350 002c FFF7FEFF 		bl	HAL_GetTick
 2351              	.LVL238:
 2352 0030 0646     		mov	r6, r0
 2353              	.LVL239:
 825:Core/Src/main.c ****             
 826:Core/Src/main.c ****             // Test with current scaling factor
 827:Core/Src/main.c ****             uint32_t overflow_count = 0;
 2354              		.loc 1 827 13 is_stmt 1 view .LVU560
 2355              		.loc 1 827 22 is_stmt 0 view .LVU561
 2356 0032 4FF00008 		mov	r8, #0
 2357 0036 CDF81480 		str	r8, [sp, #20]
 828:Core/Src/main.c ****             task7_checksums[test_index] = calculate_mandelbrot_fixed_point_with_scale(
 2358              		.loc 1 828 13 is_stmt 1 view .LVU562
 2359              		.loc 1 828 43 is_stmt 0 view .LVU563
 2360 003a 05AB     		add	r3, sp, #20
 2361 003c 0293     		str	r3, [sp, #8]
 2362 003e 8DED008B 		vstr.64	d8, [sp]	@ int
 2363 0042 1B4B     		ldr	r3, .L119+12
 2364 0044 1A68     		ldr	r2, [r3]
 2365 0046 5146     		mov	r1, r10
 2366 0048 5046     		mov	r0, r10
 2367              	.LVL240:
 2368              		.loc 1 828 43 view .LVU564
 2369 004a FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_with_scale
 2370              	.LVL241:
 2371              		.loc 1 828 41 discriminator 1 view .LVU565
 2372 004e 194B     		ldr	r3, .L119+16
 2373 0050 03EBC403 		add	r3, r3, r4, lsl #3
 2374 0054 C3E90001 		strd	r0, [r3]
 829:Core/Src/main.c ****                 current_size, current_size, max_iterations, current_scale, &overflow_count);
 830:Core/Src/main.c ****             
 831:Core/Src/main.c ****             // Record end time
 832:Core/Src/main.c ****             uint32_t end_time = HAL_GetTick();
 2375              		.loc 1 832 13 is_stmt 1 view .LVU566
 2376              		.loc 1 832 33 is_stmt 0 view .LVU567
 2377 0058 FFF7FEFF 		bl	HAL_GetTick
 2378              	.LVL242:
 833:Core/Src/main.c ****             task7_execution_times[test_index] = end_time - start_time;
 2379              		.loc 1 833 13 is_stmt 1 view .LVU568
 2380              		.loc 1 833 58 is_stmt 0 view .LVU569
 2381 005c 801B     		subs	r0, r0, r6
 2382              	.LVL243:
 2383              		.loc 1 833 47 view .LVU570
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 61


 2384 005e 164B     		ldr	r3, .L119+20
 2385 0060 43F82400 		str	r0, [r3, r4, lsl #2]
 834:Core/Src/main.c ****             task7_overflow_counts[test_index] = overflow_count;
 2386              		.loc 1 834 13 is_stmt 1 view .LVU571
 2387              		.loc 1 834 47 is_stmt 0 view .LVU572
 2388 0064 154B     		ldr	r3, .L119+24
 2389 0066 059A     		ldr	r2, [sp, #20]
 2390 0068 43F82420 		str	r2, [r3, r4, lsl #2]
 835:Core/Src/main.c ****             
 836:Core/Src/main.c ****             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 2391              		.loc 1 836 13 is_stmt 1 view .LVU573
 2392 006c 4246     		mov	r2, r8
 2393 006e 0121     		movs	r1, #1
 2394 0070 3846     		mov	r0, r7
 2395 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2396              	.LVL244:
 837:Core/Src/main.c ****             HAL_Delay(200);
 2397              		.loc 1 837 13 view .LVU574
 2398 0076 C820     		movs	r0, #200
 2399 0078 FFF7FEFF 		bl	HAL_Delay
 2400              	.LVL245:
 2401              	.LBE53:
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2402              		.loc 1 813 54 discriminator 3 view .LVU575
 2403 007c 0135     		adds	r5, r5, #1
 2404              	.LVL246:
 2405              	.L114:
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2406              		.loc 1 813 41 discriminator 1 view .LVU576
 2407 007e 042D     		cmp	r5, #4
 2408 0080 C6DD     		ble	.L115
 2409              	.LBE52:
 2410              	.LBE51:
 810:Core/Src/main.c ****         int64_t current_scale = scaling_factors[scale_idx];
 2411              		.loc 1 810 53 discriminator 2 view .LVU577
 2412 0082 09F10109 		add	r9, r9, #1
 2413              	.LVL247:
 2414              	.L113:
 810:Core/Src/main.c ****         int64_t current_scale = scaling_factors[scale_idx];
 2415              		.loc 1 810 39 discriminator 1 view .LVU578
 2416 0086 B9F1020F 		cmp	r9, #2
 2417 008a 06DC     		bgt	.L118
 2418              	.LBB55:
 811:Core/Src/main.c ****         
 2419              		.loc 1 811 9 view .LVU579
 811:Core/Src/main.c ****         
 2420              		.loc 1 811 17 is_stmt 0 view .LVU580
 2421 008c 0C4B     		ldr	r3, .L119+28
 2422 008e 03EBC903 		add	r3, r3, r9, lsl #3
 2423 0092 93ED008B 		vldr.64	d8, [r3]	@ int
 2424              	.LVL248:
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2425              		.loc 1 813 9 is_stmt 1 view .LVU581
 2426              	.LBB54:
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2427              		.loc 1 813 14 view .LVU582
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 62


 2428              		.loc 1 813 18 is_stmt 0 view .LVU583
 2429 0096 0025     		movs	r5, #0
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2430              		.loc 1 813 9 view .LVU584
 2431 0098 F1E7     		b	.L114
 2432              	.LVL249:
 2433              	.L118:
 813:Core/Src/main.c ****             int current_size = task7_image_sizes[size_idx];
 2434              		.loc 1 813 9 view .LVU585
 2435              	.LBE54:
 2436              	.LBE55:
 2437              	.LBE50:
 838:Core/Src/main.c ****         }
 839:Core/Src/main.c ****     }
 840:Core/Src/main.c **** }
 2438              		.loc 1 840 1 view .LVU586
 2439 009a 06B0     		add	sp, sp, #24
 2440              	.LCFI28:
 2441              		.cfi_def_cfa_offset 40
 2442              		@ sp needed
 2443 009c BDEC028B 		vldm	sp!, {d8}
 2444              	.LCFI29:
 2445              		.cfi_restore 80
 2446              		.cfi_restore 81
 2447              		.cfi_def_cfa_offset 32
 2448 00a0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2449              	.LVL250:
 2450              	.L120:
 2451              		.loc 1 840 1 view .LVU587
 2452              		.align	2
 2453              	.L119:
 2454 00a4 00000000 		.word	task7_image_sizes
 2455 00a8 00000000 		.word	task7_test_index
 2456 00ac 00040240 		.word	1073873920
 2457 00b0 00000000 		.word	max_iterations
 2458 00b4 00000000 		.word	task7_checksums
 2459 00b8 00000000 		.word	task7_execution_times
 2460 00bc 00000000 		.word	task7_overflow_counts
 2461 00c0 00000000 		.word	scaling_factors
 2462              		.cfi_endproc
 2463              	.LFE147:
 2465              		.section	.text.analyze_scaling_results,"ax",%progbits
 2466              		.align	1
 2467              		.global	analyze_scaling_results
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2472              	analyze_scaling_results:
 2473              	.LFB148:
 841:Core/Src/main.c **** 
 842:Core/Src/main.c **** // Analyze scaling results (placeholder for analysis)
 843:Core/Src/main.c **** void analyze_scaling_results(void) {
 2474              		.loc 1 843 36 is_stmt 1 view -0
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 0
 2477              		@ frame_needed = 0, uses_anonymous_args = 0
 2478              		@ link register save eliminated.
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 63


 844:Core/Src/main.c ****     // This function can be used to analyze the results
 845:Core/Src/main.c ****     // For now, it's a placeholder
 846:Core/Src/main.c **** }
 2479              		.loc 1 846 1 view .LVU589
 2480 0000 7047     		bx	lr
 2481              		.cfi_endproc
 2482              	.LFE148:
 2484              		.section	.text.Error_Handler,"ax",%progbits
 2485              		.align	1
 2486              		.global	Error_Handler
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2491              	Error_Handler:
 2492              	.LFB149:
 847:Core/Src/main.c **** 
 848:Core/Src/main.c **** /* USER CODE END 4 */
 849:Core/Src/main.c **** 
 850:Core/Src/main.c **** /**
 851:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 852:Core/Src/main.c ****   * @retval None
 853:Core/Src/main.c ****   */
 854:Core/Src/main.c **** void Error_Handler(void)
 855:Core/Src/main.c **** {
 2493              		.loc 1 855 1 view -0
 2494              		.cfi_startproc
 2495              		@ Volatile: function does not return.
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
 2498              		@ link register save eliminated.
 856:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 857:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 858:Core/Src/main.c ****   __disable_irq();
 2499              		.loc 1 858 3 view .LVU591
 2500              	.LBB56:
 2501              	.LBI56:
 2502              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 64


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 65


  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 66


 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 67


 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 68


 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 69


 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 70


 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 71


 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 72


 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 73


 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 74


 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 75


 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 76


 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 77


 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 78


 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 79


 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 80


 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2503              		.loc 2 960 27 view .LVU592
 2504              	.LBB57:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2505              		.loc 2 962 3 view .LVU593
 2506              		.syntax unified
 2507              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2508 0000 72B6     		cpsid i
 2509              	@ 0 "" 2
 2510              		.thumb
 2511              		.syntax unified
 2512              	.L123:
 2513              	.LBE57:
 2514              	.LBE56:
 859:Core/Src/main.c ****   while (1)
 2515              		.loc 1 859 3 view .LVU594
 860:Core/Src/main.c ****   {
 861:Core/Src/main.c ****   }
 2516              		.loc 1 861 3 view .LVU595
 859:Core/Src/main.c ****   while (1)
 2517              		.loc 1 859 9 view .LVU596
 2518 0002 FEE7     		b	.L123
 2519              		.cfi_endproc
 2520              	.LFE149:
 2522              		.section	.text.SystemClock_Config,"ax",%progbits
 2523              		.align	1
 2524              		.global	SystemClock_Config
 2525              		.syntax unified
 2526              		.thumb
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 81


 2527              		.thumb_func
 2529              	SystemClock_Config:
 2530              	.LFB135:
 367:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2531              		.loc 1 367 1 view -0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 72
 2534              		@ frame_needed = 0, uses_anonymous_args = 0
 2535 0000 00B5     		push	{lr}
 2536              	.LCFI30:
 2537              		.cfi_def_cfa_offset 4
 2538              		.cfi_offset 14, -4
 2539 0002 93B0     		sub	sp, sp, #76
 2540              	.LCFI31:
 2541              		.cfi_def_cfa_offset 80
 368:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2542              		.loc 1 368 3 view .LVU598
 368:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2543              		.loc 1 368 22 is_stmt 0 view .LVU599
 2544 0004 3422     		movs	r2, #52
 2545 0006 0021     		movs	r1, #0
 2546 0008 05A8     		add	r0, sp, #20
 2547 000a FFF7FEFF 		bl	memset
 2548              	.LVL251:
 369:Core/Src/main.c **** 
 2549              		.loc 1 369 3 is_stmt 1 view .LVU600
 369:Core/Src/main.c **** 
 2550              		.loc 1 369 22 is_stmt 0 view .LVU601
 2551 000e 0023     		movs	r3, #0
 2552 0010 0093     		str	r3, [sp]
 2553 0012 0193     		str	r3, [sp, #4]
 2554 0014 0293     		str	r3, [sp, #8]
 2555 0016 0393     		str	r3, [sp, #12]
 2556 0018 0493     		str	r3, [sp, #16]
 374:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2557              		.loc 1 374 3 is_stmt 1 view .LVU602
 374:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2558              		.loc 1 374 36 is_stmt 0 view .LVU603
 2559 001a 0223     		movs	r3, #2
 2560 001c 0593     		str	r3, [sp, #20]
 375:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2561              		.loc 1 375 3 is_stmt 1 view .LVU604
 375:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2562              		.loc 1 375 30 is_stmt 0 view .LVU605
 2563 001e 0123     		movs	r3, #1
 2564 0020 0893     		str	r3, [sp, #32]
 376:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 2565              		.loc 1 376 3 is_stmt 1 view .LVU606
 376:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 2566              		.loc 1 376 41 is_stmt 0 view .LVU607
 2567 0022 1023     		movs	r3, #16
 2568 0024 0993     		str	r3, [sp, #36]
 377:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2569              		.loc 1 377 3 is_stmt 1 view .LVU608
 378:Core/Src/main.c ****   {
 2570              		.loc 1 378 3 view .LVU609
 378:Core/Src/main.c ****   {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 82


 2571              		.loc 1 378 7 is_stmt 0 view .LVU610
 2572 0026 05A8     		add	r0, sp, #20
 2573 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2574              	.LVL252:
 378:Core/Src/main.c ****   {
 2575              		.loc 1 378 6 discriminator 1 view .LVU611
 2576 002c 60B9     		cbnz	r0, .L128
 385:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 2577              		.loc 1 385 3 is_stmt 1 view .LVU612
 385:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 2578              		.loc 1 385 31 is_stmt 0 view .LVU613
 2579 002e 0723     		movs	r3, #7
 2580 0030 0093     		str	r3, [sp]
 387:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2581              		.loc 1 387 3 is_stmt 1 view .LVU614
 387:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2582              		.loc 1 387 34 is_stmt 0 view .LVU615
 2583 0032 0021     		movs	r1, #0
 2584 0034 0191     		str	r1, [sp, #4]
 388:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2585              		.loc 1 388 3 is_stmt 1 view .LVU616
 388:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2586              		.loc 1 388 35 is_stmt 0 view .LVU617
 2587 0036 0291     		str	r1, [sp, #8]
 389:Core/Src/main.c **** 
 2588              		.loc 1 389 3 is_stmt 1 view .LVU618
 389:Core/Src/main.c **** 
 2589              		.loc 1 389 36 is_stmt 0 view .LVU619
 2590 0038 0391     		str	r1, [sp, #12]
 391:Core/Src/main.c ****   {
 2591              		.loc 1 391 3 is_stmt 1 view .LVU620
 391:Core/Src/main.c ****   {
 2592              		.loc 1 391 7 is_stmt 0 view .LVU621
 2593 003a 6846     		mov	r0, sp
 2594 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2595              	.LVL253:
 391:Core/Src/main.c ****   {
 2596              		.loc 1 391 6 discriminator 1 view .LVU622
 2597 0040 20B9     		cbnz	r0, .L129
 395:Core/Src/main.c **** 
 2598              		.loc 1 395 1 view .LVU623
 2599 0042 13B0     		add	sp, sp, #76
 2600              	.LCFI32:
 2601              		.cfi_remember_state
 2602              		.cfi_def_cfa_offset 4
 2603              		@ sp needed
 2604 0044 5DF804FB 		ldr	pc, [sp], #4
 2605              	.L128:
 2606              	.LCFI33:
 2607              		.cfi_restore_state
 380:Core/Src/main.c ****   }
 2608              		.loc 1 380 5 is_stmt 1 view .LVU624
 2609 0048 FFF7FEFF 		bl	Error_Handler
 2610              	.LVL254:
 2611              	.L129:
 393:Core/Src/main.c ****   }
 2612              		.loc 1 393 5 view .LVU625
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 83


 2613 004c FFF7FEFF 		bl	Error_Handler
 2614              	.LVL255:
 2615              		.cfi_endproc
 2616              	.LFE135:
 2618              		.section	.text.main,"ax",%progbits
 2619              		.align	1
 2620              		.global	main
 2621              		.syntax unified
 2622              		.thumb
 2623              		.thumb_func
 2625              	main:
 2626              	.LFB134:
 190:Core/Src/main.c ****     /* USER CODE BEGIN 1 */
 2627              		.loc 1 190 3 view -0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 8
 2630              		@ frame_needed = 0, uses_anonymous_args = 0
 2631 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2632              	.LCFI34:
 2633              		.cfi_def_cfa_offset 36
 2634              		.cfi_offset 4, -36
 2635              		.cfi_offset 5, -32
 2636              		.cfi_offset 6, -28
 2637              		.cfi_offset 7, -24
 2638              		.cfi_offset 8, -20
 2639              		.cfi_offset 9, -16
 2640              		.cfi_offset 10, -12
 2641              		.cfi_offset 11, -8
 2642              		.cfi_offset 14, -4
 2643 0004 83B0     		sub	sp, sp, #12
 2644              	.LCFI35:
 2645              		.cfi_def_cfa_offset 48
 198:Core/Src/main.c **** 
 2646              		.loc 1 198 5 view .LVU627
 2647 0006 FFF7FEFF 		bl	HAL_Init
 2648              	.LVL256:
 205:Core/Src/main.c **** 
 2649              		.loc 1 205 5 view .LVU628
 2650 000a FFF7FEFF 		bl	SystemClock_Config
 2651              	.LVL257:
 212:Core/Src/main.c ****     /* USER CODE BEGIN 2 */
 2652              		.loc 1 212 5 view .LVU629
 2653 000e FFF7FEFF 		bl	MX_GPIO_Init
 2654              	.LVL258:
 216:Core/Src/main.c **** 
 2655              		.loc 1 216 5 view .LVU630
 2656 0012 FFF7FEFF 		bl	MX_DWT_Init
 2657              	.LVL259:
 220:Core/Src/main.c ****         current_test_index = i;
 2658              		.loc 1 220 5 view .LVU631
 2659              	.LBB58:
 220:Core/Src/main.c ****         current_test_index = i;
 2660              		.loc 1 220 10 view .LVU632
 220:Core/Src/main.c ****         current_test_index = i;
 2661              		.loc 1 220 14 is_stmt 0 view .LVU633
 2662 0016 0024     		movs	r4, #0
 220:Core/Src/main.c ****         current_test_index = i;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 84


 2663              		.loc 1 220 5 view .LVU634
 2664 0018 88E0     		b	.L131
 2665              	.LVL260:
 2666              	.L132:
 2667              	.LBB59:
 221:Core/Src/main.c ****         int test_size = image_sizes[i];
 2668              		.loc 1 221 9 is_stmt 1 view .LVU635
 221:Core/Src/main.c ****         int test_size = image_sizes[i];
 2669              		.loc 1 221 28 is_stmt 0 view .LVU636
 2670 001a 5A4B     		ldr	r3, .L135
 2671 001c 1C60     		str	r4, [r3]
 222:Core/Src/main.c ****         total_pixels[i] = test_size * test_size;  // Calculate total pixels
 2672              		.loc 1 222 9 is_stmt 1 view .LVU637
 222:Core/Src/main.c ****         total_pixels[i] = test_size * test_size;  // Calculate total pixels
 2673              		.loc 1 222 13 is_stmt 0 view .LVU638
 2674 001e 5A4B     		ldr	r3, .L135+4
 2675 0020 53F82460 		ldr	r6, [r3, r4, lsl #2]
 2676              	.LVL261:
 223:Core/Src/main.c **** 
 2677              		.loc 1 223 9 is_stmt 1 view .LVU639
 223:Core/Src/main.c **** 
 2678              		.loc 1 223 37 is_stmt 0 view .LVU640
 2679 0024 06FB06F2 		mul	r2, r6, r6
 223:Core/Src/main.c **** 
 2680              		.loc 1 223 25 view .LVU641
 2681 0028 584B     		ldr	r3, .L135+8
 2682 002a 43F82420 		str	r2, [r3, r4, lsl #2]
 227:Core/Src/main.c **** 
 2683              		.loc 1 227 9 is_stmt 1 view .LVU642
 2684 002e 584D     		ldr	r5, .L135+12
 2685 0030 0122     		movs	r2, #1
 2686 0032 1146     		mov	r1, r2
 2687 0034 2846     		mov	r0, r5
 2688 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2689              	.LVL262:
 230:Core/Src/main.c **** 
 2690              		.loc 1 230 9 view .LVU643
 230:Core/Src/main.c **** 
 2691              		.loc 1 230 22 is_stmt 0 view .LVU644
 2692 003a FFF7FEFF 		bl	HAL_GetTick
 2693              	.LVL263:
 230:Core/Src/main.c **** 
 2694              		.loc 1 230 20 discriminator 1 view .LVU645
 2695 003e DFF86C81 		ldr	r8, .L135+40
 2696 0042 C8F80000 		str	r0, [r8]
 233:Core/Src/main.c **** 
 2697              		.loc 1 233 9 is_stmt 1 view .LVU646
 233:Core/Src/main.c **** 
 2698              		.loc 1 233 27 is_stmt 0 view .LVU647
 2699 0046 DFF868B1 		ldr	fp, .L135+44
 2700 004a DBF80020 		ldr	r2, [fp]
 2701 004e 3146     		mov	r1, r6
 2702 0050 3046     		mov	r0, r6
 2703 0052 FFF7FEFF 		bl	calculate_mandelbrot_float
 2704              	.LVL264:
 233:Core/Src/main.c **** 
 2705              		.loc 1 233 25 discriminator 1 view .LVU648
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 85


 2706 0056 4F4F     		ldr	r7, .L135+16
 2707 0058 C7E90001 		strd	r0, [r7]
 236:Core/Src/main.c **** 
 2708              		.loc 1 236 9 is_stmt 1 view .LVU649
 236:Core/Src/main.c **** 
 2709              		.loc 1 236 20 is_stmt 0 view .LVU650
 2710 005c FFF7FEFF 		bl	HAL_GetTick
 2711              	.LVL265:
 236:Core/Src/main.c **** 
 2712              		.loc 1 236 18 discriminator 1 view .LVU651
 2713 0060 DFF850A1 		ldr	r10, .L135+48
 2714 0064 CAF80000 		str	r0, [r10]
 239:Core/Src/main.c ****         task5_wall_clock_float[i] = execution_time;
 2715              		.loc 1 239 9 is_stmt 1 view .LVU652
 239:Core/Src/main.c ****         task5_wall_clock_float[i] = execution_time;
 2716              		.loc 1 239 35 is_stmt 0 view .LVU653
 2717 0068 D8F80030 		ldr	r3, [r8]
 2718 006c C31A     		subs	r3, r0, r3
 239:Core/Src/main.c ****         task5_wall_clock_float[i] = execution_time;
 2719              		.loc 1 239 24 view .LVU654
 2720 006e DFF84891 		ldr	r9, .L135+52
 2721 0072 C9F80030 		str	r3, [r9]
 240:Core/Src/main.c ****         task5_checksums_float[i] = global_checksum;
 2722              		.loc 1 240 9 is_stmt 1 view .LVU655
 240:Core/Src/main.c ****         task5_checksums_float[i] = global_checksum;
 2723              		.loc 1 240 35 is_stmt 0 view .LVU656
 2724 0076 484A     		ldr	r2, .L135+20
 2725 0078 42F82430 		str	r3, [r2, r4, lsl #2]
 241:Core/Src/main.c **** 
 2726              		.loc 1 241 9 is_stmt 1 view .LVU657
 241:Core/Src/main.c **** 
 2727              		.loc 1 241 34 is_stmt 0 view .LVU658
 2728 007c E300     		lsls	r3, r4, #3
 2729 007e 0193     		str	r3, [sp, #4]
 2730 0080 464B     		ldr	r3, .L135+24
 2731 0082 03EBC403 		add	r3, r3, r4, lsl #3
 2732 0086 D7E90001 		ldrd	r0, [r7]
 2733 008a C3E90001 		strd	r0, [r3]
 244:Core/Src/main.c **** 
 2734              		.loc 1 244 9 is_stmt 1 view .LVU659
 2735 008e 0122     		movs	r2, #1
 2736 0090 0221     		movs	r1, #2
 2737 0092 2846     		mov	r0, r5
 2738 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2739              	.LVL266:
 247:Core/Src/main.c **** 
 2740              		.loc 1 247 9 view .LVU660
 2741 0098 4FF47A70 		mov	r0, #1000
 2742 009c FFF7FEFF 		bl	HAL_Delay
 2743              	.LVL267:
 250:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 2744              		.loc 1 250 9 view .LVU661
 2745 00a0 0022     		movs	r2, #0
 2746 00a2 0121     		movs	r1, #1
 2747 00a4 2846     		mov	r0, r5
 2748 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2749              	.LVL268:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 86


 251:Core/Src/main.c **** 
 2750              		.loc 1 251 9 view .LVU662
 2751 00aa 0022     		movs	r2, #0
 2752 00ac 0221     		movs	r1, #2
 2753 00ae 2846     		mov	r0, r5
 2754 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2755              	.LVL269:
 255:Core/Src/main.c **** 
 2756              		.loc 1 255 9 view .LVU663
 2757 00b4 0122     		movs	r2, #1
 2758 00b6 1146     		mov	r1, r2
 2759 00b8 2846     		mov	r0, r5
 2760 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 2761              	.LVL270:
 258:Core/Src/main.c **** 
 2762              		.loc 1 258 9 view .LVU664
 258:Core/Src/main.c **** 
 2763              		.loc 1 258 22 is_stmt 0 view .LVU665
 2764 00be FFF7FEFF 		bl	HAL_GetTick
 2765              	.LVL271:
 258:Core/Src/main.c **** 
 2766              		.loc 1 258 20 discriminator 1 view .LVU666
 2767 00c2 C8F80000 		str	r0, [r8]
 261:Core/Src/main.c **** 
 2768              		.loc 1 261 9 is_stmt 1 view .LVU667
 261:Core/Src/main.c **** 
 2769              		.loc 1 261 27 is_stmt 0 view .LVU668
 2770 00c6 DBF80020 		ldr	r2, [fp]
 2771 00ca 3146     		mov	r1, r6
 2772 00cc 3046     		mov	r0, r6
 2773 00ce FFF7FEFF 		bl	calculate_mandelbrot_double
 2774              	.LVL272:
 261:Core/Src/main.c **** 
 2775              		.loc 1 261 25 discriminator 1 view .LVU669
 2776 00d2 C7E90001 		strd	r0, [r7]
 264:Core/Src/main.c **** 
 2777              		.loc 1 264 9 is_stmt 1 view .LVU670
 264:Core/Src/main.c **** 
 2778              		.loc 1 264 20 is_stmt 0 view .LVU671
 2779 00d6 FFF7FEFF 		bl	HAL_GetTick
 2780              	.LVL273:
 264:Core/Src/main.c **** 
 2781              		.loc 1 264 18 discriminator 1 view .LVU672
 2782 00da CAF80000 		str	r0, [r10]
 267:Core/Src/main.c ****         task5_wall_clock_double[i] = execution_time;
 2783              		.loc 1 267 9 is_stmt 1 view .LVU673
 267:Core/Src/main.c ****         task5_wall_clock_double[i] = execution_time;
 2784              		.loc 1 267 35 is_stmt 0 view .LVU674
 2785 00de D8F80030 		ldr	r3, [r8]
 2786 00e2 C31A     		subs	r3, r0, r3
 267:Core/Src/main.c ****         task5_wall_clock_double[i] = execution_time;
 2787              		.loc 1 267 24 view .LVU675
 2788 00e4 C9F80030 		str	r3, [r9]
 268:Core/Src/main.c ****         task5_checksums_double[i] = global_checksum;
 2789              		.loc 1 268 9 is_stmt 1 view .LVU676
 268:Core/Src/main.c ****         task5_checksums_double[i] = global_checksum;
 2790              		.loc 1 268 36 is_stmt 0 view .LVU677
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 87


 2791 00e8 2D4A     		ldr	r2, .L135+28
 2792 00ea 42F82430 		str	r3, [r2, r4, lsl #2]
 269:Core/Src/main.c **** 
 2793              		.loc 1 269 9 is_stmt 1 view .LVU678
 269:Core/Src/main.c **** 
 2794              		.loc 1 269 35 is_stmt 0 view .LVU679
 2795 00ee 2D4B     		ldr	r3, .L135+32
 2796 00f0 019A     		ldr	r2, [sp, #4]
 2797 00f2 1344     		add	r3, r3, r2
 2798 00f4 D7E90001 		ldrd	r0, [r7]
 2799 00f8 C3E90001 		strd	r0, [r3]
 272:Core/Src/main.c **** 
 2800              		.loc 1 272 9 is_stmt 1 view .LVU680
 2801 00fc 0122     		movs	r2, #1
 2802 00fe 0221     		movs	r1, #2
 2803 0100 2846     		mov	r0, r5
 2804 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2805              	.LVL274:
 275:Core/Src/main.c **** 
 2806              		.loc 1 275 9 view .LVU681
 2807 0106 4FF47A70 		mov	r0, #1000
 2808 010a FFF7FEFF 		bl	HAL_Delay
 2809              	.LVL275:
 278:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 2810              		.loc 1 278 9 view .LVU682
 2811 010e 0022     		movs	r2, #0
 2812 0110 0121     		movs	r1, #1
 2813 0112 2846     		mov	r0, r5
 2814 0114 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2815              	.LVL276:
 279:Core/Src/main.c **** 
 2816              		.loc 1 279 9 view .LVU683
 2817 0118 0022     		movs	r2, #0
 2818 011a 0221     		movs	r1, #2
 2819 011c 2846     		mov	r0, r5
 2820 011e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2821              	.LVL277:
 282:Core/Src/main.c ****     }
 2822              		.loc 1 282 9 view .LVU684
 2823 0122 4FF4FA70 		mov	r0, #500
 2824 0126 FFF7FEFF 		bl	HAL_Delay
 2825              	.LVL278:
 2826              	.LBE59:
 220:Core/Src/main.c ****         current_test_index = i;
 2827              		.loc 1 220 37 discriminator 3 view .LVU685
 2828 012a 0134     		adds	r4, r4, #1
 2829              	.LVL279:
 2830              	.L131:
 220:Core/Src/main.c ****         current_test_index = i;
 2831              		.loc 1 220 23 discriminator 1 view .LVU686
 2832 012c 1E4B     		ldr	r3, .L135+36
 2833 012e 1B68     		ldr	r3, [r3]
 2834 0130 A342     		cmp	r3, r4
 2835 0132 3FF772AF 		bgt	.L132
 2836              	.LBE58:
 333:Core/Src/main.c ****     test_scaling_factors();
 2837              		.loc 1 333 5 view .LVU687
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 88


 2838 0136 164C     		ldr	r4, .L135+12
 2839              	.LVL280:
 333:Core/Src/main.c ****     test_scaling_factors();
 2840              		.loc 1 333 5 is_stmt 0 view .LVU688
 2841 0138 0122     		movs	r2, #1
 2842 013a 0221     		movs	r1, #2
 2843 013c 2046     		mov	r0, r4
 2844 013e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2845              	.LVL281:
 334:Core/Src/main.c ****     analyze_scaling_results();
 2846              		.loc 1 334 5 is_stmt 1 view .LVU689
 2847 0142 FFF7FEFF 		bl	test_scaling_factors
 2848              	.LVL282:
 335:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 2849              		.loc 1 335 5 view .LVU690
 336:Core/Src/main.c ****     
 2850              		.loc 1 336 5 view .LVU691
 2851 0146 0022     		movs	r2, #0
 2852 0148 0221     		movs	r1, #2
 2853 014a 2046     		mov	r0, r4
 2854 014c FFF7FEFF 		bl	HAL_GPIO_WritePin
 2855              	.LVL283:
 339:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 2856              		.loc 1 339 5 view .LVU692
 2857 0150 0122     		movs	r2, #1
 2858 0152 1146     		mov	r1, r2
 2859 0154 2046     		mov	r0, r4
 2860 0156 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2861              	.LVL284:
 340:Core/Src/main.c ****     
 2862              		.loc 1 340 5 view .LVU693
 2863 015a 0122     		movs	r2, #1
 2864 015c 0221     		movs	r1, #2
 2865 015e 2046     		mov	r0, r4
 2866 0160 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2867              	.LVL285:
 343:Core/Src/main.c ****     
 2868              		.loc 1 343 5 view .LVU694
 2869 0164 40F6B830 		movw	r0, #3000
 2870 0168 FFF7FEFF 		bl	HAL_Delay
 2871              	.LVL286:
 346:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 2872              		.loc 1 346 5 view .LVU695
 2873 016c 0022     		movs	r2, #0
 2874 016e 0121     		movs	r1, #1
 2875 0170 2046     		mov	r0, r4
 2876 0172 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2877              	.LVL287:
 347:Core/Src/main.c **** 
 2878              		.loc 1 347 5 view .LVU696
 2879 0176 0022     		movs	r2, #0
 2880 0178 0221     		movs	r1, #2
 2881 017a 2046     		mov	r0, r4
 2882 017c FFF7FEFF 		bl	HAL_GPIO_WritePin
 2883              	.LVL288:
 2884              	.L133:
 353:Core/Src/main.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 89


 2885              		.loc 1 353 5 view .LVU697
 358:Core/Src/main.c ****     /* USER CODE END 3 */
 2886              		.loc 1 358 5 view .LVU698
 353:Core/Src/main.c ****     {
 2887              		.loc 1 353 11 view .LVU699
 2888 0180 FEE7     		b	.L133
 2889              	.L136:
 2890 0182 00BF     		.align	2
 2891              	.L135:
 2892 0184 00000000 		.word	current_test_index
 2893 0188 00000000 		.word	image_sizes
 2894 018c 00000000 		.word	total_pixels
 2895 0190 00040240 		.word	1073873920
 2896 0194 00000000 		.word	global_checksum
 2897 0198 00000000 		.word	task5_wall_clock_float
 2898 019c 00000000 		.word	task5_checksums_float
 2899 01a0 00000000 		.word	task5_wall_clock_double
 2900 01a4 00000000 		.word	task5_checksums_double
 2901 01a8 00000000 		.word	num_sizes
 2902 01ac 00000000 		.word	start_time
 2903 01b0 00000000 		.word	max_iterations
 2904 01b4 00000000 		.word	end_time
 2905 01b8 00000000 		.word	execution_time
 2906              		.cfi_endproc
 2907              	.LFE134:
 2909              		.global	current_chunk_y
 2910              		.section	.bss.current_chunk_y,"aw",%nobits
 2911              		.align	2
 2914              	current_chunk_y:
 2915 0000 00000000 		.space	4
 2916              		.global	current_chunk_x
 2917              		.section	.bss.current_chunk_x,"aw",%nobits
 2918              		.align	2
 2921              	current_chunk_x:
 2922 0000 00000000 		.space	4
 2923              		.global	total_chunks_processed
 2924              		.section	.bss.total_chunks_processed,"aw",%nobits
 2925              		.align	2
 2928              	total_chunks_processed:
 2929 0000 00000000 		.space	4
 2930              		.global	task4_checksums_double
 2931              		.section	.bss.task4_checksums_double,"aw",%nobits
 2932              		.align	3
 2935              	task4_checksums_double:
 2936 0000 00000000 		.space	24
 2936      00000000 
 2936      00000000 
 2936      00000000 
 2936      00000000 
 2937              		.global	task4_checksums_fixed
 2938              		.section	.bss.task4_checksums_fixed,"aw",%nobits
 2939              		.align	3
 2942              	task4_checksums_fixed:
 2943 0000 00000000 		.space	24
 2943      00000000 
 2943      00000000 
 2943      00000000 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 90


 2943      00000000 
 2944              		.global	task4_throughput_double
 2945              		.section	.bss.task4_throughput_double,"aw",%nobits
 2946              		.align	2
 2949              	task4_throughput_double:
 2950 0000 00000000 		.space	12
 2950      00000000 
 2950      00000000 
 2951              		.global	task4_throughput_fixed
 2952              		.section	.bss.task4_throughput_fixed,"aw",%nobits
 2953              		.align	2
 2956              	task4_throughput_fixed:
 2957 0000 00000000 		.space	12
 2957      00000000 
 2957      00000000 
 2958              		.global	task4_cpu_cycles_double
 2959              		.section	.bss.task4_cpu_cycles_double,"aw",%nobits
 2960              		.align	2
 2963              	task4_cpu_cycles_double:
 2964 0000 00000000 		.space	12
 2964      00000000 
 2964      00000000 
 2965              		.global	task4_cpu_cycles_fixed
 2966              		.section	.bss.task4_cpu_cycles_fixed,"aw",%nobits
 2967              		.align	2
 2970              	task4_cpu_cycles_fixed:
 2971 0000 00000000 		.space	12
 2971      00000000 
 2971      00000000 
 2972              		.global	task4_wall_clock_double
 2973              		.section	.bss.task4_wall_clock_double,"aw",%nobits
 2974              		.align	2
 2977              	task4_wall_clock_double:
 2978 0000 00000000 		.space	12
 2978      00000000 
 2978      00000000 
 2979              		.global	task4_wall_clock_fixed
 2980              		.section	.bss.task4_wall_clock_fixed,"aw",%nobits
 2981              		.align	2
 2984              	task4_wall_clock_fixed:
 2985 0000 00000000 		.space	12
 2985      00000000 
 2985      00000000 
 2986              		.global	task4_image_heights
 2987              		.section	.data.task4_image_heights,"aw"
 2988              		.align	2
 2991              	task4_image_heights:
 2992 0000 08020000 		.word	520
 2993 0004 D0020000 		.word	720
 2994 0008 38040000 		.word	1080
 2995              		.global	task4_image_widths
 2996              		.section	.data.task4_image_widths,"aw"
 2997              		.align	2
 3000              	task4_image_widths:
 3001 0000 08020000 		.word	520
 3002 0004 00050000 		.word	1280
 3003 0008 80070000 		.word	1920
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 91


 3004              		.global	task7_test_index
 3005              		.section	.bss.task7_test_index,"aw",%nobits
 3006              		.align	2
 3009              	task7_test_index:
 3010 0000 00000000 		.space	4
 3011              		.global	task7_image_sizes
 3012              		.section	.data.task7_image_sizes,"aw"
 3013              		.align	2
 3016              	task7_image_sizes:
 3017 0000 80000000 		.word	128
 3018 0004 A0000000 		.word	160
 3019 0008 C0000000 		.word	192
 3020 000c E0000000 		.word	224
 3021 0010 00010000 		.word	256
 3022              		.global	task7_overflow_counts
 3023              		.section	.bss.task7_overflow_counts,"aw",%nobits
 3024              		.align	2
 3027              	task7_overflow_counts:
 3028 0000 00000000 		.space	60
 3028      00000000 
 3028      00000000 
 3028      00000000 
 3028      00000000 
 3029              		.global	task7_checksums
 3030              		.section	.bss.task7_checksums,"aw",%nobits
 3031              		.align	3
 3034              	task7_checksums:
 3035 0000 00000000 		.space	120
 3035      00000000 
 3035      00000000 
 3035      00000000 
 3035      00000000 
 3036              		.global	task7_execution_times
 3037              		.section	.bss.task7_execution_times,"aw",%nobits
 3038              		.align	2
 3041              	task7_execution_times:
 3042 0000 00000000 		.space	60
 3042      00000000 
 3042      00000000 
 3042      00000000 
 3042      00000000 
 3043              		.global	scaling_names
 3044              		.section	.rodata.str1.4,"aMS",%progbits,1
 3045              		.align	2
 3046              	.LC0:
 3047 0000 31305E33 		.ascii	"10^3\000"
 3047      00
 3048 0005 000000   		.align	2
 3049              	.LC1:
 3050 0008 31305E34 		.ascii	"10^4\000"
 3050      00
 3051 000d 000000   		.align	2
 3052              	.LC2:
 3053 0010 31305E36 		.ascii	"10^6\000"
 3053      00
 3054              		.section	.data.scaling_names,"aw"
 3055              		.align	2
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 92


 3058              	scaling_names:
 3059 0000 00000000 		.word	.LC0
 3060 0004 08000000 		.word	.LC1
 3061 0008 10000000 		.word	.LC2
 3062              		.global	scaling_factors
 3063              		.section	.data.scaling_factors,"aw"
 3064              		.align	3
 3067              	scaling_factors:
 3068 0000 E8030000 		.word	1000
 3069 0004 00000000 		.word	0
 3070 0008 10270000 		.word	10000
 3071 000c 00000000 		.word	0
 3072 0010 40420F00 		.word	1000000
 3073 0014 00000000 		.word	0
 3074              		.global	task5_checksums_double
 3075              		.section	.bss.task5_checksums_double,"aw",%nobits
 3076              		.align	3
 3079              	task5_checksums_double:
 3080 0000 00000000 		.space	40
 3080      00000000 
 3080      00000000 
 3080      00000000 
 3080      00000000 
 3081              		.global	task5_checksums_float
 3082              		.section	.bss.task5_checksums_float,"aw",%nobits
 3083              		.align	3
 3086              	task5_checksums_float:
 3087 0000 00000000 		.space	40
 3087      00000000 
 3087      00000000 
 3087      00000000 
 3087      00000000 
 3088              		.global	task5_wall_clock_double
 3089              		.section	.bss.task5_wall_clock_double,"aw",%nobits
 3090              		.align	2
 3093              	task5_wall_clock_double:
 3094 0000 00000000 		.space	20
 3094      00000000 
 3094      00000000 
 3094      00000000 
 3094      00000000 
 3095              		.global	task5_wall_clock_float
 3096              		.section	.bss.task5_wall_clock_float,"aw",%nobits
 3097              		.align	2
 3100              	task5_wall_clock_float:
 3101 0000 00000000 		.space	20
 3101      00000000 
 3101      00000000 
 3101      00000000 
 3101      00000000 
 3102              		.global	current_test_index
 3103              		.section	.bss.current_test_index,"aw",%nobits
 3104              		.align	2
 3107              	current_test_index:
 3108 0000 00000000 		.space	4
 3109              		.global	max_iterations
 3110              		.section	.data.max_iterations,"aw"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 93


 3111              		.align	2
 3114              	max_iterations:
 3115 0000 64000000 		.word	100
 3116              		.global	num_sizes
 3117              		.section	.data.num_sizes,"aw"
 3118              		.align	2
 3121              	num_sizes:
 3122 0000 05000000 		.word	5
 3123              		.global	image_sizes
 3124              		.section	.data.image_sizes,"aw"
 3125              		.align	2
 3128              	image_sizes:
 3129 0000 80000000 		.word	128
 3130 0004 A0000000 		.word	160
 3131 0008 C0000000 		.word	192
 3132 000c E0000000 		.word	224
 3133 0010 00010000 		.word	256
 3134              		.global	checksums_double
 3135              		.section	.bss.checksums_double,"aw",%nobits
 3136              		.align	3
 3139              	checksums_double:
 3140 0000 00000000 		.space	40
 3140      00000000 
 3140      00000000 
 3140      00000000 
 3140      00000000 
 3141              		.global	checksums_fixed
 3142              		.section	.bss.checksums_fixed,"aw",%nobits
 3143              		.align	3
 3146              	checksums_fixed:
 3147 0000 00000000 		.space	40
 3147      00000000 
 3147      00000000 
 3147      00000000 
 3147      00000000 
 3148              		.global	total_pixels
 3149              		.section	.bss.total_pixels,"aw",%nobits
 3150              		.align	2
 3153              	total_pixels:
 3154 0000 00000000 		.space	20
 3154      00000000 
 3154      00000000 
 3154      00000000 
 3154      00000000 
 3155              		.global	throughput_double
 3156              		.section	.bss.throughput_double,"aw",%nobits
 3157              		.align	2
 3160              	throughput_double:
 3161 0000 00000000 		.space	20
 3161      00000000 
 3161      00000000 
 3161      00000000 
 3161      00000000 
 3162              		.global	throughput_fixed
 3163              		.section	.bss.throughput_fixed,"aw",%nobits
 3164              		.align	2
 3167              	throughput_fixed:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 94


 3168 0000 00000000 		.space	20
 3168      00000000 
 3168      00000000 
 3168      00000000 
 3168      00000000 
 3169              		.global	cpu_cycles_double
 3170              		.section	.bss.cpu_cycles_double,"aw",%nobits
 3171              		.align	2
 3174              	cpu_cycles_double:
 3175 0000 00000000 		.space	20
 3175      00000000 
 3175      00000000 
 3175      00000000 
 3175      00000000 
 3176              		.global	cpu_cycles_fixed
 3177              		.section	.bss.cpu_cycles_fixed,"aw",%nobits
 3178              		.align	2
 3181              	cpu_cycles_fixed:
 3182 0000 00000000 		.space	20
 3182      00000000 
 3182      00000000 
 3182      00000000 
 3182      00000000 
 3183              		.global	wall_clock_double
 3184              		.section	.bss.wall_clock_double,"aw",%nobits
 3185              		.align	2
 3188              	wall_clock_double:
 3189 0000 00000000 		.space	20
 3189      00000000 
 3189      00000000 
 3189      00000000 
 3189      00000000 
 3190              		.global	wall_clock_fixed
 3191              		.section	.bss.wall_clock_fixed,"aw",%nobits
 3192              		.align	2
 3195              	wall_clock_fixed:
 3196 0000 00000000 		.space	20
 3196      00000000 
 3196      00000000 
 3196      00000000 
 3196      00000000 
 3197              		.global	dwt_cycle_count
 3198              		.section	.bss.dwt_cycle_count,"aw",%nobits
 3199              		.align	2
 3202              	dwt_cycle_count:
 3203 0000 00000000 		.space	4
 3204              		.global	dwt_end_cycles
 3205              		.section	.bss.dwt_end_cycles,"aw",%nobits
 3206              		.align	2
 3209              	dwt_end_cycles:
 3210 0000 00000000 		.space	4
 3211              		.global	dwt_start_cycles
 3212              		.section	.bss.dwt_start_cycles,"aw",%nobits
 3213              		.align	2
 3216              	dwt_start_cycles:
 3217 0000 00000000 		.space	4
 3218              		.global	end_time
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 95


 3219              		.section	.bss.end_time,"aw",%nobits
 3220              		.align	2
 3223              	end_time:
 3224 0000 00000000 		.space	4
 3225              		.global	start_time
 3226              		.section	.bss.start_time,"aw",%nobits
 3227              		.align	2
 3230              	start_time:
 3231 0000 00000000 		.space	4
 3232              		.global	execution_time
 3233              		.section	.bss.execution_time,"aw",%nobits
 3234              		.align	2
 3237              	execution_time:
 3238 0000 00000000 		.space	4
 3239              		.global	global_checksum
 3240              		.section	.bss.global_checksum,"aw",%nobits
 3241              		.align	3
 3244              	global_checksum:
 3245 0000 00000000 		.space	8
 3245      00000000 
 3246              		.text
 3247              	.Letext0:
 3248              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 3249              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 3250              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 3251              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3252              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3253              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3254              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3255              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3256              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3257              		.file 12 "<built-in>"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 96


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:22     .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:28     .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:316    .text.calculate_mandelbrot_fixed_point_arithmetic:000001a4 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:325    .text.MX_GPIO_Init:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:330    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:421    .text.MX_GPIO_Init:00000060 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:433    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:439    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:711    .text.calculate_mandelbrot_double:00000158 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:719    .text.calculate_mandelbrot_float:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:725    .text.calculate_mandelbrot_float:00000000 calculate_mandelbrot_float
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:891    .text.calculate_mandelbrot_float:000000c0 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:897    .text.MX_DWT_Init:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:903    .text.MX_DWT_Init:00000000 MX_DWT_Init
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:933    .text.MX_DWT_Init:00000020 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:939    .text.calculate_single_pixel_mandelbrot_fixed:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:945    .text.calculate_single_pixel_mandelbrot_fixed:00000000 calculate_single_pixel_mandelbrot_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1163   .text.calculate_single_pixel_mandelbrot_fixed:00000148 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1171   .text.calculate_single_pixel_mandelbrot_double:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1177   .text.calculate_single_pixel_mandelbrot_double:00000000 calculate_single_pixel_mandelbrot_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1384   .text.calculate_single_pixel_mandelbrot_double:00000110 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1392   .text.reset_chunk_counters:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1398   .text.reset_chunk_counters:00000000 reset_chunk_counters
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1423   .text.reset_chunk_counters:00000010 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2928   .bss.total_chunks_processed:00000000 total_chunks_processed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2921   .bss.current_chunk_x:00000000 current_chunk_x
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2914   .bss.current_chunk_y:00000000 current_chunk_y
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1430   .text.calculate_mandelbrot_chunk:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1436   .text.calculate_mandelbrot_chunk:00000000 calculate_mandelbrot_chunk
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1569   .text.calculate_mandelbrot_chunk:0000006c $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1574   .text.process_image_in_chunks:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1580   .text.process_image_in_chunks:00000000 process_image_in_chunks
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1841   .text.process_image_in_chunks:0000010c $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1850   .text.calculate_mandelbrot_fixed_point_with_scale:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:1856   .text.calculate_mandelbrot_fixed_point_with_scale:00000000 calculate_mandelbrot_fixed_point_with_scale
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2282   .text.test_scaling_factors:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2288   .text.test_scaling_factors:00000000 test_scaling_factors
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2454   .text.test_scaling_factors:000000a4 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3016   .data.task7_image_sizes:00000000 task7_image_sizes
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3009   .bss.task7_test_index:00000000 task7_test_index
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3114   .data.max_iterations:00000000 max_iterations
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3034   .bss.task7_checksums:00000000 task7_checksums
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3041   .bss.task7_execution_times:00000000 task7_execution_times
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3027   .bss.task7_overflow_counts:00000000 task7_overflow_counts
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3067   .data.scaling_factors:00000000 scaling_factors
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2466   .text.analyze_scaling_results:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2472   .text.analyze_scaling_results:00000000 analyze_scaling_results
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2485   .text.Error_Handler:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2491   .text.Error_Handler:00000000 Error_Handler
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2523   .text.SystemClock_Config:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2529   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2619   .text.main:00000000 $t
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2625   .text.main:00000000 main
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2892   .text.main:00000184 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3107   .bss.current_test_index:00000000 current_test_index
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 97


C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3128   .data.image_sizes:00000000 image_sizes
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3153   .bss.total_pixels:00000000 total_pixels
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3244   .bss.global_checksum:00000000 global_checksum
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3100   .bss.task5_wall_clock_float:00000000 task5_wall_clock_float
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3086   .bss.task5_checksums_float:00000000 task5_checksums_float
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3093   .bss.task5_wall_clock_double:00000000 task5_wall_clock_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3079   .bss.task5_checksums_double:00000000 task5_checksums_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3121   .data.num_sizes:00000000 num_sizes
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3230   .bss.start_time:00000000 start_time
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3223   .bss.end_time:00000000 end_time
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3237   .bss.execution_time:00000000 execution_time
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2911   .bss.current_chunk_y:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2918   .bss.current_chunk_x:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2925   .bss.total_chunks_processed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2935   .bss.task4_checksums_double:00000000 task4_checksums_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2932   .bss.task4_checksums_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2942   .bss.task4_checksums_fixed:00000000 task4_checksums_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2939   .bss.task4_checksums_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2949   .bss.task4_throughput_double:00000000 task4_throughput_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2946   .bss.task4_throughput_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2956   .bss.task4_throughput_fixed:00000000 task4_throughput_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2953   .bss.task4_throughput_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2963   .bss.task4_cpu_cycles_double:00000000 task4_cpu_cycles_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2960   .bss.task4_cpu_cycles_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2970   .bss.task4_cpu_cycles_fixed:00000000 task4_cpu_cycles_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2967   .bss.task4_cpu_cycles_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2977   .bss.task4_wall_clock_double:00000000 task4_wall_clock_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2974   .bss.task4_wall_clock_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2984   .bss.task4_wall_clock_fixed:00000000 task4_wall_clock_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2981   .bss.task4_wall_clock_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2991   .data.task4_image_heights:00000000 task4_image_heights
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2988   .data.task4_image_heights:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3000   .data.task4_image_widths:00000000 task4_image_widths
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:2997   .data.task4_image_widths:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3006   .bss.task7_test_index:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3013   .data.task7_image_sizes:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3024   .bss.task7_overflow_counts:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3031   .bss.task7_checksums:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3038   .bss.task7_execution_times:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3058   .data.scaling_names:00000000 scaling_names
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3045   .rodata.str1.4:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3055   .data.scaling_names:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3064   .data.scaling_factors:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3076   .bss.task5_checksums_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3083   .bss.task5_checksums_float:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3090   .bss.task5_wall_clock_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3097   .bss.task5_wall_clock_float:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3104   .bss.current_test_index:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3111   .data.max_iterations:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3118   .data.num_sizes:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3125   .data.image_sizes:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3139   .bss.checksums_double:00000000 checksums_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3136   .bss.checksums_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3146   .bss.checksums_fixed:00000000 checksums_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3143   .bss.checksums_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3150   .bss.total_pixels:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3160   .bss.throughput_double:00000000 throughput_double
ARM GAS  C:\Users\User\AppData\Local\Temp\ccMDwfZm.s 			page 98


C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3157   .bss.throughput_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3167   .bss.throughput_fixed:00000000 throughput_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3164   .bss.throughput_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3174   .bss.cpu_cycles_double:00000000 cpu_cycles_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3171   .bss.cpu_cycles_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3181   .bss.cpu_cycles_fixed:00000000 cpu_cycles_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3178   .bss.cpu_cycles_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3188   .bss.wall_clock_double:00000000 wall_clock_double
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3185   .bss.wall_clock_double:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3195   .bss.wall_clock_fixed:00000000 wall_clock_fixed
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3192   .bss.wall_clock_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3202   .bss.dwt_cycle_count:00000000 dwt_cycle_count
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3199   .bss.dwt_cycle_count:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3209   .bss.dwt_end_cycles:00000000 dwt_end_cycles
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3206   .bss.dwt_end_cycles:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3216   .bss.dwt_start_cycles:00000000 dwt_start_cycles
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3213   .bss.dwt_start_cycles:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3220   .bss.end_time:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3227   .bss.start_time:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3234   .bss.execution_time:00000000 $d
C:\Users\User\AppData\Local\Temp\ccMDwfZm.s:3241   .bss.global_checksum:00000000 $d

UNDEFINED SYMBOLS
__aeabi_ldivmod
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmple
HAL_GetTick
HAL_GPIO_TogglePin
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
