ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.global	__aeabi_lmul
  19              		.global	__aeabi_ldivmod
  20              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
  21              		.align	1
  22              		.global	calculate_mandelbrot_fixed_point_arithmetic
  23              		.syntax unified
  24              		.code	16
  25              		.thumb_func
  27              	calculate_mandelbrot_fixed_point_arithmetic:
  28              	.LVL0:
  29              	.LFB48:
   1:Core/Src/main.c **** 
   2:Core/Src/main.c **** /* USER CODE BEGIN Header */
   3:Core/Src/main.c **** /**
   4:Core/Src/main.c ****   ******************************************************************************
   5:Core/Src/main.c ****   * @file           : main.c
   6:Core/Src/main.c ****   * @brief          : Main program body
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include <stdint.h>
  26:Core/Src/main.c **** #include "stm32f0xx.h"
  27:Core/Src/main.c **** #include "core_cm0.h"  // For DWT access
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 2


  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  32:Core/Src/main.c **** #define MAX_ITER 100
  33:Core/Src/main.c **** /* USER CODE END PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE BEGIN PV */
  48:Core/Src/main.c **** //TODO: Define and initialise the global varibales required
  49:Core/Src/main.c **** /*
  50:Core/Src/main.c ****   start_time
  51:Core/Src/main.c ****   end_time
  52:Core/Src/main.c ****   execution_time 
  53:Core/Src/main.c ****   checksum: should be uint64_t
  54:Core/Src/main.c ****   initial width and height maybe or you might opt for an array??
  55:Core/Src/main.c **** */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** // Global variables for Task 1
  58:Core/Src/main.c **** // Image dimensions for testing (square images)
  59:Core/Src/main.c **** #define IMAGE_128 128
  60:Core/Src/main.c **** #define IMAGE_160 160
  61:Core/Src/main.c **** #define IMAGE_192 192
  62:Core/Src/main.c **** #define IMAGE_224 224
  63:Core/Src/main.c **** #define IMAGE_256 256
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** // Global checksum variable to hold the checksum returned from the mandelbrot function
  66:Core/Src/main.c **** uint64_t global_checksum;
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** uint32_t execution_time;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // Global start_time variable
  71:Core/Src/main.c **** uint32_t start_time;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** // Global end_time variable
  74:Core/Src/main.c **** uint32_t end_time;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** // Arrays to store execution times for different MAX_ITER values
  77:Core/Src/main.c **** uint32_t execution_times_fixed[5];    // For fixed-point arithmetic
  78:Core/Src/main.c **** uint32_t execution_times_double[5];   // For double arithmetic
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** // Arrays to store checksums for different MAX_ITER values  
  81:Core/Src/main.c **** uint64_t checksums_fixed[5];          // For fixed-point arithmetic
  82:Core/Src/main.c **** uint64_t checksums_double[5];         // For double arithmetic
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** // Array to store the MAX_ITER values being tested
  85:Core/Src/main.c **** int max_iter_values[5] = {100, 250, 500, 750, 1000};
  86:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 3


  87:Core/Src/main.c **** // Array to store image sizes being tested (using 128x128 for all tests)
  88:Core/Src/main.c **** int image_sizes[5] = { IMAGE_128, IMAGE_128, IMAGE_128, IMAGE_128, IMAGE_128};
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** // Task 3: Extended measurement variables
  91:Core/Src/main.c **** // Wall clock time (ms)
  92:Core/Src/main.c **** uint32_t wall_clock_fixed[5];
  93:Core/Src/main.c **** uint32_t wall_clock_double[5];
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** // CPU clock cycles
  96:Core/Src/main.c **** uint32_t cpu_cycles_fixed[5];
  97:Core/Src/main.c **** uint32_t cpu_cycles_double[5];
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** // Throughput (pixels per second)
 100:Core/Src/main.c **** float throughput_fixed[5];
 101:Core/Src/main.c **** float throughput_double[5];
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** // Image sizes for Task 3: 128, 160, 192, 224, 256
 104:Core/Src/main.c **** int task3_image_sizes[5] = {128, 160, 192, 224, 256};
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** // Helper variables for measurements
 107:Core/Src/main.c **** uint32_t tick_start, tick_end;
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /* USER CODE END PV */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 112:Core/Src/main.c **** void SystemClock_Config(void);
 113:Core/Src/main.c **** static void MX_GPIO_Init(void);
 114:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 115:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
 116:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** // Task 3 helper functions
 119:Core/Src/main.c **** void enable_dwt_cycle_counter(void);
 120:Core/Src/main.c **** uint32_t get_system_clock_frequency(void);
 121:Core/Src/main.c **** uint32_t get_dwt_cycles(void);
 122:Core/Src/main.c **** float calculate_throughput(int width, int height, uint32_t wall_clock_ms);
 123:Core/Src/main.c **** void measure_execution_metrics(int width, int height, int max_iter, 
 124:Core/Src/main.c ****                               uint64_t (*mandelbrot_func)(int, int, int),
 125:Core/Src/main.c ****                               uint32_t *wall_clock, uint32_t *cpu_cycles, 
 126:Core/Src/main.c ****                               float *throughput, uint64_t *checksum);
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /* USER CODE END PFP */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 131:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** // Task 3: Cycle counter functions for STM32F0
 134:Core/Src/main.c **** // Note: STM32F0 doesn't have DWT, so we'll use SysTick for cycle counting
 135:Core/Src/main.c **** // We'll estimate cycles based on system clock and execution time
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** void enable_dwt_cycle_counter(void) {
 138:Core/Src/main.c ****     // For STM32F0, we don't have DWT, so we'll use SysTick
 139:Core/Src/main.c ****     // This is a placeholder - actual cycle counting will be done differently
 140:Core/Src/main.c **** }
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** // Function to get the actual system clock frequency
 143:Core/Src/main.c **** uint32_t get_system_clock_frequency(void) {
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 4


 144:Core/Src/main.c ****     // Get the actual system clock frequency from RCC
 145:Core/Src/main.c ****     return HAL_RCC_GetSysClockFreq();
 146:Core/Src/main.c **** }
 147:Core/Src/main.c **** 
 148:Core/Src/main.c **** // Function to get estimated cycle count based on system clock
 149:Core/Src/main.c **** uint32_t get_dwt_cycles(void) {
 150:Core/Src/main.c ****     // For STM32F0, we'll estimate cycles based on actual system clock
 151:Core/Src/main.c ****     uint32_t system_clock = get_system_clock_frequency();
 152:Core/Src/main.c ****     
 153:Core/Src/main.c ****     // Calculate cycles based on wall clock time
 154:Core/Src/main.c ****     uint32_t wall_time_ms = tick_end - tick_start;
 155:Core/Src/main.c ****     uint32_t estimated_cycles = (wall_time_ms * system_clock) / 1000;
 156:Core/Src/main.c ****     
 157:Core/Src/main.c ****     return estimated_cycles;
 158:Core/Src/main.c **** }
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** // Function to calculate throughput (pixels per second)
 161:Core/Src/main.c **** float calculate_throughput(int width, int height, uint32_t wall_clock_ms) {
 162:Core/Src/main.c ****     if (wall_clock_ms == 0) return 0.0f;
 163:Core/Src/main.c ****     float total_pixels = (float)(width * height);
 164:Core/Src/main.c ****     float time_seconds = (float)wall_clock_ms / 1000.0f;
 165:Core/Src/main.c ****     return total_pixels / time_seconds;
 166:Core/Src/main.c **** }
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** // Function to measure execution with all metrics
 169:Core/Src/main.c **** void measure_execution_metrics(int width, int height, int max_iter, 
 170:Core/Src/main.c ****                               uint64_t (*mandelbrot_func)(int, int, int),
 171:Core/Src/main.c ****                               uint32_t *wall_clock, uint32_t *cpu_cycles, 
 172:Core/Src/main.c ****                               float *throughput, uint64_t *checksum) {
 173:Core/Src/main.c ****     
 174:Core/Src/main.c ****     // Measure wall clock time
 175:Core/Src/main.c ****     tick_start = HAL_GetTick();
 176:Core/Src/main.c ****     
 177:Core/Src/main.c ****     // Execute Mandelbrot function
 178:Core/Src/main.c ****     *checksum = mandelbrot_func(width, height, max_iter);
 179:Core/Src/main.c ****     
 180:Core/Src/main.c ****     // Stop measurements
 181:Core/Src/main.c ****     tick_end = HAL_GetTick();
 182:Core/Src/main.c ****     
 183:Core/Src/main.c ****     // Calculate results
 184:Core/Src/main.c ****     *wall_clock = tick_end - tick_start;
 185:Core/Src/main.c ****     
 186:Core/Src/main.c ****     // For STM32F0, estimate CPU cycles based on wall clock time
 187:Core/Src/main.c ****     // This is an approximation since we don't have DWT
 188:Core/Src/main.c ****     *cpu_cycles = get_dwt_cycles();
 189:Core/Src/main.c ****     
 190:Core/Src/main.c ****     *throughput = calculate_throughput(width, height, *wall_clock);
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /* USER CODE END 0 */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c **** /**
 196:Core/Src/main.c ****   * @brief  The application entry point.
 197:Core/Src/main.c ****   * @retval int
 198:Core/Src/main.c ****   */
 199:Core/Src/main.c ****   int main(void)
 200:Core/Src/main.c ****   {
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 5


 201:Core/Src/main.c ****     /* USER CODE BEGIN 1 */
 202:Core/Src/main.c ****   
 203:Core/Src/main.c ****     /* USER CODE END 1 */
 204:Core/Src/main.c ****   
 205:Core/Src/main.c ****     /* MCU Configuration--------------------------------------------------------*/
 206:Core/Src/main.c ****   
 207:Core/Src/main.c ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 208:Core/Src/main.c ****     HAL_Init();
 209:Core/Src/main.c ****   
 210:Core/Src/main.c ****     /* USER CODE BEGIN Init */
 211:Core/Src/main.c ****   
 212:Core/Src/main.c ****     /* USER CODE END Init */
 213:Core/Src/main.c ****   
 214:Core/Src/main.c ****     /* Configure the system clock */
 215:Core/Src/main.c ****     SystemClock_Config();
 216:Core/Src/main.c ****   
 217:Core/Src/main.c ****     /* USER CODE BEGIN SysInit */
 218:Core/Src/main.c ****   
 219:Core/Src/main.c ****     /* USER CODE END SysInit */
 220:Core/Src/main.c ****   
 221:Core/Src/main.c ****     /* Initialize all configured peripherals */
 222:Core/Src/main.c ****     MX_GPIO_Init();
 223:Core/Src/main.c ****     /* USER CODE BEGIN 2 */
 224:Core/Src/main.c ****     
 225:Core/Src/main.c ****     // Enable DWT cycle counter for Task 3
 226:Core/Src/main.c ****     enable_dwt_cycle_counter();
 227:Core/Src/main.c ****     
 228:Core/Src/main.c ****     // Task 3: Extended execution time measurement
 229:Core/Src/main.c ****     // MAX_ITER = 100, Image sizes: 128, 160, 192, 224, 256
 230:Core/Src/main.c ****     for (int test_size = 0; test_size < 5; test_size++) {
 231:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
 232:Core/Src/main.c ****         
 233:Core/Src/main.c ****         // Test Fixed Point Arithmetic
 234:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 235:Core/Src/main.c ****         
 236:Core/Src/main.c ****         measure_execution_metrics(current_image_size, current_image_size, MAX_ITER,
 237:Core/Src/main.c ****                                  calculate_mandelbrot_fixed_point_arithmetic,
 238:Core/Src/main.c ****                                  &wall_clock_fixed[test_size],
 239:Core/Src/main.c ****                                  &cpu_cycles_fixed[test_size],
 240:Core/Src/main.c ****                                  &throughput_fixed[test_size],
 241:Core/Src/main.c ****                                  &checksums_fixed[test_size]);
 242:Core/Src/main.c ****         
 243:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 244:Core/Src/main.c ****         HAL_Delay(200);
 245:Core/Src/main.c ****         
 246:Core/Src/main.c ****         // Test Double Arithmetic
 247:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 248:Core/Src/main.c ****         
 249:Core/Src/main.c ****         measure_execution_metrics(current_image_size, current_image_size, MAX_ITER,
 250:Core/Src/main.c ****                                  calculate_mandelbrot_double,
 251:Core/Src/main.c ****                                  &wall_clock_double[test_size],
 252:Core/Src/main.c ****                                  &cpu_cycles_double[test_size],
 253:Core/Src/main.c ****                                  &throughput_double[test_size],
 254:Core/Src/main.c ****                                  &checksums_double[test_size]);
 255:Core/Src/main.c ****         
 256:Core/Src/main.c ****         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 257:Core/Src/main.c ****         HAL_Delay(200);
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 6


 258:Core/Src/main.c ****     }
 259:Core/Src/main.c ****     
 260:Core/Src/main.c ****     // All tests completed - turn on both LEDs to indicate completion
 261:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 262:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 263:Core/Src/main.c ****     
 264:Core/Src/main.c ****     // Hold the LEDs on for 2s to show completion
 265:Core/Src/main.c ****     HAL_Delay(2000);
 266:Core/Src/main.c ****     
 267:Core/Src/main.c ****     // Turn off the LEDs
 268:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 269:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 270:Core/Src/main.c ****   
 271:Core/Src/main.c ****     /* USER CODE END 2 */
 272:Core/Src/main.c ****   
 273:Core/Src/main.c ****     /* Infinite loop */
 274:Core/Src/main.c ****     /* USER CODE BEGIN WHILE */
 275:Core/Src/main.c ****     while (1)
 276:Core/Src/main.c ****     {
 277:Core/Src/main.c ****       /* USER CODE END WHILE */
 278:Core/Src/main.c ****   
 279:Core/Src/main.c ****       /* USER CODE BEGIN 3 */
 280:Core/Src/main.c ****     }
 281:Core/Src/main.c ****     /* USER CODE END 3 */
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c **** 
 284:Core/Src/main.c **** /**
 285:Core/Src/main.c ****   * @brief System Clock Configuration
 286:Core/Src/main.c ****   * @retval None
 287:Core/Src/main.c ****   */
 288:Core/Src/main.c **** void SystemClock_Config(void)
 289:Core/Src/main.c **** {
 290:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 291:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 294:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 297:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 298:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 299:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 300:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 306:Core/Src/main.c ****   */
 307:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 308:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 309:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 310:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 311:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 314:Core/Src/main.c ****   {
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 7


 315:Core/Src/main.c ****     Error_Handler();
 316:Core/Src/main.c ****   }
 317:Core/Src/main.c **** }
 318:Core/Src/main.c **** 
 319:Core/Src/main.c **** /**
 320:Core/Src/main.c ****   * @brief GPIO Initialization Function
 321:Core/Src/main.c ****   * @param None
 322:Core/Src/main.c ****   * @retval None
 323:Core/Src/main.c ****   */
 324:Core/Src/main.c **** static void MX_GPIO_Init(void)
 325:Core/Src/main.c **** {
 326:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 327:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 328:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 331:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 332:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 335:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 */
 338:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 339:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 340:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 341:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 342:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 345:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 346:Core/Src/main.c **** }
 347:Core/Src/main.c **** 
 348:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 349:Core/Src/main.c **** //TODO: Mandelbroat using variable type integers and fixed point arithmetic
 350:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
  30              		.loc 1 350 96 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 64
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 350 96 is_stmt 0 view .LVU1
  35 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 20
  38              		.cfi_offset 4, -20
  39              		.cfi_offset 5, -16
  40              		.cfi_offset 6, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 DE46     		mov	lr, fp
  44 0004 5746     		mov	r7, r10
  45 0006 4E46     		mov	r6, r9
  46 0008 4546     		mov	r5, r8
  47 000a E0B5     		push	{r5, r6, r7, lr}
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 36
  50              		.cfi_offset 8, -36
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 8


  51              		.cfi_offset 9, -32
  52              		.cfi_offset 10, -28
  53              		.cfi_offset 11, -24
  54 000c 91B0     		sub	sp, sp, #68
  55              	.LCFI2:
  56              		.cfi_def_cfa_offset 104
  57 000e 0F91     		str	r1, [sp, #60]
  58 0010 9146     		mov	r9, r2
 351:Core/Src/main.c ****   uint64_t mandelbrot_sum = 0;
  59              		.loc 1 351 3 is_stmt 1 view .LVU2
  60              	.LVL1:
 352:Core/Src/main.c ****     //TODO: Complete the function implementation
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   // Fixed-point scaling factor (10^6 as suggested in Appendix B)
 355:Core/Src/main.c ****   const int64_t SCALE = 1000000;
  61              		.loc 1 355 3 view .LVU3
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   // Pre-calculate scaled constants
 358:Core/Src/main.c ****   int64_t scaled_3_5 = 3 * SCALE + (5 * SCALE) / 10;  // 3.5 * SCALE
  62              		.loc 1 358 3 view .LVU4
 359:Core/Src/main.c ****   int64_t scaled_2_0 = 2 * SCALE;                      // 2.0 * SCALE
  63              		.loc 1 359 3 view .LVU5
 360:Core/Src/main.c ****   int64_t scaled_2_5 = 2 * SCALE + (5 * SCALE) / 10;  // 2.5 * SCALE
  64              		.loc 1 360 3 view .LVU6
 361:Core/Src/main.c ****   int64_t scaled_1_0 = SCALE;                          // 1.0 * SCALE
  65              		.loc 1 361 3 view .LVU7
 362:Core/Src/main.c ****   int64_t scaled_4 = 4 * SCALE;                        // 4 * SCALE
  66              		.loc 1 362 3 view .LVU8
 363:Core/Src/main.c ****   int64_t scaled_2 = 2 * SCALE;                        // 2 * SCALE
  67              		.loc 1 363 3 view .LVU9
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   // Loop through each pixel (y coordinate)
 366:Core/Src/main.c ****   for (int y = 0; y < height; y++) {
  68              		.loc 1 366 3 view .LVU10
  69              	.LBB4:
  70              		.loc 1 366 8 view .LVU11
  71              		.loc 1 366 12 is_stmt 0 view .LVU12
  72 0012 0023     		movs	r3, #0
  73 0014 0E93     		str	r3, [sp, #56]
  74              	.LBE4:
 351:Core/Src/main.c ****     //TODO: Complete the function implementation
  75              		.loc 1 351 12 view .LVU13
  76 0016 0023     		movs	r3, #0
  77 0018 0024     		movs	r4, #0
  78 001a 0C93     		str	r3, [sp, #48]
  79 001c 0D94     		str	r4, [sp, #52]
  80 001e 0B90     		str	r0, [sp, #44]
  81              	.LBB10:
  82              		.loc 1 366 3 view .LVU14
  83 0020 8BE0     		b	.L2
  84              	.LVL2:
  85              	.L5:
  86              	.LBB5:
  87              	.LBB6:
  88              	.LBB7:
 367:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 368:Core/Src/main.c ****     for (int x = 0; x < width; x++) {
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 9


 369:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 370:Core/Src/main.c ****       int64_t x0 = ((x * scaled_3_5) / width) - scaled_2_5;
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****       // Calculate y0 = (y / height) * 2.0 - 1.0
 373:Core/Src/main.c ****       int64_t y0 = ((y * scaled_2_0) / height) - scaled_1_0;
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****       // Initialize iteration variables
 376:Core/Src/main.c ****       int64_t xi = 0;
 377:Core/Src/main.c ****       int64_t yi = 0;
 378:Core/Src/main.c ****       int iteration = 0;
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****       // Main iteration loop
 381:Core/Src/main.c ****       while (iteration < max_iterations &&
 382:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****         // temp = xi^2 - yi^2
 385:Core/Src/main.c ****         int64_t temp = ((xi * xi) / SCALE) - ((yi * yi) / SCALE);
  89              		.loc 1 385 9 is_stmt 1 view .LVU15
  90              		.loc 1 385 35 is_stmt 0 view .LVU16
  91 0022 4F4A     		ldr	r2, .L12
  92 0024 0023     		movs	r3, #0
  93 0026 0098     		ldr	r0, [sp]
  94 0028 0199     		ldr	r1, [sp, #4]
  95 002a FFF7FEFF 		bl	__aeabi_ldivmod
  96              	.LVL3:
  97 002e 0090     		str	r0, [sp]
  98 0030 0191     		str	r1, [sp, #4]
  99              		.loc 1 385 57 view .LVU17
 100 0032 4C4A     		ldr	r2, .L12+4
 101 0034 0123     		movs	r3, #1
 102 0036 5B42     		rsbs	r3, r3, #0
 103 0038 2000     		movs	r0, r4
 104 003a 2900     		movs	r1, r5
 105 003c FFF7FEFF 		bl	__aeabi_ldivmod
 106              	.LVL4:
 107              		.loc 1 385 17 view .LVU18
 108 0040 009C     		ldr	r4, [sp]
 109 0042 019D     		ldr	r5, [sp, #4]
 110 0044 2418     		adds	r4, r4, r0
 111 0046 4D41     		adcs	r5, r5, r1
 112              	.LVL5:
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****         // yi = 2 * xi * yi + y0
 388:Core/Src/main.c ****         yi = ((scaled_2 * xi * yi) / SCALE) + y0;
 113              		.loc 1 388 9 is_stmt 1 view .LVU19
 114              		.loc 1 388 30 is_stmt 0 view .LVU20
 115 0048 029A     		ldr	r2, [sp, #8]
 116 004a 039B     		ldr	r3, [sp, #12]
 117 004c 3000     		movs	r0, r6
 118 004e 3900     		movs	r1, r7
 119 0050 FFF7FEFF 		bl	__aeabi_lmul
 120              	.LVL6:
 121 0054 444A     		ldr	r2, .L12+8
 122 0056 0023     		movs	r3, #0
 123 0058 FFF7FEFF 		bl	__aeabi_lmul
 124              	.LVL7:
 125              		.loc 1 388 36 view .LVU21
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 10


 126 005c 404A     		ldr	r2, .L12
 127 005e 0023     		movs	r3, #0
 128 0060 FFF7FEFF 		bl	__aeabi_ldivmod
 129              	.LVL8:
 130              		.loc 1 388 12 view .LVU22
 131 0064 069A     		ldr	r2, [sp, #24]
 132 0066 079B     		ldr	r3, [sp, #28]
 133 0068 1218     		adds	r2, r2, r0
 134 006a 4B41     		adcs	r3, r3, r1
 135 006c 0292     		str	r2, [sp, #8]
 136 006e 0393     		str	r3, [sp, #12]
 137              	.LVL9:
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****         // xi = temp + x0
 391:Core/Src/main.c ****         xi = temp + x0;
 138              		.loc 1 391 9 is_stmt 1 view .LVU23
 139              		.loc 1 391 12 is_stmt 0 view .LVU24
 140 0070 049E     		ldr	r6, [sp, #16]
 141 0072 059F     		ldr	r7, [sp, #20]
 142              	.LVL10:
 143              		.loc 1 391 12 view .LVU25
 144 0074 3619     		adds	r6, r6, r4
 145 0076 6F41     		adcs	r7, r7, r5
 146              	.LVL11:
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****         iteration++;
 147              		.loc 1 393 9 is_stmt 1 view .LVU26
 148              		.loc 1 393 18 is_stmt 0 view .LVU27
 149 0078 0123     		movs	r3, #1
 150 007a 9C46     		mov	ip, r3
 151 007c E044     		add	r8, r8, ip
 152              	.LVL12:
 153              	.L3:
 154              		.loc 1 393 18 view .LVU28
 155              	.LBE7:
 381:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 156              		.loc 1 381 41 is_stmt 1 view .LVU29
 157 007e C845     		cmp	r8, r9
 158 0080 1ADA     		bge	.L4
 382:Core/Src/main.c **** 
 159              		.loc 1 382 15 is_stmt 0 view .LVU30
 160 0082 3200     		movs	r2, r6
 161 0084 3B00     		movs	r3, r7
 162 0086 3000     		movs	r0, r6
 163 0088 3900     		movs	r1, r7
 164 008a FFF7FEFF 		bl	__aeabi_lmul
 165              	.LVL13:
 166 008e 0090     		str	r0, [sp]
 167 0090 0191     		str	r1, [sp, #4]
 382:Core/Src/main.c **** 
 168              		.loc 1 382 25 view .LVU31
 169 0092 0298     		ldr	r0, [sp, #8]
 170 0094 0399     		ldr	r1, [sp, #12]
 171 0096 0200     		movs	r2, r0
 172 0098 0B00     		movs	r3, r1
 173 009a FFF7FEFF 		bl	__aeabi_lmul
 174              	.LVL14:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 11


 175 009e 0400     		movs	r4, r0
 176 00a0 0D00     		movs	r5, r1
 382:Core/Src/main.c **** 
 177              		.loc 1 382 20 view .LVU32
 178 00a2 009A     		ldr	r2, [sp]
 179 00a4 019B     		ldr	r3, [sp, #4]
 180 00a6 1219     		adds	r2, r2, r4
 181 00a8 6B41     		adcs	r3, r3, r5
 182 00aa 1100     		movs	r1, r2
 381:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 183              		.loc 1 381 41 discriminator 1 view .LVU33
 184 00ac 002B     		cmp	r3, #0
 185 00ae 03DC     		bgt	.L4
 186 00b0 B7D1     		bne	.L5
 187 00b2 2E4B     		ldr	r3, .L12+12
 188 00b4 9942     		cmp	r1, r3
 189 00b6 B4D9     		bls	.L5
 190              	.L4:
 394:Core/Src/main.c ****       }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****       // Add iteration count to checksum
 397:Core/Src/main.c ****       mandelbrot_sum += iteration;
 191              		.loc 1 397 22 view .LVU34
 192 00b8 5C46     		mov	r4, fp
 193              		.loc 1 397 7 is_stmt 1 view .LVU35
 194              		.loc 1 397 22 is_stmt 0 view .LVU36
 195 00ba 4346     		mov	r3, r8
 196 00bc 0893     		str	r3, [sp, #32]
 197 00be DB17     		asrs	r3, r3, #31
 198 00c0 0993     		str	r3, [sp, #36]
 199 00c2 0C9A     		ldr	r2, [sp, #48]
 200 00c4 0D9B     		ldr	r3, [sp, #52]
 201 00c6 0898     		ldr	r0, [sp, #32]
 202 00c8 0999     		ldr	r1, [sp, #36]
 203 00ca 1218     		adds	r2, r2, r0
 204 00cc 4B41     		adcs	r3, r3, r1
 205 00ce 0C92     		str	r2, [sp, #48]
 206 00d0 0D93     		str	r3, [sp, #52]
 207              	.LVL15:
 208              		.loc 1 397 22 view .LVU37
 209              	.LBE6:
 368:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 210              		.loc 1 368 33 is_stmt 1 discriminator 2 view .LVU38
 211 00d2 0134     		adds	r4, r4, #1
 212              	.LVL16:
 213              	.L8:
 368:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 214              		.loc 1 368 23 discriminator 1 view .LVU39
 215 00d4 0B9B     		ldr	r3, [sp, #44]
 216 00d6 9C42     		cmp	r4, r3
 217 00d8 2CDA     		bge	.L10
 218              	.LBB8:
 370:Core/Src/main.c **** 
 219              		.loc 1 370 7 view .LVU40
 370:Core/Src/main.c **** 
 220              		.loc 1 370 24 is_stmt 0 view .LVU41
 221 00da E117     		asrs	r1, r4, #31
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 12


 222 00dc 244A     		ldr	r2, .L12+16
 223 00de 0023     		movs	r3, #0
 224 00e0 2000     		movs	r0, r4
 225 00e2 FFF7FEFF 		bl	__aeabi_lmul
 226              	.LVL17:
 370:Core/Src/main.c **** 
 227              		.loc 1 370 38 view .LVU42
 228 00e6 0B9A     		ldr	r2, [sp, #44]
 229 00e8 D317     		asrs	r3, r2, #31
 230 00ea FFF7FEFF 		bl	__aeabi_ldivmod
 231              	.LVL18:
 370:Core/Src/main.c **** 
 232              		.loc 1 370 15 view .LVU43
 233 00ee 214A     		ldr	r2, .L12+20
 234 00f0 0123     		movs	r3, #1
 235 00f2 5B42     		rsbs	r3, r3, #0
 236 00f4 8018     		adds	r0, r0, r2
 237 00f6 5941     		adcs	r1, r1, r3
 238 00f8 0490     		str	r0, [sp, #16]
 239 00fa 0591     		str	r1, [sp, #20]
 240              	.LVL19:
 373:Core/Src/main.c **** 
 241              		.loc 1 373 7 is_stmt 1 view .LVU44
 373:Core/Src/main.c **** 
 242              		.loc 1 373 24 is_stmt 0 view .LVU45
 243 00fc 0E98     		ldr	r0, [sp, #56]
 244              	.LVL20:
 373:Core/Src/main.c **** 
 245              		.loc 1 373 24 view .LVU46
 246 00fe C117     		asrs	r1, r0, #31
 247 0100 194A     		ldr	r2, .L12+8
 248 0102 0023     		movs	r3, #0
 249 0104 FFF7FEFF 		bl	__aeabi_lmul
 250              	.LVL21:
 373:Core/Src/main.c **** 
 251              		.loc 1 373 38 view .LVU47
 252 0108 5346     		mov	r3, r10
 253 010a DB17     		asrs	r3, r3, #31
 254 010c 5246     		mov	r2, r10
 255 010e FFF7FEFF 		bl	__aeabi_ldivmod
 256              	.LVL22:
 373:Core/Src/main.c **** 
 257              		.loc 1 373 15 view .LVU48
 258 0112 144A     		ldr	r2, .L12+4
 259 0114 0123     		movs	r3, #1
 260 0116 5B42     		rsbs	r3, r3, #0
 261 0118 8018     		adds	r0, r0, r2
 262 011a 5941     		adcs	r1, r1, r3
 263 011c 0690     		str	r0, [sp, #24]
 264 011e 0791     		str	r1, [sp, #28]
 265              	.LVL23:
 376:Core/Src/main.c ****       int64_t yi = 0;
 266              		.loc 1 376 7 is_stmt 1 view .LVU49
 377:Core/Src/main.c ****       int iteration = 0;
 267              		.loc 1 377 7 view .LVU50
 378:Core/Src/main.c **** 
 268              		.loc 1 378 7 view .LVU51
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 13


 381:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 269              		.loc 1 381 7 view .LVU52
 378:Core/Src/main.c **** 
 270              		.loc 1 378 11 is_stmt 0 view .LVU53
 271 0120 0023     		movs	r3, #0
 272 0122 9846     		mov	r8, r3
 377:Core/Src/main.c ****       int iteration = 0;
 273              		.loc 1 377 15 view .LVU54
 274 0124 0022     		movs	r2, #0
 275 0126 0023     		movs	r3, #0
 276 0128 0292     		str	r2, [sp, #8]
 277 012a 0393     		str	r3, [sp, #12]
 376:Core/Src/main.c ****       int64_t yi = 0;
 278              		.loc 1 376 15 view .LVU55
 279 012c 0026     		movs	r6, #0
 280 012e 0027     		movs	r7, #0
 281 0130 A346     		mov	fp, r4
 381:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 282              		.loc 1 381 13 view .LVU56
 283 0132 A4E7     		b	.L3
 284              	.LVL24:
 285              	.L10:
 381:Core/Src/main.c ****          ((xi * xi + yi * yi) <= scaled_4)) {
 286              		.loc 1 381 13 view .LVU57
 287              	.LBE8:
 288              	.LBE5:
 366:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 289              		.loc 1 366 32 is_stmt 1 discriminator 2 view .LVU58
 290 0134 0E9B     		ldr	r3, [sp, #56]
 291 0136 0133     		adds	r3, r3, #1
 292 0138 0E93     		str	r3, [sp, #56]
 293              	.LVL25:
 294              	.L2:
 366:Core/Src/main.c ****     // Loop through each pixel (x coordinate)
 295              		.loc 1 366 21 discriminator 1 view .LVU59
 296 013a 0E9B     		ldr	r3, [sp, #56]
 297 013c 0F9A     		ldr	r2, [sp, #60]
 298 013e 9342     		cmp	r3, r2
 299 0140 04DA     		bge	.L11
 300              	.LBB9:
 368:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 301              		.loc 1 368 14 is_stmt 0 view .LVU60
 302 0142 0023     		movs	r3, #0
 303 0144 1C00     		movs	r4, r3
 304 0146 0F9B     		ldr	r3, [sp, #60]
 305 0148 9A46     		mov	r10, r3
 306 014a C3E7     		b	.L8
 307              	.LVL26:
 308              	.L11:
 368:Core/Src/main.c ****       // Calculate x0 = (x / width) * 3.5 - 2.5
 309              		.loc 1 368 14 view .LVU61
 310              	.LBE9:
 311              	.LBE10:
 398:Core/Src/main.c ****     }
 399:Core/Src/main.c ****   }
 400:Core/Src/main.c **** 
 401:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 14


 402:Core/Src/main.c ****     
 403:Core/Src/main.c ****     return mandelbrot_sum;
 312              		.loc 1 403 5 is_stmt 1 view .LVU62
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** }
 313              		.loc 1 405 1 is_stmt 0 view .LVU63
 314 014c 0C98     		ldr	r0, [sp, #48]
 315 014e 0D99     		ldr	r1, [sp, #52]
 316 0150 11B0     		add	sp, sp, #68
 317              		@ sp needed
 318              	.LVL27:
 319              		.loc 1 405 1 view .LVU64
 320 0152 F0BC     		pop	{r4, r5, r6, r7}
 321 0154 BB46     		mov	fp, r7
 322 0156 B246     		mov	r10, r6
 323 0158 A946     		mov	r9, r5
 324 015a A046     		mov	r8, r4
 325 015c F0BD     		pop	{r4, r5, r6, r7, pc}
 326              	.L13:
 327 015e C046     		.align	2
 328              	.L12:
 329 0160 40420F00 		.word	1000000
 330 0164 C0BDF0FF 		.word	-1000000
 331 0168 80841E00 		.word	2000000
 332 016c 00093D00 		.word	4000000
 333 0170 E0673500 		.word	3500000
 334 0174 60DAD9FF 		.word	-2500000
 335              		.cfi_endproc
 336              	.LFE48:
 338              		.global	__aeabi_i2d
 339              		.global	__aeabi_ddiv
 340              		.global	__aeabi_dmul
 341              		.global	__aeabi_dsub
 342              		.global	__aeabi_dadd
 343              		.global	__aeabi_dcmple
 344              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 345              		.align	1
 346              		.global	calculate_mandelbrot_double
 347              		.syntax unified
 348              		.code	16
 349              		.thumb_func
 351              	calculate_mandelbrot_double:
 352              	.LVL28:
 353              	.LFB49:
 406:Core/Src/main.c **** 
 407:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 408:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 354              		.loc 1 408 80 is_stmt 1 view -0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 64
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		.loc 1 408 80 is_stmt 0 view .LVU66
 359 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 360              	.LCFI3:
 361              		.cfi_def_cfa_offset 20
 362              		.cfi_offset 4, -20
 363              		.cfi_offset 5, -16
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 15


 364              		.cfi_offset 6, -12
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 DE46     		mov	lr, fp
 368 0004 5746     		mov	r7, r10
 369 0006 4E46     		mov	r6, r9
 370 0008 4546     		mov	r5, r8
 371 000a E0B5     		push	{r5, r6, r7, lr}
 372              	.LCFI4:
 373              		.cfi_def_cfa_offset 36
 374              		.cfi_offset 8, -36
 375              		.cfi_offset 9, -32
 376              		.cfi_offset 10, -28
 377              		.cfi_offset 11, -24
 378 000c 91B0     		sub	sp, sp, #68
 379              	.LCFI5:
 380              		.cfi_def_cfa_offset 104
 381 000e 0F91     		str	r1, [sp, #60]
 382 0010 9146     		mov	r9, r2
 409:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 383              		.loc 1 409 5 is_stmt 1 view .LVU67
 384              	.LVL29:
 410:Core/Src/main.c ****     //TODO: Complete the function implementation
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****         // Loop through each pixel (y coordinate)
 413:Core/Src/main.c ****         for (int y = 0; y < height; y++) {
 385              		.loc 1 413 9 view .LVU68
 386              	.LBB11:
 387              		.loc 1 413 14 view .LVU69
 388              		.loc 1 413 18 is_stmt 0 view .LVU70
 389 0012 0023     		movs	r3, #0
 390 0014 0E93     		str	r3, [sp, #56]
 391              	.LBE11:
 409:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 392              		.loc 1 409 14 view .LVU71
 393 0016 0023     		movs	r3, #0
 394 0018 0024     		movs	r4, #0
 395 001a 0C93     		str	r3, [sp, #48]
 396 001c 0D94     		str	r4, [sp, #52]
 397 001e 0B90     		str	r0, [sp, #44]
 398              	.LBB17:
 399              		.loc 1 413 9 view .LVU72
 400 0020 8DE0     		b	.L15
 401              	.LVL30:
 402              	.L18:
 403              	.LBB12:
 404              	.LBB13:
 405              	.LBB14:
 414:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 415:Core/Src/main.c ****             for (int x = 0; x < width; x++) {
 416:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 417:Core/Src/main.c ****                 double x0 = ((double)x / width) * 3.5 - 2.5;
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****                 // Calculate y0 = (y / height) * 2.0 - 1.0
 420:Core/Src/main.c ****                 double y0 = ((double)y / height) * 2.0 - 1.0;
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****                 // Initialize iteration variables
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 16


 423:Core/Src/main.c ****                 double xi = 0.0;
 424:Core/Src/main.c ****                 double yi = 0.0;
 425:Core/Src/main.c ****                 int iteration = 0;
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****                 // Main iteration loop
 428:Core/Src/main.c ****                 while (iteration < max_iterations &&
 429:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****                     // temp = xi^2 - yi^2
 432:Core/Src/main.c ****                     double temp = xi * xi - yi * yi;
 406              		.loc 1 432 21 is_stmt 1 view .LVU73
 407              		.loc 1 432 28 is_stmt 0 view .LVU74
 408 0022 029A     		ldr	r2, [sp, #8]
 409 0024 039B     		ldr	r3, [sp, #12]
 410 0026 0098     		ldr	r0, [sp]
 411 0028 0199     		ldr	r1, [sp, #4]
 412 002a FFF7FEFF 		bl	__aeabi_dsub
 413              	.LVL31:
 414 002e 0090     		str	r0, [sp]
 415 0030 0191     		str	r1, [sp, #4]
 416              	.LVL32:
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****                     // yi = 2 * xi * yi + y0
 435:Core/Src/main.c ****                     yi = 2.0 * xi * yi + y0;
 417              		.loc 1 435 21 is_stmt 1 view .LVU75
 418              		.loc 1 435 30 is_stmt 0 view .LVU76
 419 0032 3200     		movs	r2, r6
 420 0034 3B00     		movs	r3, r7
 421 0036 3000     		movs	r0, r6
 422              	.LVL33:
 423              		.loc 1 435 30 view .LVU77
 424 0038 3900     		movs	r1, r7
 425 003a FFF7FEFF 		bl	__aeabi_dadd
 426              	.LVL34:
 427              		.loc 1 435 35 view .LVU78
 428 003e 2200     		movs	r2, r4
 429 0040 2B00     		movs	r3, r5
 430 0042 FFF7FEFF 		bl	__aeabi_dmul
 431              	.LVL35:
 432              		.loc 1 435 24 view .LVU79
 433 0046 069A     		ldr	r2, [sp, #24]
 434 0048 079B     		ldr	r3, [sp, #28]
 435 004a FFF7FEFF 		bl	__aeabi_dadd
 436              	.LVL36:
 437 004e 0400     		movs	r4, r0
 438              	.LVL37:
 439              		.loc 1 435 24 view .LVU80
 440 0050 0D00     		movs	r5, r1
 441              	.LVL38:
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****                     // xi = temp + x0
 438:Core/Src/main.c ****                     xi = temp + x0;
 442              		.loc 1 438 21 is_stmt 1 view .LVU81
 443              		.loc 1 438 24 is_stmt 0 view .LVU82
 444 0052 009A     		ldr	r2, [sp]
 445 0054 019B     		ldr	r3, [sp, #4]
 446 0056 0498     		ldr	r0, [sp, #16]
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 17


 447 0058 0599     		ldr	r1, [sp, #20]
 448 005a FFF7FEFF 		bl	__aeabi_dadd
 449              	.LVL39:
 450 005e 0600     		movs	r6, r0
 451              	.LVL40:
 452              		.loc 1 438 24 view .LVU83
 453 0060 0F00     		movs	r7, r1
 454              	.LVL41:
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****                     iteration++;
 455              		.loc 1 440 21 is_stmt 1 view .LVU84
 456              		.loc 1 440 30 is_stmt 0 view .LVU85
 457 0062 0123     		movs	r3, #1
 458 0064 9C46     		mov	ip, r3
 459 0066 E044     		add	r8, r8, ip
 460              	.LVL42:
 461              	.L16:
 462              		.loc 1 440 30 view .LVU86
 463              	.LBE14:
 428:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 464              		.loc 1 428 51 is_stmt 1 view .LVU87
 465 0068 C845     		cmp	r8, r9
 466 006a 1BDA     		bge	.L17
 429:Core/Src/main.c **** 
 467              		.loc 1 429 29 is_stmt 0 view .LVU88
 468 006c 3200     		movs	r2, r6
 469 006e 3B00     		movs	r3, r7
 470 0070 3000     		movs	r0, r6
 471 0072 3900     		movs	r1, r7
 472 0074 FFF7FEFF 		bl	__aeabi_dmul
 473              	.LVL43:
 474 0078 0090     		str	r0, [sp]
 475 007a 0191     		str	r1, [sp, #4]
 429:Core/Src/main.c **** 
 476              		.loc 1 429 39 view .LVU89
 477 007c 2200     		movs	r2, r4
 478 007e 2B00     		movs	r3, r5
 479 0080 2000     		movs	r0, r4
 480 0082 2900     		movs	r1, r5
 481 0084 FFF7FEFF 		bl	__aeabi_dmul
 482              	.LVL44:
 483 0088 0200     		movs	r2, r0
 484 008a 0B00     		movs	r3, r1
 485 008c 0292     		str	r2, [sp, #8]
 486 008e 0393     		str	r3, [sp, #12]
 429:Core/Src/main.c **** 
 487              		.loc 1 429 34 view .LVU90
 488 0090 0098     		ldr	r0, [sp]
 489 0092 0199     		ldr	r1, [sp, #4]
 490 0094 FFF7FEFF 		bl	__aeabi_dadd
 491              	.LVL45:
 428:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 492              		.loc 1 428 51 discriminator 1 view .LVU91
 493 0098 0022     		movs	r2, #0
 494 009a 344B     		ldr	r3, .L24
 495 009c FFF7FEFF 		bl	__aeabi_dcmple
 496              	.LVL46:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 18


 497 00a0 0028     		cmp	r0, #0
 498 00a2 BED1     		bne	.L18
 499              	.L17:
 441:Core/Src/main.c ****                 }
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****                 // Add iteration count to checksum
 444:Core/Src/main.c ****                 mandelbrot_sum += iteration;
 500              		.loc 1 444 17 is_stmt 1 view .LVU92
 501              		.loc 1 444 32 is_stmt 0 view .LVU93
 502 00a4 4346     		mov	r3, r8
 503 00a6 0893     		str	r3, [sp, #32]
 504 00a8 DB17     		asrs	r3, r3, #31
 505 00aa 0993     		str	r3, [sp, #36]
 506 00ac 0C9B     		ldr	r3, [sp, #48]
 507 00ae 0D9C     		ldr	r4, [sp, #52]
 508 00b0 0899     		ldr	r1, [sp, #32]
 509 00b2 099A     		ldr	r2, [sp, #36]
 510 00b4 5B18     		adds	r3, r3, r1
 511 00b6 5441     		adcs	r4, r4, r2
 512 00b8 0C93     		str	r3, [sp, #48]
 513 00ba 0D94     		str	r4, [sp, #52]
 514              	.LVL47:
 515              		.loc 1 444 32 view .LVU94
 516              	.LBE13:
 415:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 517              		.loc 1 415 41 is_stmt 1 discriminator 2 view .LVU95
 518 00bc 0A9B     		ldr	r3, [sp, #40]
 519              	.LVL48:
 415:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 520              		.loc 1 415 41 is_stmt 0 discriminator 2 view .LVU96
 521 00be 0133     		adds	r3, r3, #1
 522 00c0 0A93     		str	r3, [sp, #40]
 523              	.LVL49:
 524              	.L20:
 415:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 525              		.loc 1 415 31 is_stmt 1 discriminator 1 view .LVU97
 526 00c2 0A9B     		ldr	r3, [sp, #40]
 527 00c4 0B9A     		ldr	r2, [sp, #44]
 528 00c6 9342     		cmp	r3, r2
 529 00c8 36DA     		bge	.L22
 530              	.LBB15:
 417:Core/Src/main.c **** 
 531              		.loc 1 417 17 view .LVU98
 417:Core/Src/main.c **** 
 532              		.loc 1 417 30 is_stmt 0 view .LVU99
 533 00ca 0A98     		ldr	r0, [sp, #40]
 534 00cc FFF7FEFF 		bl	__aeabi_i2d
 535              	.LVL50:
 536 00d0 0400     		movs	r4, r0
 537 00d2 0D00     		movs	r5, r1
 417:Core/Src/main.c **** 
 538              		.loc 1 417 40 view .LVU100
 539 00d4 0B98     		ldr	r0, [sp, #44]
 540 00d6 FFF7FEFF 		bl	__aeabi_i2d
 541              	.LVL51:
 542 00da 0200     		movs	r2, r0
 543 00dc 0B00     		movs	r3, r1
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 19


 544 00de 2000     		movs	r0, r4
 545 00e0 2900     		movs	r1, r5
 546 00e2 FFF7FEFF 		bl	__aeabi_ddiv
 547              	.LVL52:
 417:Core/Src/main.c **** 
 548              		.loc 1 417 49 view .LVU101
 549 00e6 0022     		movs	r2, #0
 550 00e8 214B     		ldr	r3, .L24+4
 551 00ea FFF7FEFF 		bl	__aeabi_dmul
 552              	.LVL53:
 417:Core/Src/main.c **** 
 553              		.loc 1 417 24 view .LVU102
 554 00ee 0022     		movs	r2, #0
 555 00f0 204B     		ldr	r3, .L24+8
 556 00f2 FFF7FEFF 		bl	__aeabi_dsub
 557              	.LVL54:
 558 00f6 0490     		str	r0, [sp, #16]
 559 00f8 0591     		str	r1, [sp, #20]
 560              	.LVL55:
 420:Core/Src/main.c **** 
 561              		.loc 1 420 17 is_stmt 1 view .LVU103
 420:Core/Src/main.c **** 
 562              		.loc 1 420 30 is_stmt 0 view .LVU104
 563 00fa 5846     		mov	r0, fp
 564              	.LVL56:
 420:Core/Src/main.c **** 
 565              		.loc 1 420 30 view .LVU105
 566 00fc FFF7FEFF 		bl	__aeabi_i2d
 567              	.LVL57:
 568 0100 0400     		movs	r4, r0
 569 0102 0D00     		movs	r5, r1
 420:Core/Src/main.c **** 
 570              		.loc 1 420 40 view .LVU106
 571 0104 5046     		mov	r0, r10
 572 0106 FFF7FEFF 		bl	__aeabi_i2d
 573              	.LVL58:
 574 010a 0200     		movs	r2, r0
 575 010c 0B00     		movs	r3, r1
 576 010e 2000     		movs	r0, r4
 577 0110 2900     		movs	r1, r5
 578 0112 FFF7FEFF 		bl	__aeabi_ddiv
 579              	.LVL59:
 420:Core/Src/main.c **** 
 580              		.loc 1 420 50 view .LVU107
 581 0116 0200     		movs	r2, r0
 582 0118 0B00     		movs	r3, r1
 583 011a FFF7FEFF 		bl	__aeabi_dadd
 584              	.LVL60:
 420:Core/Src/main.c **** 
 585              		.loc 1 420 24 view .LVU108
 586 011e 0022     		movs	r2, #0
 587 0120 154B     		ldr	r3, .L24+12
 588 0122 FFF7FEFF 		bl	__aeabi_dsub
 589              	.LVL61:
 590 0126 0690     		str	r0, [sp, #24]
 591 0128 0791     		str	r1, [sp, #28]
 592              	.LVL62:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 20


 423:Core/Src/main.c ****                 double yi = 0.0;
 593              		.loc 1 423 17 is_stmt 1 view .LVU109
 424:Core/Src/main.c ****                 int iteration = 0;
 594              		.loc 1 424 17 view .LVU110
 425:Core/Src/main.c **** 
 595              		.loc 1 425 17 view .LVU111
 428:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 596              		.loc 1 428 17 view .LVU112
 425:Core/Src/main.c **** 
 597              		.loc 1 425 21 is_stmt 0 view .LVU113
 598 012a 0023     		movs	r3, #0
 599 012c 9846     		mov	r8, r3
 424:Core/Src/main.c ****                 int iteration = 0;
 600              		.loc 1 424 24 view .LVU114
 601 012e 0024     		movs	r4, #0
 602 0130 0025     		movs	r5, #0
 423:Core/Src/main.c ****                 double yi = 0.0;
 603              		.loc 1 423 24 view .LVU115
 604 0132 2600     		movs	r6, r4
 605 0134 2F00     		movs	r7, r5
 428:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 606              		.loc 1 428 23 view .LVU116
 607 0136 97E7     		b	.L16
 608              	.LVL63:
 609              	.L22:
 428:Core/Src/main.c ****                        ((xi * xi + yi * yi) <= 4.0)) {
 610              		.loc 1 428 23 view .LVU117
 611              	.LBE15:
 612              	.LBE12:
 413:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 613              		.loc 1 413 38 is_stmt 1 discriminator 2 view .LVU118
 614 0138 0E9B     		ldr	r3, [sp, #56]
 615              	.LVL64:
 413:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 616              		.loc 1 413 38 is_stmt 0 discriminator 2 view .LVU119
 617 013a 0133     		adds	r3, r3, #1
 618 013c 0E93     		str	r3, [sp, #56]
 619              	.LVL65:
 620              	.L15:
 413:Core/Src/main.c ****             // Loop through each pixel (x coordinate)
 621              		.loc 1 413 27 is_stmt 1 discriminator 1 view .LVU120
 622 013e 0E9B     		ldr	r3, [sp, #56]
 623 0140 0F9A     		ldr	r2, [sp, #60]
 624 0142 9342     		cmp	r3, r2
 625 0144 08DA     		bge	.L23
 626              	.LBB16:
 415:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 627              		.loc 1 415 22 is_stmt 0 view .LVU121
 628 0146 0023     		movs	r3, #0
 629 0148 9A46     		mov	r10, r3
 630 014a 0E9B     		ldr	r3, [sp, #56]
 631 014c 9B46     		mov	fp, r3
 632 014e 5346     		mov	r3, r10
 633 0150 0A93     		str	r3, [sp, #40]
 634 0152 0F9B     		ldr	r3, [sp, #60]
 635 0154 9A46     		mov	r10, r3
 636 0156 B4E7     		b	.L20
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 21


 637              	.LVL66:
 638              	.L23:
 415:Core/Src/main.c ****                 // Calculate x0 = (x / width) * 3.5 - 2.5
 639              		.loc 1 415 22 view .LVU122
 640              	.LBE16:
 641              	.LBE17:
 445:Core/Src/main.c ****             }
 446:Core/Src/main.c ****         }
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****         return mandelbrot_sum;
 642              		.loc 1 448 9 is_stmt 1 view .LVU123
 449:Core/Src/main.c ****     
 450:Core/Src/main.c ****     return mandelbrot_sum;
 451:Core/Src/main.c **** }
 643              		.loc 1 451 1 is_stmt 0 view .LVU124
 644 0158 0C98     		ldr	r0, [sp, #48]
 645 015a 0D99     		ldr	r1, [sp, #52]
 646 015c 11B0     		add	sp, sp, #68
 647              		@ sp needed
 648              	.LVL67:
 649              		.loc 1 451 1 view .LVU125
 650 015e F0BC     		pop	{r4, r5, r6, r7}
 651 0160 BB46     		mov	fp, r7
 652 0162 B246     		mov	r10, r6
 653 0164 A946     		mov	r9, r5
 654 0166 A046     		mov	r8, r4
 655 0168 F0BD     		pop	{r4, r5, r6, r7, pc}
 656              	.L25:
 657 016a C046     		.align	2
 658              	.L24:
 659 016c 00001040 		.word	1074790400
 660 0170 00000C40 		.word	1074528256
 661 0174 00000440 		.word	1074003968
 662 0178 0000F03F 		.word	1072693248
 663              		.cfi_endproc
 664              	.LFE49:
 666              		.section	.text.MX_GPIO_Init,"ax",%progbits
 667              		.align	1
 668              		.syntax unified
 669              		.code	16
 670              		.thumb_func
 672              	MX_GPIO_Init:
 673              	.LFB47:
 325:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 674              		.loc 1 325 1 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 32
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678 0000 10B5     		push	{r4, lr}
 679              	.LCFI6:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 4, -8
 682              		.cfi_offset 14, -4
 683 0002 88B0     		sub	sp, sp, #32
 684              	.LCFI7:
 685              		.cfi_def_cfa_offset 40
 326:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 22


 686              		.loc 1 326 3 view .LVU127
 326:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 687              		.loc 1 326 20 is_stmt 0 view .LVU128
 688 0004 1422     		movs	r2, #20
 689 0006 0021     		movs	r1, #0
 690 0008 03A8     		add	r0, sp, #12
 691 000a FFF7FEFF 		bl	memset
 692              	.LVL68:
 331:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 693              		.loc 1 331 3 is_stmt 1 view .LVU129
 694              	.LBB18:
 331:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 695              		.loc 1 331 3 view .LVU130
 331:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 696              		.loc 1 331 3 view .LVU131
 697 000e 134B     		ldr	r3, .L27
 698 0010 5A69     		ldr	r2, [r3, #20]
 699 0012 8021     		movs	r1, #128
 700 0014 C902     		lsls	r1, r1, #11
 701 0016 0A43     		orrs	r2, r1
 702 0018 5A61     		str	r2, [r3, #20]
 331:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 703              		.loc 1 331 3 view .LVU132
 704 001a 5A69     		ldr	r2, [r3, #20]
 705 001c 0A40     		ands	r2, r1
 706 001e 0192     		str	r2, [sp, #4]
 331:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 707              		.loc 1 331 3 view .LVU133
 708 0020 019A     		ldr	r2, [sp, #4]
 709              	.LBE18:
 331:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 710              		.loc 1 331 3 view .LVU134
 332:Core/Src/main.c **** 
 711              		.loc 1 332 3 view .LVU135
 712              	.LBB19:
 332:Core/Src/main.c **** 
 713              		.loc 1 332 3 view .LVU136
 332:Core/Src/main.c **** 
 714              		.loc 1 332 3 view .LVU137
 715 0022 5A69     		ldr	r2, [r3, #20]
 716 0024 8021     		movs	r1, #128
 717 0026 8902     		lsls	r1, r1, #10
 718 0028 0A43     		orrs	r2, r1
 719 002a 5A61     		str	r2, [r3, #20]
 332:Core/Src/main.c **** 
 720              		.loc 1 332 3 view .LVU138
 721 002c 5B69     		ldr	r3, [r3, #20]
 722 002e 0B40     		ands	r3, r1
 723 0030 0293     		str	r3, [sp, #8]
 332:Core/Src/main.c **** 
 724              		.loc 1 332 3 view .LVU139
 725 0032 029B     		ldr	r3, [sp, #8]
 726              	.LBE19:
 332:Core/Src/main.c **** 
 727              		.loc 1 332 3 view .LVU140
 335:Core/Src/main.c **** 
 728              		.loc 1 335 3 view .LVU141
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 23


 729 0034 0A4C     		ldr	r4, .L27+4
 730 0036 0022     		movs	r2, #0
 731 0038 0321     		movs	r1, #3
 732 003a 2000     		movs	r0, r4
 733 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 734              	.LVL69:
 338:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 735              		.loc 1 338 3 view .LVU142
 338:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 736              		.loc 1 338 23 is_stmt 0 view .LVU143
 737 0040 0323     		movs	r3, #3
 738 0042 0393     		str	r3, [sp, #12]
 339:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 739              		.loc 1 339 3 is_stmt 1 view .LVU144
 339:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 740              		.loc 1 339 24 is_stmt 0 view .LVU145
 741 0044 023B     		subs	r3, r3, #2
 742 0046 0493     		str	r3, [sp, #16]
 340:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 743              		.loc 1 340 3 is_stmt 1 view .LVU146
 340:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 744              		.loc 1 340 24 is_stmt 0 view .LVU147
 745 0048 0023     		movs	r3, #0
 746 004a 0593     		str	r3, [sp, #20]
 341:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 747              		.loc 1 341 3 is_stmt 1 view .LVU148
 341:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 748              		.loc 1 341 25 is_stmt 0 view .LVU149
 749 004c 0693     		str	r3, [sp, #24]
 342:Core/Src/main.c **** 
 750              		.loc 1 342 3 is_stmt 1 view .LVU150
 751 004e 03A9     		add	r1, sp, #12
 752 0050 2000     		movs	r0, r4
 753 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 754              	.LVL70:
 346:Core/Src/main.c **** 
 755              		.loc 1 346 1 is_stmt 0 view .LVU151
 756 0056 08B0     		add	sp, sp, #32
 757              		@ sp needed
 758 0058 10BD     		pop	{r4, pc}
 759              	.L28:
 760 005a C046     		.align	2
 761              	.L27:
 762 005c 00100240 		.word	1073876992
 763 0060 00040048 		.word	1207960576
 764              		.cfi_endproc
 765              	.LFE47:
 767              		.section	.text.enable_dwt_cycle_counter,"ax",%progbits
 768              		.align	1
 769              		.global	enable_dwt_cycle_counter
 770              		.syntax unified
 771              		.code	16
 772              		.thumb_func
 774              	enable_dwt_cycle_counter:
 775              	.LFB40:
 137:Core/Src/main.c ****     // For STM32F0, we don't have DWT, so we'll use SysTick
 776              		.loc 1 137 37 is_stmt 1 view -0
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 24


 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 140:Core/Src/main.c **** 
 781              		.loc 1 140 1 view .LVU153
 782              		@ sp needed
 783 0000 7047     		bx	lr
 784              		.cfi_endproc
 785              	.LFE40:
 787              		.section	.text.get_system_clock_frequency,"ax",%progbits
 788              		.align	1
 789              		.global	get_system_clock_frequency
 790              		.syntax unified
 791              		.code	16
 792              		.thumb_func
 794              	get_system_clock_frequency:
 795              	.LFB41:
 143:Core/Src/main.c ****     // Get the actual system clock frequency from RCC
 796              		.loc 1 143 43 view -0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 0
 799              		@ frame_needed = 0, uses_anonymous_args = 0
 800 0000 10B5     		push	{r4, lr}
 801              	.LCFI8:
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 4, -8
 804              		.cfi_offset 14, -4
 145:Core/Src/main.c **** }
 805              		.loc 1 145 5 view .LVU155
 145:Core/Src/main.c **** }
 806              		.loc 1 145 12 is_stmt 0 view .LVU156
 807 0002 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 808              	.LVL71:
 146:Core/Src/main.c **** 
 809              		.loc 1 146 1 view .LVU157
 810              		@ sp needed
 811 0006 10BD     		pop	{r4, pc}
 812              		.cfi_endproc
 813              	.LFE41:
 815              		.global	__aeabi_uidiv
 816              		.section	.text.get_dwt_cycles,"ax",%progbits
 817              		.align	1
 818              		.global	get_dwt_cycles
 819              		.syntax unified
 820              		.code	16
 821              		.thumb_func
 823              	get_dwt_cycles:
 824              	.LFB42:
 149:Core/Src/main.c ****     // For STM32F0, we'll estimate cycles based on actual system clock
 825              		.loc 1 149 31 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829 0000 10B5     		push	{r4, lr}
 830              	.LCFI9:
 831              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 25


 832              		.cfi_offset 4, -8
 833              		.cfi_offset 14, -4
 151:Core/Src/main.c ****     
 834              		.loc 1 151 5 view .LVU159
 151:Core/Src/main.c ****     
 835              		.loc 1 151 29 is_stmt 0 view .LVU160
 836 0002 FFF7FEFF 		bl	get_system_clock_frequency
 837              	.LVL72:
 154:Core/Src/main.c ****     uint32_t estimated_cycles = (wall_time_ms * system_clock) / 1000;
 838              		.loc 1 154 5 is_stmt 1 view .LVU161
 154:Core/Src/main.c ****     uint32_t estimated_cycles = (wall_time_ms * system_clock) / 1000;
 839              		.loc 1 154 38 is_stmt 0 view .LVU162
 840 0006 054B     		ldr	r3, .L32
 841 0008 1B68     		ldr	r3, [r3]
 842 000a 054A     		ldr	r2, .L32+4
 843 000c 1268     		ldr	r2, [r2]
 154:Core/Src/main.c ****     uint32_t estimated_cycles = (wall_time_ms * system_clock) / 1000;
 844              		.loc 1 154 14 view .LVU163
 845 000e 9B1A     		subs	r3, r3, r2
 846              	.LVL73:
 155:Core/Src/main.c ****     
 847              		.loc 1 155 5 is_stmt 1 view .LVU164
 155:Core/Src/main.c ****     
 848              		.loc 1 155 47 is_stmt 0 view .LVU165
 849 0010 5843     		muls	r0, r3
 850              	.LVL74:
 155:Core/Src/main.c ****     
 851              		.loc 1 155 14 view .LVU166
 852 0012 FA21     		movs	r1, #250
 853 0014 8900     		lsls	r1, r1, #2
 854 0016 FFF7FEFF 		bl	__aeabi_uidiv
 855              	.LVL75:
 157:Core/Src/main.c **** }
 856              		.loc 1 157 5 is_stmt 1 view .LVU167
 158:Core/Src/main.c **** 
 857              		.loc 1 158 1 is_stmt 0 view .LVU168
 858              		@ sp needed
 859 001a 10BD     		pop	{r4, pc}
 860              	.L33:
 861              		.align	2
 862              	.L32:
 863 001c 00000000 		.word	tick_end
 864 0020 00000000 		.word	tick_start
 865              		.cfi_endproc
 866              	.LFE42:
 868              		.global	__aeabi_i2f
 869              		.global	__aeabi_ui2f
 870              		.global	__aeabi_fdiv
 871              		.section	.text.calculate_throughput,"ax",%progbits
 872              		.align	1
 873              		.global	calculate_throughput
 874              		.syntax unified
 875              		.code	16
 876              		.thumb_func
 878              	calculate_throughput:
 879              	.LVL76:
 880              	.LFB43:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 26


 161:Core/Src/main.c ****     if (wall_clock_ms == 0) return 0.0f;
 881              		.loc 1 161 75 is_stmt 1 view -0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 161:Core/Src/main.c ****     if (wall_clock_ms == 0) return 0.0f;
 885              		.loc 1 161 75 is_stmt 0 view .LVU170
 886 0000 70B5     		push	{r4, r5, r6, lr}
 887              	.LCFI10:
 888              		.cfi_def_cfa_offset 16
 889              		.cfi_offset 4, -16
 890              		.cfi_offset 5, -12
 891              		.cfi_offset 6, -8
 892              		.cfi_offset 14, -4
 893 0002 141E     		subs	r4, r2, #0
 162:Core/Src/main.c ****     float total_pixels = (float)(width * height);
 894              		.loc 1 162 5 is_stmt 1 view .LVU171
 162:Core/Src/main.c ****     float total_pixels = (float)(width * height);
 895              		.loc 1 162 8 is_stmt 0 view .LVU172
 896 0004 0ED0     		beq	.L36
 163:Core/Src/main.c ****     float time_seconds = (float)wall_clock_ms / 1000.0f;
 897              		.loc 1 163 5 is_stmt 1 view .LVU173
 163:Core/Src/main.c ****     float time_seconds = (float)wall_clock_ms / 1000.0f;
 898              		.loc 1 163 40 is_stmt 0 view .LVU174
 899 0006 4843     		muls	r0, r1
 900              	.LVL77:
 163:Core/Src/main.c ****     float time_seconds = (float)wall_clock_ms / 1000.0f;
 901              		.loc 1 163 11 view .LVU175
 902 0008 FFF7FEFF 		bl	__aeabi_i2f
 903              	.LVL78:
 163:Core/Src/main.c ****     float time_seconds = (float)wall_clock_ms / 1000.0f;
 904              		.loc 1 163 11 view .LVU176
 905 000c 051C     		adds	r5, r0, #0
 906              	.LVL79:
 164:Core/Src/main.c ****     return total_pixels / time_seconds;
 907              		.loc 1 164 5 is_stmt 1 view .LVU177
 164:Core/Src/main.c ****     return total_pixels / time_seconds;
 908              		.loc 1 164 26 is_stmt 0 view .LVU178
 909 000e 2000     		movs	r0, r4
 910              	.LVL80:
 164:Core/Src/main.c ****     return total_pixels / time_seconds;
 911              		.loc 1 164 26 view .LVU179
 912 0010 FFF7FEFF 		bl	__aeabi_ui2f
 913              	.LVL81:
 164:Core/Src/main.c ****     return total_pixels / time_seconds;
 914              		.loc 1 164 11 view .LVU180
 915 0014 0449     		ldr	r1, .L37
 916 0016 FFF7FEFF 		bl	__aeabi_fdiv
 917              	.LVL82:
 918 001a 011C     		adds	r1, r0, #0
 919              	.LVL83:
 165:Core/Src/main.c **** }
 920              		.loc 1 165 5 is_stmt 1 view .LVU181
 165:Core/Src/main.c **** }
 921              		.loc 1 165 25 is_stmt 0 view .LVU182
 922 001c 281C     		adds	r0, r5, #0
 923              	.LVL84:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 27


 165:Core/Src/main.c **** }
 924              		.loc 1 165 25 view .LVU183
 925 001e FFF7FEFF 		bl	__aeabi_fdiv
 926              	.LVL85:
 927              	.L34:
 166:Core/Src/main.c **** 
 928              		.loc 1 166 1 view .LVU184
 929              		@ sp needed
 930              	.LVL86:
 166:Core/Src/main.c **** 
 931              		.loc 1 166 1 view .LVU185
 932 0022 70BD     		pop	{r4, r5, r6, pc}
 933              	.LVL87:
 934              	.L36:
 162:Core/Src/main.c ****     float total_pixels = (float)(width * height);
 935              		.loc 1 162 36 discriminator 1 view .LVU186
 936 0024 0020     		movs	r0, #0
 937              	.LVL88:
 162:Core/Src/main.c ****     float total_pixels = (float)(width * height);
 938              		.loc 1 162 36 discriminator 1 view .LVU187
 939 0026 FCE7     		b	.L34
 940              	.L38:
 941              		.align	2
 942              	.L37:
 943 0028 00007A44 		.word	1148846080
 944              		.cfi_endproc
 945              	.LFE43:
 947              		.section	.text.measure_execution_metrics,"ax",%progbits
 948              		.align	1
 949              		.global	measure_execution_metrics
 950              		.syntax unified
 951              		.code	16
 952              		.thumb_func
 954              	measure_execution_metrics:
 955              	.LVL89:
 956              	.LFB44:
 172:Core/Src/main.c ****     
 957              		.loc 1 172 70 is_stmt 1 view -0
 958              		.cfi_startproc
 959              		@ args = 16, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 172:Core/Src/main.c ****     
 961              		.loc 1 172 70 is_stmt 0 view .LVU189
 962 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 963              	.LCFI11:
 964              		.cfi_def_cfa_offset 24
 965              		.cfi_offset 3, -24
 966              		.cfi_offset 4, -20
 967              		.cfi_offset 5, -16
 968              		.cfi_offset 6, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 CE46     		mov	lr, r9
 972 0004 4746     		mov	r7, r8
 973 0006 80B5     		push	{r7, lr}
 974              	.LCFI12:
 975              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 28


 976              		.cfi_offset 8, -32
 977              		.cfi_offset 9, -28
 978 0008 0400     		movs	r4, r0
 979 000a 0D00     		movs	r5, r1
 980 000c 9146     		mov	r9, r2
 981 000e 9846     		mov	r8, r3
 982 0010 089F     		ldr	r7, [sp, #32]
 175:Core/Src/main.c ****     
 983              		.loc 1 175 5 is_stmt 1 view .LVU190
 175:Core/Src/main.c ****     
 984              		.loc 1 175 18 is_stmt 0 view .LVU191
 985 0012 FFF7FEFF 		bl	HAL_GetTick
 986              	.LVL90:
 175:Core/Src/main.c ****     
 987              		.loc 1 175 16 discriminator 1 view .LVU192
 988 0016 0F4E     		ldr	r6, .L40
 989 0018 3060     		str	r0, [r6]
 178:Core/Src/main.c ****     
 990              		.loc 1 178 5 is_stmt 1 view .LVU193
 178:Core/Src/main.c ****     
 991              		.loc 1 178 17 is_stmt 0 view .LVU194
 992 001a 4A46     		mov	r2, r9
 993 001c 2900     		movs	r1, r5
 994 001e 2000     		movs	r0, r4
 995 0020 C047     		blx	r8
 996              	.LVL91:
 178:Core/Src/main.c ****     
 997              		.loc 1 178 15 discriminator 1 view .LVU195
 998 0022 0B9B     		ldr	r3, [sp, #44]
 999 0024 1860     		str	r0, [r3]
 1000 0026 5960     		str	r1, [r3, #4]
 181:Core/Src/main.c ****     
 1001              		.loc 1 181 5 is_stmt 1 view .LVU196
 181:Core/Src/main.c ****     
 1002              		.loc 1 181 16 is_stmt 0 view .LVU197
 1003 0028 FFF7FEFF 		bl	HAL_GetTick
 1004              	.LVL92:
 181:Core/Src/main.c ****     
 1005              		.loc 1 181 14 discriminator 1 view .LVU198
 1006 002c 0A4B     		ldr	r3, .L40+4
 1007 002e 1860     		str	r0, [r3]
 184:Core/Src/main.c ****     
 1008              		.loc 1 184 5 is_stmt 1 view .LVU199
 184:Core/Src/main.c ****     
 1009              		.loc 1 184 28 is_stmt 0 view .LVU200
 1010 0030 3368     		ldr	r3, [r6]
 1011 0032 C31A     		subs	r3, r0, r3
 184:Core/Src/main.c ****     
 1012              		.loc 1 184 17 view .LVU201
 1013 0034 3B60     		str	r3, [r7]
 188:Core/Src/main.c ****     
 1014              		.loc 1 188 5 is_stmt 1 view .LVU202
 188:Core/Src/main.c ****     
 1015              		.loc 1 188 19 is_stmt 0 view .LVU203
 1016 0036 FFF7FEFF 		bl	get_dwt_cycles
 1017              	.LVL93:
 188:Core/Src/main.c ****     
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 29


 1018              		.loc 1 188 17 discriminator 1 view .LVU204
 1019 003a 099B     		ldr	r3, [sp, #36]
 1020 003c 1860     		str	r0, [r3]
 190:Core/Src/main.c **** }
 1021              		.loc 1 190 5 is_stmt 1 view .LVU205
 190:Core/Src/main.c **** }
 1022              		.loc 1 190 19 is_stmt 0 view .LVU206
 1023 003e 3A68     		ldr	r2, [r7]
 1024 0040 2900     		movs	r1, r5
 1025 0042 2000     		movs	r0, r4
 1026 0044 FFF7FEFF 		bl	calculate_throughput
 1027              	.LVL94:
 190:Core/Src/main.c **** }
 1028              		.loc 1 190 17 discriminator 1 view .LVU207
 1029 0048 0A9B     		ldr	r3, [sp, #40]
 1030 004a 1860     		str	r0, [r3]
 191:Core/Src/main.c **** 
 1031              		.loc 1 191 1 view .LVU208
 1032              		@ sp needed
 1033              	.LVL95:
 1034              	.LVL96:
 1035              	.LVL97:
 1036              	.LVL98:
 191:Core/Src/main.c **** 
 1037              		.loc 1 191 1 view .LVU209
 1038 004c C0BC     		pop	{r6, r7}
 1039 004e B946     		mov	r9, r7
 1040 0050 B046     		mov	r8, r6
 1041 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1042              	.L41:
 1043              		.align	2
 1044              	.L40:
 1045 0054 00000000 		.word	tick_start
 1046 0058 00000000 		.word	tick_end
 1047              		.cfi_endproc
 1048              	.LFE44:
 1050              		.section	.text.Error_Handler,"ax",%progbits
 1051              		.align	1
 1052              		.global	Error_Handler
 1053              		.syntax unified
 1054              		.code	16
 1055              		.thumb_func
 1057              	Error_Handler:
 1058              	.LFB50:
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /* USER CODE END 4 */
 454:Core/Src/main.c **** 
 455:Core/Src/main.c **** /**
 456:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 457:Core/Src/main.c ****   * @retval None
 458:Core/Src/main.c ****   */
 459:Core/Src/main.c **** void Error_Handler(void)
 460:Core/Src/main.c **** {
 1059              		.loc 1 460 1 is_stmt 1 view -0
 1060              		.cfi_startproc
 1061              		@ Volatile: function does not return.
 1062              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 30


 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064              		@ link register save eliminated.
 461:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 462:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 463:Core/Src/main.c ****   __disable_irq();
 1065              		.loc 1 463 3 view .LVU211
 1066              	.LBB20:
 1067              	.LBI20:
 1068              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 31


  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 32


 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1069              		.loc 2 140 27 view .LVU212
 1070              	.LBB21:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1071              		.loc 2 142 3 view .LVU213
 1072              		.syntax divided
 1073              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1074 0000 72B6     		cpsid i
 1075              	@ 0 "" 2
 1076              		.thumb
 1077              		.syntax unified
 1078              	.L43:
 1079              	.LBE21:
 1080              	.LBE20:
 464:Core/Src/main.c ****   while (1)
 1081              		.loc 1 464 3 view .LVU214
 465:Core/Src/main.c ****   {
 466:Core/Src/main.c ****   }
 1082              		.loc 1 466 3 view .LVU215
 464:Core/Src/main.c ****   while (1)
 1083              		.loc 1 464 9 view .LVU216
 1084 0002 FEE7     		b	.L43
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 33


 1085              		.cfi_endproc
 1086              	.LFE50:
 1088              		.section	.text.SystemClock_Config,"ax",%progbits
 1089              		.align	1
 1090              		.global	SystemClock_Config
 1091              		.syntax unified
 1092              		.code	16
 1093              		.thumb_func
 1095              	SystemClock_Config:
 1096              	.LFB46:
 289:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1097              		.loc 1 289 1 view -0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 64
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101 0000 00B5     		push	{lr}
 1102              	.LCFI13:
 1103              		.cfi_def_cfa_offset 4
 1104              		.cfi_offset 14, -4
 1105 0002 91B0     		sub	sp, sp, #68
 1106              	.LCFI14:
 1107              		.cfi_def_cfa_offset 72
 290:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1108              		.loc 1 290 3 view .LVU218
 290:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1109              		.loc 1 290 22 is_stmt 0 view .LVU219
 1110 0004 3022     		movs	r2, #48
 1111 0006 0021     		movs	r1, #0
 1112 0008 04A8     		add	r0, sp, #16
 1113 000a FFF7FEFF 		bl	memset
 1114              	.LVL99:
 291:Core/Src/main.c **** 
 1115              		.loc 1 291 3 is_stmt 1 view .LVU220
 291:Core/Src/main.c **** 
 1116              		.loc 1 291 22 is_stmt 0 view .LVU221
 1117 000e 1022     		movs	r2, #16
 1118 0010 0021     		movs	r1, #0
 1119 0012 6846     		mov	r0, sp
 1120 0014 FFF7FEFF 		bl	memset
 1121              	.LVL100:
 296:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1122              		.loc 1 296 3 is_stmt 1 view .LVU222
 296:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1123              		.loc 1 296 36 is_stmt 0 view .LVU223
 1124 0018 0223     		movs	r3, #2
 1125 001a 0493     		str	r3, [sp, #16]
 297:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1126              		.loc 1 297 3 is_stmt 1 view .LVU224
 297:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1127              		.loc 1 297 30 is_stmt 0 view .LVU225
 1128 001c 013B     		subs	r3, r3, #1
 1129 001e 0793     		str	r3, [sp, #28]
 298:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1130              		.loc 1 298 3 is_stmt 1 view .LVU226
 298:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1131              		.loc 1 298 41 is_stmt 0 view .LVU227
 1132 0020 0F33     		adds	r3, r3, #15
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 34


 1133 0022 0893     		str	r3, [sp, #32]
 299:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1134              		.loc 1 299 3 is_stmt 1 view .LVU228
 300:Core/Src/main.c ****   {
 1135              		.loc 1 300 3 view .LVU229
 300:Core/Src/main.c ****   {
 1136              		.loc 1 300 7 is_stmt 0 view .LVU230
 1137 0024 04A8     		add	r0, sp, #16
 1138 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1139              	.LVL101:
 300:Core/Src/main.c ****   {
 1140              		.loc 1 300 6 discriminator 1 view .LVU231
 1141 002a 0028     		cmp	r0, #0
 1142 002c 0DD1     		bne	.L47
 307:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1143              		.loc 1 307 3 is_stmt 1 view .LVU232
 307:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1144              		.loc 1 307 31 is_stmt 0 view .LVU233
 1145 002e 0723     		movs	r3, #7
 1146 0030 0093     		str	r3, [sp]
 309:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1147              		.loc 1 309 3 is_stmt 1 view .LVU234
 309:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1148              		.loc 1 309 34 is_stmt 0 view .LVU235
 1149 0032 0023     		movs	r3, #0
 1150 0034 0193     		str	r3, [sp, #4]
 310:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1151              		.loc 1 310 3 is_stmt 1 view .LVU236
 310:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1152              		.loc 1 310 35 is_stmt 0 view .LVU237
 1153 0036 0293     		str	r3, [sp, #8]
 311:Core/Src/main.c **** 
 1154              		.loc 1 311 3 is_stmt 1 view .LVU238
 311:Core/Src/main.c **** 
 1155              		.loc 1 311 36 is_stmt 0 view .LVU239
 1156 0038 0393     		str	r3, [sp, #12]
 313:Core/Src/main.c ****   {
 1157              		.loc 1 313 3 is_stmt 1 view .LVU240
 313:Core/Src/main.c ****   {
 1158              		.loc 1 313 7 is_stmt 0 view .LVU241
 1159 003a 0021     		movs	r1, #0
 1160 003c 6846     		mov	r0, sp
 1161 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1162              	.LVL102:
 313:Core/Src/main.c ****   {
 1163              		.loc 1 313 6 discriminator 1 view .LVU242
 1164 0042 0028     		cmp	r0, #0
 1165 0044 03D1     		bne	.L48
 317:Core/Src/main.c **** 
 1166              		.loc 1 317 1 view .LVU243
 1167 0046 11B0     		add	sp, sp, #68
 1168              		@ sp needed
 1169 0048 00BD     		pop	{pc}
 1170              	.L47:
 302:Core/Src/main.c ****   }
 1171              		.loc 1 302 5 is_stmt 1 view .LVU244
 1172 004a FFF7FEFF 		bl	Error_Handler
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 35


 1173              	.LVL103:
 1174              	.L48:
 315:Core/Src/main.c ****   }
 1175              		.loc 1 315 5 view .LVU245
 1176 004e FFF7FEFF 		bl	Error_Handler
 1177              	.LVL104:
 1178              		.cfi_endproc
 1179              	.LFE46:
 1181              		.section	.text.main,"ax",%progbits
 1182              		.align	1
 1183              		.global	main
 1184              		.syntax unified
 1185              		.code	16
 1186              		.thumb_func
 1188              	main:
 1189              	.LFB45:
 200:Core/Src/main.c ****     /* USER CODE BEGIN 1 */
 1190              		.loc 1 200 3 view -0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 0
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1195              	.LCFI15:
 1196              		.cfi_def_cfa_offset 20
 1197              		.cfi_offset 4, -20
 1198              		.cfi_offset 5, -16
 1199              		.cfi_offset 6, -12
 1200              		.cfi_offset 7, -8
 1201              		.cfi_offset 14, -4
 1202 0002 C646     		mov	lr, r8
 1203 0004 00B5     		push	{lr}
 1204              	.LCFI16:
 1205              		.cfi_def_cfa_offset 24
 1206              		.cfi_offset 8, -24
 1207 0006 84B0     		sub	sp, sp, #16
 1208              	.LCFI17:
 1209              		.cfi_def_cfa_offset 40
 208:Core/Src/main.c ****   
 1210              		.loc 1 208 5 view .LVU247
 1211 0008 FFF7FEFF 		bl	HAL_Init
 1212              	.LVL105:
 215:Core/Src/main.c ****   
 1213              		.loc 1 215 5 view .LVU248
 1214 000c FFF7FEFF 		bl	SystemClock_Config
 1215              	.LVL106:
 222:Core/Src/main.c ****     /* USER CODE BEGIN 2 */
 1216              		.loc 1 222 5 view .LVU249
 1217 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1218              	.LVL107:
 226:Core/Src/main.c ****     
 1219              		.loc 1 226 5 view .LVU250
 230:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
 1220              		.loc 1 230 5 view .LVU251
 1221              	.LBB22:
 230:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
 1222              		.loc 1 230 10 view .LVU252
 230:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 36


 1223              		.loc 1 230 14 is_stmt 0 view .LVU253
 1224 0014 0025     		movs	r5, #0
 230:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
 1225              		.loc 1 230 5 view .LVU254
 1226 0016 45E0     		b	.L50
 1227              	.LVL108:
 1228              	.L51:
 1229              	.LBB23:
 231:Core/Src/main.c ****         
 1230              		.loc 1 231 9 is_stmt 1 view .LVU255
 231:Core/Src/main.c ****         
 1231              		.loc 1 231 13 is_stmt 0 view .LVU256
 1232 0018 314B     		ldr	r3, .L53
 1233 001a AC00     		lsls	r4, r5, #2
 1234 001c E758     		ldr	r7, [r4, r3]
 1235              	.LVL109:
 234:Core/Src/main.c ****         
 1236              		.loc 1 234 9 is_stmt 1 view .LVU257
 1237 001e 9026     		movs	r6, #144
 1238 0020 F605     		lsls	r6, r6, #23
 1239 0022 0122     		movs	r2, #1
 1240 0024 0121     		movs	r1, #1
 1241 0026 3000     		movs	r0, r6
 1242 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1243              	.LVL110:
 236:Core/Src/main.c ****                                  calculate_mandelbrot_fixed_point_arithmetic,
 1244              		.loc 1 236 9 view .LVU258
 1245 002c 2D4B     		ldr	r3, .L53+4
 1246 002e EA00     		lsls	r2, r5, #3
 1247 0030 9046     		mov	r8, r2
 1248 0032 2D4A     		ldr	r2, .L53+8
 1249 0034 4244     		add	r2, r2, r8
 1250 0036 0392     		str	r2, [sp, #12]
 1251 0038 2C4A     		ldr	r2, .L53+12
 1252 003a A218     		adds	r2, r4, r2
 1253 003c 0292     		str	r2, [sp, #8]
 1254 003e 2C4A     		ldr	r2, .L53+16
 1255 0040 A218     		adds	r2, r4, r2
 1256 0042 0192     		str	r2, [sp, #4]
 1257 0044 2B4A     		ldr	r2, .L53+20
 1258 0046 A218     		adds	r2, r4, r2
 1259 0048 0092     		str	r2, [sp]
 1260 004a 6422     		movs	r2, #100
 1261 004c 3900     		movs	r1, r7
 1262 004e 3800     		movs	r0, r7
 1263 0050 FFF7FEFF 		bl	measure_execution_metrics
 1264              	.LVL111:
 243:Core/Src/main.c ****         HAL_Delay(200);
 1265              		.loc 1 243 9 view .LVU259
 1266 0054 0022     		movs	r2, #0
 1267 0056 0121     		movs	r1, #1
 1268 0058 3000     		movs	r0, r6
 1269 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1270              	.LVL112:
 244:Core/Src/main.c ****         
 1271              		.loc 1 244 9 view .LVU260
 1272 005e C820     		movs	r0, #200
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 37


 1273 0060 FFF7FEFF 		bl	HAL_Delay
 1274              	.LVL113:
 247:Core/Src/main.c ****         
 1275              		.loc 1 247 9 view .LVU261
 1276 0064 0122     		movs	r2, #1
 1277 0066 0221     		movs	r1, #2
 1278 0068 3000     		movs	r0, r6
 1279 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1280              	.LVL114:
 249:Core/Src/main.c ****                                  calculate_mandelbrot_double,
 1281              		.loc 1 249 9 view .LVU262
 1282 006e 224B     		ldr	r3, .L53+24
 1283 0070 224A     		ldr	r2, .L53+28
 1284 0072 4244     		add	r2, r2, r8
 1285 0074 0392     		str	r2, [sp, #12]
 1286 0076 224A     		ldr	r2, .L53+32
 1287 0078 A218     		adds	r2, r4, r2
 1288 007a 0292     		str	r2, [sp, #8]
 1289 007c 214A     		ldr	r2, .L53+36
 1290 007e A218     		adds	r2, r4, r2
 1291 0080 0192     		str	r2, [sp, #4]
 1292 0082 214A     		ldr	r2, .L53+40
 1293 0084 A418     		adds	r4, r4, r2
 1294 0086 0094     		str	r4, [sp]
 1295 0088 6422     		movs	r2, #100
 1296 008a 3900     		movs	r1, r7
 1297 008c 3800     		movs	r0, r7
 1298 008e FFF7FEFF 		bl	measure_execution_metrics
 1299              	.LVL115:
 256:Core/Src/main.c ****         HAL_Delay(200);
 1300              		.loc 1 256 9 view .LVU263
 1301 0092 0022     		movs	r2, #0
 1302 0094 0221     		movs	r1, #2
 1303 0096 3000     		movs	r0, r6
 1304 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1305              	.LVL116:
 257:Core/Src/main.c ****     }
 1306              		.loc 1 257 9 view .LVU264
 1307 009c C820     		movs	r0, #200
 1308 009e FFF7FEFF 		bl	HAL_Delay
 1309              	.LVL117:
 1310              	.LBE23:
 230:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
 1311              		.loc 1 230 53 discriminator 3 view .LVU265
 1312 00a2 0135     		adds	r5, r5, #1
 1313              	.LVL118:
 1314              	.L50:
 230:Core/Src/main.c ****         int current_image_size = task3_image_sizes[test_size];
 1315              		.loc 1 230 39 discriminator 1 view .LVU266
 1316 00a4 042D     		cmp	r5, #4
 1317 00a6 B7DD     		ble	.L51
 1318              	.LBE22:
 261:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 1319              		.loc 1 261 5 view .LVU267
 1320 00a8 9024     		movs	r4, #144
 1321 00aa E405     		lsls	r4, r4, #23
 1322 00ac 0122     		movs	r2, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 38


 1323 00ae 0121     		movs	r1, #1
 1324 00b0 2000     		movs	r0, r4
 1325 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1326              	.LVL119:
 262:Core/Src/main.c ****     
 1327              		.loc 1 262 5 view .LVU268
 1328 00b6 0122     		movs	r2, #1
 1329 00b8 0221     		movs	r1, #2
 1330 00ba 2000     		movs	r0, r4
 1331 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1332              	.LVL120:
 265:Core/Src/main.c ****     
 1333              		.loc 1 265 5 view .LVU269
 1334 00c0 FA20     		movs	r0, #250
 1335 00c2 C000     		lsls	r0, r0, #3
 1336 00c4 FFF7FEFF 		bl	HAL_Delay
 1337              	.LVL121:
 268:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 1338              		.loc 1 268 5 view .LVU270
 1339 00c8 0022     		movs	r2, #0
 1340 00ca 0121     		movs	r1, #1
 1341 00cc 2000     		movs	r0, r4
 1342 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 1343              	.LVL122:
 269:Core/Src/main.c ****   
 1344              		.loc 1 269 5 view .LVU271
 1345 00d2 0022     		movs	r2, #0
 1346 00d4 0221     		movs	r1, #2
 1347 00d6 2000     		movs	r0, r4
 1348 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1349              	.LVL123:
 1350              	.L52:
 275:Core/Src/main.c ****     {
 1351              		.loc 1 275 5 view .LVU272
 280:Core/Src/main.c ****     /* USER CODE END 3 */
 1352              		.loc 1 280 5 view .LVU273
 275:Core/Src/main.c ****     {
 1353              		.loc 1 275 11 view .LVU274
 1354 00dc FEE7     		b	.L52
 1355              	.L54:
 1356 00de C046     		.align	2
 1357              	.L53:
 1358 00e0 00000000 		.word	task3_image_sizes
 1359 00e4 00000000 		.word	calculate_mandelbrot_fixed_point_arithmetic
 1360 00e8 00000000 		.word	checksums_fixed
 1361 00ec 00000000 		.word	throughput_fixed
 1362 00f0 00000000 		.word	cpu_cycles_fixed
 1363 00f4 00000000 		.word	wall_clock_fixed
 1364 00f8 00000000 		.word	calculate_mandelbrot_double
 1365 00fc 00000000 		.word	checksums_double
 1366 0100 00000000 		.word	throughput_double
 1367 0104 00000000 		.word	cpu_cycles_double
 1368 0108 00000000 		.word	wall_clock_double
 1369              		.cfi_endproc
 1370              	.LFE45:
 1372              		.global	tick_end
 1373              		.section	.bss.tick_end,"aw",%nobits
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 39


 1374              		.align	2
 1377              	tick_end:
 1378 0000 00000000 		.space	4
 1379              		.global	tick_start
 1380              		.section	.bss.tick_start,"aw",%nobits
 1381              		.align	2
 1384              	tick_start:
 1385 0000 00000000 		.space	4
 1386              		.global	task3_image_sizes
 1387              		.section	.data.task3_image_sizes,"aw"
 1388              		.align	2
 1391              	task3_image_sizes:
 1392 0000 80000000 		.word	128
 1393 0004 A0000000 		.word	160
 1394 0008 C0000000 		.word	192
 1395 000c E0000000 		.word	224
 1396 0010 00010000 		.word	256
 1397              		.global	throughput_double
 1398              		.section	.bss.throughput_double,"aw",%nobits
 1399              		.align	2
 1402              	throughput_double:
 1403 0000 00000000 		.space	20
 1403      00000000 
 1403      00000000 
 1403      00000000 
 1403      00000000 
 1404              		.global	throughput_fixed
 1405              		.section	.bss.throughput_fixed,"aw",%nobits
 1406              		.align	2
 1409              	throughput_fixed:
 1410 0000 00000000 		.space	20
 1410      00000000 
 1410      00000000 
 1410      00000000 
 1410      00000000 
 1411              		.global	cpu_cycles_double
 1412              		.section	.bss.cpu_cycles_double,"aw",%nobits
 1413              		.align	2
 1416              	cpu_cycles_double:
 1417 0000 00000000 		.space	20
 1417      00000000 
 1417      00000000 
 1417      00000000 
 1417      00000000 
 1418              		.global	cpu_cycles_fixed
 1419              		.section	.bss.cpu_cycles_fixed,"aw",%nobits
 1420              		.align	2
 1423              	cpu_cycles_fixed:
 1424 0000 00000000 		.space	20
 1424      00000000 
 1424      00000000 
 1424      00000000 
 1424      00000000 
 1425              		.global	wall_clock_double
 1426              		.section	.bss.wall_clock_double,"aw",%nobits
 1427              		.align	2
 1430              	wall_clock_double:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 40


 1431 0000 00000000 		.space	20
 1431      00000000 
 1431      00000000 
 1431      00000000 
 1431      00000000 
 1432              		.global	wall_clock_fixed
 1433              		.section	.bss.wall_clock_fixed,"aw",%nobits
 1434              		.align	2
 1437              	wall_clock_fixed:
 1438 0000 00000000 		.space	20
 1438      00000000 
 1438      00000000 
 1438      00000000 
 1438      00000000 
 1439              		.global	image_sizes
 1440              		.section	.data.image_sizes,"aw"
 1441              		.align	2
 1444              	image_sizes:
 1445 0000 80000000 		.word	128
 1446 0004 80000000 		.word	128
 1447 0008 80000000 		.word	128
 1448 000c 80000000 		.word	128
 1449 0010 80000000 		.word	128
 1450              		.global	max_iter_values
 1451              		.section	.data.max_iter_values,"aw"
 1452              		.align	2
 1455              	max_iter_values:
 1456 0000 64000000 		.word	100
 1457 0004 FA000000 		.word	250
 1458 0008 F4010000 		.word	500
 1459 000c EE020000 		.word	750
 1460 0010 E8030000 		.word	1000
 1461              		.global	checksums_double
 1462              		.section	.bss.checksums_double,"aw",%nobits
 1463              		.align	3
 1466              	checksums_double:
 1467 0000 00000000 		.space	40
 1467      00000000 
 1467      00000000 
 1467      00000000 
 1467      00000000 
 1468              		.global	checksums_fixed
 1469              		.section	.bss.checksums_fixed,"aw",%nobits
 1470              		.align	3
 1473              	checksums_fixed:
 1474 0000 00000000 		.space	40
 1474      00000000 
 1474      00000000 
 1474      00000000 
 1474      00000000 
 1475              		.global	execution_times_double
 1476              		.section	.bss.execution_times_double,"aw",%nobits
 1477              		.align	2
 1480              	execution_times_double:
 1481 0000 00000000 		.space	20
 1481      00000000 
 1481      00000000 
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 41


 1481      00000000 
 1481      00000000 
 1482              		.global	execution_times_fixed
 1483              		.section	.bss.execution_times_fixed,"aw",%nobits
 1484              		.align	2
 1487              	execution_times_fixed:
 1488 0000 00000000 		.space	20
 1488      00000000 
 1488      00000000 
 1488      00000000 
 1488      00000000 
 1489              		.global	end_time
 1490              		.section	.bss.end_time,"aw",%nobits
 1491              		.align	2
 1494              	end_time:
 1495 0000 00000000 		.space	4
 1496              		.global	start_time
 1497              		.section	.bss.start_time,"aw",%nobits
 1498              		.align	2
 1501              	start_time:
 1502 0000 00000000 		.space	4
 1503              		.global	execution_time
 1504              		.section	.bss.execution_time,"aw",%nobits
 1505              		.align	2
 1508              	execution_time:
 1509 0000 00000000 		.space	4
 1510              		.global	global_checksum
 1511              		.section	.bss.global_checksum,"aw",%nobits
 1512              		.align	3
 1515              	global_checksum:
 1516 0000 00000000 		.space	8
 1516      00000000 
 1517              		.text
 1518              	.Letext0:
 1519              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1520              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1521              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 1522              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1523              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1524              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1525              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1526              		.file 10 "<built-in>"
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:21     .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:27     .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:329    .text.calculate_mandelbrot_fixed_point_arithmetic:00000160 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:345    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:351    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:659    .text.calculate_mandelbrot_double:0000016c $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:667    .text.MX_GPIO_Init:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:672    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:762    .text.MX_GPIO_Init:0000005c $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:768    .text.enable_dwt_cycle_counter:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:774    .text.enable_dwt_cycle_counter:00000000 enable_dwt_cycle_counter
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:788    .text.get_system_clock_frequency:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:794    .text.get_system_clock_frequency:00000000 get_system_clock_frequency
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:817    .text.get_dwt_cycles:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:823    .text.get_dwt_cycles:00000000 get_dwt_cycles
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:863    .text.get_dwt_cycles:0000001c $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1377   .bss.tick_end:00000000 tick_end
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1384   .bss.tick_start:00000000 tick_start
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:872    .text.calculate_throughput:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:878    .text.calculate_throughput:00000000 calculate_throughput
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:943    .text.calculate_throughput:00000028 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:948    .text.measure_execution_metrics:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:954    .text.measure_execution_metrics:00000000 measure_execution_metrics
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1045   .text.measure_execution_metrics:00000054 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1051   .text.Error_Handler:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1057   .text.Error_Handler:00000000 Error_Handler
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1089   .text.SystemClock_Config:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1095   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1182   .text.main:00000000 $t
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1188   .text.main:00000000 main
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1358   .text.main:000000e0 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1391   .data.task3_image_sizes:00000000 task3_image_sizes
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1473   .bss.checksums_fixed:00000000 checksums_fixed
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1409   .bss.throughput_fixed:00000000 throughput_fixed
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1423   .bss.cpu_cycles_fixed:00000000 cpu_cycles_fixed
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1437   .bss.wall_clock_fixed:00000000 wall_clock_fixed
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1466   .bss.checksums_double:00000000 checksums_double
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1402   .bss.throughput_double:00000000 throughput_double
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1416   .bss.cpu_cycles_double:00000000 cpu_cycles_double
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1430   .bss.wall_clock_double:00000000 wall_clock_double
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1374   .bss.tick_end:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1381   .bss.tick_start:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1388   .data.task3_image_sizes:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1399   .bss.throughput_double:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1406   .bss.throughput_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1413   .bss.cpu_cycles_double:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1420   .bss.cpu_cycles_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1427   .bss.wall_clock_double:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1434   .bss.wall_clock_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1444   .data.image_sizes:00000000 image_sizes
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1441   .data.image_sizes:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1455   .data.max_iter_values:00000000 max_iter_values
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1452   .data.max_iter_values:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1463   .bss.checksums_double:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1470   .bss.checksums_fixed:00000000 $d
ARM GAS  C:\Users\User\AppData\Local\Temp\cc70GhKO.s 			page 43


C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1480   .bss.execution_times_double:00000000 execution_times_double
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1477   .bss.execution_times_double:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1487   .bss.execution_times_fixed:00000000 execution_times_fixed
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1484   .bss.execution_times_fixed:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1494   .bss.end_time:00000000 end_time
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1491   .bss.end_time:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1501   .bss.start_time:00000000 start_time
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1498   .bss.start_time:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1508   .bss.execution_time:00000000 execution_time
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1505   .bss.execution_time:00000000 $d
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1515   .bss.global_checksum:00000000 global_checksum
C:\Users\User\AppData\Local\Temp\cc70GhKO.s:1512   .bss.global_checksum:00000000 $d

UNDEFINED SYMBOLS
__aeabi_lmul
__aeabi_ldivmod
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmple
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_RCC_GetSysClockFreq
__aeabi_uidiv
__aeabi_i2f
__aeabi_ui2f
__aeabi_fdiv
HAL_GetTick
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
